// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  accessMem_request : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accessMem_request] 64 $depth 2 
// $pipe  accessMem_response : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accessMem_response] 32 $depth 2 
// $pipe  accessReg_request : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accessReg_request] 64 $depth 2 
// $pipe  accessReg_response1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accessReg_response1] 32 $depth 2 
// $pipe  accessReg_response2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [accessReg_response2] 32 $depth 2 
// $pipe  processor_result : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [processor_result] 32 $depth 2 
// $pipe  start_processor : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [start_processor] 8 $depth 2 
$constant $W[ADD] : $int<8> := _b00001001// 9
$constant $W[BN] : $int<8> := _b00001111// 15
$constant $W[BZ] : $int<8> := _b00001110// 14
$constant $W[CALL] : $int<8> := _b00010000// 16
$constant $W[CMP] : $int<8> := _b00010010// 18
$constant $W[HALT] : $int<8> := _b00000001// 1
$constant $W[JMP] : $int<8> := _b00010001// 17
$constant $W[LOAD] : $int<8> := _b00000011// 3
$constant $W[L_AND] : $int<8> := _b00000101// 5
$constant $W[L_OR] : $int<8> := _b00000110// 6
$constant $W[L_SLL] : $int<8> := _b00001011// 11
$constant $W[L_SRA] : $int<8> := _b00001101// 13
$constant $W[L_SRL] : $int<8> := _b00001100// 12
$constant $W[L_XNOR] : $int<8> := _b00000111// 7
$constant $W[L_XOR] : $int<8> := _b00001000// 8
$constant $W[SBIR] : $int<8> := _b00000010// 2
$constant $W[STORE] : $int<8> := _b00000100// 4
$constant $W[SUB] : $int<8> := _b00001010// 10
$constant $W[byte_mask_3_bytes] : $int<32> := _b11111111111111111111111100000000// -256
// load store constants for object mem_array
$constant $W[mem_array_base_address] : $int<10> := _b0000000000
$constant $W[minus_1] : $int<32> := _b11111111111111111111111111111111// -1
$constant $W[one_1] : $int<1> := _b1// 1
$constant $W[one_10] : $int<10> := _b0000000001// 1
$constant $W[one_32] : $int<32> := _b00000000000000000000000000000001// 1
$constant $W[one_8] : $int<8> := _b00000001// 1
$constant $W[read_signal] : $int<1> := _b1// 1
// load store constants for object reg_array
$constant $W[reg_array_base_address] : $int<6> := _b000000
$constant $W[thirty_one_32] : $int<32> := _b00000000000000000000000000011111// 31
$constant $W[thirty_two_32] : $int<32> := _b00000000000000000000000000100000// 32
$constant $W[write_signal] : $int<1> := _b0// 0
$constant $W[zero_1] : $int<1> := _b0// 0
$constant $W[zero_10] : $int<10> := _b0000000000// 0
$constant $W[zero_106] : $int<106> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
$constant $W[zero_139] : $int<139> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
$constant $W[zero_171] : $int<171> := _b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
$constant $W[zero_32] : $int<32> := _b00000000000000000000000000000000// 0
$constant $W[zero_42] : $int<42> := _b000000000000000000000000000000000000000000// 0
$constant $W[zero_8] : $int<8> := _b00000000// 0
$memoryspace [memory_space_0] 
{
  $capacity 1024
  $datawidth 32
  $addrwidth 10
  $maxaccesswidth 32
  // $storage  mem_array : $array[1024] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [mem_array] : $array[1024] $of $int<32>
}
$memoryspace [memory_space_1] 
{
  $capacity 64
  $datawidth 32
  $addrwidth 6
  $maxaccesswidth 32
  // $storage  reg_array : $array[64] $of $uint<32> // memory space index = 1  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [reg_array] : $array[64] $of $int<32>
}
$pipeline $depth 7 $buffering 1 $module [accessMem] 
{
  $in read_write_bar:$int<1>
  // can point into 
  addr:$int<10>
  // can point into 
  write_data:$int<32>
  // can point into 
  $out read_data:$int<32>
  // can point into 
  // pipe-declarations for block %accessMem
  //  file prog.linked.opt.aa, line 55
  // memory-space 0 is written into.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_137_to_assign_stmt_151] 
    {
      $T [read_write_bar_update_enable] 
      $T [read_write_bar_update_enable_out] 
      read_write_bar_update_enable &-> (read_write_bar_update_enable_out)
      $null &-> (read_write_bar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [write_data_update_enable] 
      $T [write_data_update_enable_out] 
      write_data_update_enable &-> (write_data_update_enable_out)
      $null &-> (write_data_update_enable)
      $T [read_data_update_enable] 
      $T [read_data_update_enable_in] 
      $null &-> (read_data_update_enable)
      $null <-& (read_data_update_enable_in) 
      $null &-> (read_data_update_enable)
      read_data_update_enable <-& (read_data_update_enable_in) 
      // start:  	$guard (read_write_bar) t_read_data := mem_array[addr]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 60
      // Guard expression 
      // read_write_bar
      // Source expression
      // mem_array[addr]
      $T[array_obj_ref_136_base_address_calculated] 
      $T[array_obj_ref_136_sample_start_] 
      $T[array_obj_ref_136_sample_completed_] 
      $T[array_obj_ref_136_update_start_] 
      $T[array_obj_ref_136_update_completed_] 
      $T[array_obj_ref_136_word_address_calculated] 
      $T[array_obj_ref_136_root_address_calculated] 
      $T[array_obj_ref_136_offset_calculated] 
      $T[array_obj_ref_136_index_resized_0] 
      $T[array_obj_ref_136_index_scaled_0] 
      $T[array_obj_ref_136_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_136_index_computed_0
      array_obj_ref_136_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_136_index_computed_0
      ;;[array_obj_ref_136_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_136_index_computed_0 &-> (array_obj_ref_136_index_resize_0)
      array_obj_ref_136_index_resized_0 <-& (array_obj_ref_136_index_resize_0)
      ;;[array_obj_ref_136_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_136_index_resized_0 &-> (array_obj_ref_136_index_scale_0)
      array_obj_ref_136_index_scaled_0 <-& (array_obj_ref_136_index_scale_0)
      ;;[array_obj_ref_136_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_136_index_scaled_0 &-> (array_obj_ref_136_final_index_sum_regn)
      array_obj_ref_136_offset_calculated <-& (array_obj_ref_136_final_index_sum_regn)
      ;;[array_obj_ref_136_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_136_offset_calculated &-> (array_obj_ref_136_base_plus_offset)
      array_obj_ref_136_root_address_calculated <-& (array_obj_ref_136_base_plus_offset)
      ;;[array_obj_ref_136_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_136_root_address_calculated &-> (array_obj_ref_136_word_addrgen)
      array_obj_ref_136_word_address_calculated <-& (array_obj_ref_136_word_addrgen)
      ;;[array_obj_ref_136_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_136_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_136_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_136_sample_start_ <-& (array_obj_ref_136_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_136_sample_completed_ 0)
      array_obj_ref_136_sample_start_ &-> (array_obj_ref_136_Sample)
      array_obj_ref_136_sample_completed_ <-& (array_obj_ref_136_Sample)
      array_obj_ref_136_sample_completed_ &-> ($null)
      array_obj_ref_136_update_start_ &-> (array_obj_ref_136_Update)
      array_obj_ref_136_update_completed_ <-& (array_obj_ref_136_Update)
      // self-release: 
      array_obj_ref_136_sample_start_ o<-& (array_obj_ref_136_sample_completed_ 1)
      $null &-> (array_obj_ref_136_update_start_)
      array_obj_ref_136_update_start_ o<-& (array_obj_ref_136_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_136 with guard R_read_write_bar_133
      array_obj_ref_136_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_136_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data
      // start: WAR dependencies for t_read_data
      // done: WAR dependencies for t_read_data
      // end:  	$guard (read_write_bar) t_read_data := mem_array[addr]// bits of buffering = 32. 
      // start:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 61
      // Guard expression 
      // read_write_bar
      // Source expression
      // write_data
      // Target expression
      // mem_array[addr]
      $T[array_obj_ref_140_sample_start_] 
      $T[array_obj_ref_140_sample_completed_] 
      $T[array_obj_ref_140_update_start_] 
      $T[array_obj_ref_140_update_completed_] 
      $T[array_obj_ref_140_word_address_calculated] 
      $T[array_obj_ref_140_root_address_calculated] 
      $T[array_obj_ref_140_offset_calculated] 
      $T[array_obj_ref_140_index_resized_0] 
      $T[array_obj_ref_140_index_scaled_0] 
      $T[array_obj_ref_140_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_140_index_computed_0
      array_obj_ref_140_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_140_index_computed_0
      ;;[array_obj_ref_140_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_140_index_computed_0 &-> (array_obj_ref_140_index_resize_0)
      array_obj_ref_140_index_resized_0 <-& (array_obj_ref_140_index_resize_0)
      ;;[array_obj_ref_140_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_140_index_resized_0 &-> (array_obj_ref_140_index_scale_0)
      array_obj_ref_140_index_scaled_0 <-& (array_obj_ref_140_index_scale_0)
      ;;[array_obj_ref_140_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_140_index_scaled_0 &-> (array_obj_ref_140_final_index_sum_regn)
      array_obj_ref_140_offset_calculated <-& (array_obj_ref_140_final_index_sum_regn)
      ;;[array_obj_ref_140_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_140_offset_calculated &-> (array_obj_ref_140_base_plus_offset)
      array_obj_ref_140_root_address_calculated <-& (array_obj_ref_140_base_plus_offset)
      ;;[array_obj_ref_140_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_140_root_address_calculated &-> (array_obj_ref_140_word_addrgen)
      array_obj_ref_140_word_address_calculated <-& (array_obj_ref_140_word_addrgen)
      ;;[array_obj_ref_140_Sample] 
      {
        ;;[array_obj_ref_140_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_140_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_140_sample_start_ <-& (array_obj_ref_140_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_140_sample_completed_ 0)
      array_obj_ref_140_sample_start_ &-> (array_obj_ref_140_Sample)
      array_obj_ref_140_sample_completed_ <-& (array_obj_ref_140_Sample)
      array_obj_ref_140_sample_completed_ &-> ($null)
      array_obj_ref_140_update_start_ &-> (array_obj_ref_140_Update)
      array_obj_ref_140_update_completed_ <-& (array_obj_ref_140_Update)
      // Guard dependency for expression array_obj_ref_140 with guard R_read_write_bar_138
      array_obj_ref_140_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_140_sample_completed_ 0)
      // self-release: 
      array_obj_ref_140_sample_start_ o<-& (array_obj_ref_140_sample_completed_ 1)
      $null &-> (array_obj_ref_140_update_start_)
      array_obj_ref_140_update_start_ o<-& (array_obj_ref_140_update_completed_ 0)
      // start: Forward dependencies from write_data to transition array_obj_ref_140_sample_start_
      array_obj_ref_140_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data to transition array_obj_ref_140_sample_start_
      // RAW reenables for write_data
      write_data_update_enable o<-& (array_obj_ref_140_sample_completed_ 0)
      // end:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 32. 
      // start:  	read_write_bar_144_delayed_4_0 := read_write_bar $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 62
      $T[assign_stmt_145_sample_start_] 
      $T[assign_stmt_145_sample_completed_] 
      $T[assign_stmt_145_update_start_] 
      $T[assign_stmt_145_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_144_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_145_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_145_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_145_sample_start_ &-> (assign_stmt_145_Sample)
      assign_stmt_145_sample_completed_ <-& (assign_stmt_145_Sample)
      assign_stmt_145_sample_completed_ &-> ($null)
      assign_stmt_145_update_start_ &-> (assign_stmt_145_Update)
      assign_stmt_145_update_completed_ <-& (assign_stmt_145_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_145_sample_start_
      assign_stmt_145_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_145_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_145_sample_completed_ 0)
      // self-release: 
      assign_stmt_145_sample_start_ o<-& (assign_stmt_145_sample_completed_ 1)
      $null &-> (assign_stmt_145_update_start_)
      assign_stmt_145_update_start_ o<-& (assign_stmt_145_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_144_delayed_4_0
      // done: WAR dependencies for read_write_bar_144_delayed_4_0
      // end:  	read_write_bar_144_delayed_4_0 := read_write_bar $buffering 4// bits of buffering = 4. 
      // start:  	read_data := ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 63
      // Source expression
      // ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) 
      $T[MUX_150_sample_start_] 
      $T[MUX_150_sample_completed_] 
      $T[MUX_150_update_start_] 
      $T[MUX_150_update_completed_] 
      // read_write_bar_144_delayed_4_0
      // t_read_data
      // start: Forward dependencies from read_write_bar_144_delayed_4_0 to transition MUX_150_sample_start_
      MUX_150_sample_start_ <-& (assign_stmt_145_update_completed_)
      // done: Forward dependencies from read_write_bar_144_delayed_4_0 to transition MUX_150_sample_start_
      // start: Forward dependencies from t_read_data to transition MUX_150_sample_start_
      MUX_150_sample_start_ <-& (array_obj_ref_136_update_completed_)
      // done: Forward dependencies from t_read_data to transition MUX_150_sample_start_
      ;;[MUX_150_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_150_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_150_sample_start_ &-> (MUX_150_start)
      MUX_150_sample_completed_ <-& (MUX_150_start)
      MUX_150_sample_completed_ &-> ($null)
      MUX_150_update_start_ &-> (MUX_150_complete)
      MUX_150_update_completed_ <-& (MUX_150_complete)
      // RAW reenables for read_write_bar_144_delayed_4_0
      assign_stmt_145_update_start_ o<-& (MUX_150_sample_completed_ 0)
      // RAW reenables for t_read_data
      array_obj_ref_136_update_start_ o<-& (MUX_150_sample_completed_ 0)
      // self-release: 
      MUX_150_sample_start_ o<-& (MUX_150_sample_completed_ 1)
      $null &-> (MUX_150_update_start_)
      MUX_150_update_start_ o<-& (MUX_150_update_completed_ 0)
      // Target expression
      // (as target) read_data
      // read_data
      // write to interface object
      // start: WAR dependencies for read_data
      // done: WAR dependencies for read_data
      // read_data
      // write to interface object
      MUX_150_update_start_ <-& (read_data_update_enable)
      // end:  	read_data := ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) // bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_136 load
      //  array_obj_ref_140 store
      $T [array_obj_ref_136_array_obj_ref_140_delay] $delay
      // array_obj_ref_136(load) -> array_obj_ref_140(store)
      array_obj_ref_140_sample_start_ <-& (array_obj_ref_136_array_obj_ref_140_delay)
      array_obj_ref_136_array_obj_ref_140_delay <-& (array_obj_ref_136_sample_completed_)
      // reenable across ring for memory space memory_space_0
      $T[ring_reenable_memory_space_0] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_0 <-& (array_obj_ref_140_sample_completed_)
      array_obj_ref_136_sample_start_ o<-& (ring_reenable_memory_space_0 1)
    }
    ( read_data_update_enable_in)
    ( read_write_bar_update_enable_out addr_update_enable_out write_data_update_enable_out)
    $P [read_write_bar_update_enable] 
    $P [addr_update_enable] 
    $P [write_data_update_enable] 
    $P [read_data_update_enable] 
    $bind read_write_bar_update_enable <= assign_stmt_137_to_assign_stmt_151 : read_write_bar_update_enable_out
    $bind addr_update_enable <= assign_stmt_137_to_assign_stmt_151 : addr_update_enable_out
    $bind write_data_update_enable <= assign_stmt_137_to_assign_stmt_151 : write_data_update_enable_out
    $bind read_data_update_enable => assign_stmt_137_to_assign_stmt_151 : read_data_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMem
    //  file prog.linked.opt.aa, line 55
    // mem_array[addr]
    $constant $W[array_obj_ref_136_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_136_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_136_word_offset_0] : $int<10> := _b0000000000// 0
    // mem_array[addr]
    $constant $W[array_obj_ref_140_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_140_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_140_word_offset_0] : $int<10> := _b0000000000// 0
    // ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) 
    // 0 
    $constant $W[konst_149_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$guard (read_write_bar) t_read_data := mem_array[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 60
    // mem_array[addr]
    $intermediate $W[R_addr_135_resized] : $int<10>
    $intermediate $W[R_addr_135_scaled] : $int<10>
    $intermediate $W[array_obj_ref_136_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_136_root_address] : $int<10>
    $W[array_obj_ref_136_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_136_data_0] : $int<32>
    // t_read_data
    $W[t_read_data_137] : $int<32>
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 61
    // mem_array[addr]
    $intermediate $W[R_addr_139_resized] : $int<10>
    $intermediate $W[R_addr_139_scaled] : $int<10>
    $intermediate $W[array_obj_ref_140_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_140_root_address] : $int<10>
    $W[array_obj_ref_140_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_140_data_0] : $int<32>
    // 	read_write_bar_144_delayed_4_0 := read_write_bar $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 62
    // read_write_bar_144_delayed_4_0
    $W[read_write_bar_144_delayed_4_0_145] : $int<1>
    // 	read_data := ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 63
    // read_data
    // 	$guard (read_write_bar) t_read_data := mem_array[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 60
    // mem_array[addr]
    &/ [array_obj_ref_136_index_0_resize] (addr) (R_addr_135_resized) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_136_index_0_rename] (R_addr_135_resized) (R_addr_135_scaled) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_136_index_offset] (R_addr_135_scaled) (array_obj_ref_136_final_offset) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_136_root_address_inst] (array_obj_ref_136_final_offset) (array_obj_ref_136_root_address) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_136_addr_0] (array_obj_ref_136_root_address) (array_obj_ref_136_word_address_0) $guard ( read_write_bar ) 
    $flowthrough 
    $load [array_obj_ref_136_load_0] $from memory_space_0 (array_obj_ref_136_word_address_0) (array_obj_ref_136_data_0) $guard ( read_write_bar ) 
    $delay array_obj_ref_136_load_0 4
    &/ [array_obj_ref_136_gather_scatter] (array_obj_ref_136_data_0) (t_read_data_137) $guard ( read_write_bar ) 
    $flowthrough 
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 61
    // mem_array[addr]
    &/ [array_obj_ref_140_index_0_resize] (addr) (R_addr_139_resized) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_140_index_0_rename] (R_addr_139_resized) (R_addr_139_scaled) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_140_index_offset] (R_addr_139_scaled) (array_obj_ref_140_final_offset) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_140_root_address_inst] (array_obj_ref_140_final_offset) (array_obj_ref_140_root_address) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_140_addr_0] (array_obj_ref_140_root_address) (array_obj_ref_140_word_address_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    $store [array_obj_ref_140_store_0] $to memory_space_0 (array_obj_ref_140_word_address_0 array_obj_ref_140_data_0) $guard ( ~ read_write_bar ) 
    $delay array_obj_ref_140_store_0 4
    &/ [array_obj_ref_140_gather_scatter] (write_data) (array_obj_ref_140_data_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    // 	read_write_bar_144_delayed_4_0 := read_write_bar $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 62
    # := [W_read_write_bar_144_delayed_4_0_143_inst] (read_write_bar) (read_write_bar_144_delayed_4_0_145)   
    $buffering  $out W_read_write_bar_144_delayed_4_0_143_inst read_write_bar_144_delayed_4_0_145 4
    // 	read_data := ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 63
    // ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) 
    ? [MUX_150_inst] (read_write_bar_144_delayed_4_0_145 t_read_data_137 konst_149_wire_constant) (read_data) 
    $buffering  $out MUX_150_inst read_data 1
  }
  // end data-path
  // 	$guard (read_write_bar) t_read_data := mem_array[addr]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 60
  // mem_array[addr]
  // addr
  array_obj_ref_136_index_0_resize <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_index_resize_0/index_resize_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_index_resize_0/index_resize_ack)
  array_obj_ref_136_index_0_rename <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_index_scale_0/scale_rename_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_index_scale_0/scale_rename_ack)
  array_obj_ref_136_index_offset <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_final_index_sum_regn/req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_final_index_sum_regn/ack)
  array_obj_ref_136_root_address_inst <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_base_plus_offset/sum_rename_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_base_plus_offset/sum_rename_ack)
  array_obj_ref_136_addr_0 <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_word_addrgen/root_register_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_word_addrgen/root_register_ack)
  array_obj_ref_136_gather_scatter <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Update/array_obj_ref_136_Merge/merge_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Update/array_obj_ref_136_Merge/merge_ack)
  array_obj_ref_136_load_0 <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Sample/word_access_start/word_0/rr assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Update/word_access_complete/word_0/cr) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Sample/word_access_start/word_0/ra assign_stmt_137_to_assign_stmt_151/array_obj_ref_136_Update/word_access_complete/word_0/ca)
  // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 61
  // write_data
  // addr
  array_obj_ref_140_index_0_resize <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_index_resize_0/index_resize_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_index_resize_0/index_resize_ack)
  array_obj_ref_140_index_0_rename <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_index_scale_0/scale_rename_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_index_scale_0/scale_rename_ack)
  array_obj_ref_140_index_offset <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_final_index_sum_regn/req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_final_index_sum_regn/ack)
  array_obj_ref_140_root_address_inst <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_base_plus_offset/sum_rename_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_base_plus_offset/sum_rename_ack)
  array_obj_ref_140_addr_0 <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_word_addrgen/root_register_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_word_addrgen/root_register_ack)
  array_obj_ref_140_gather_scatter <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Sample/array_obj_ref_140_Split/split_req) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Sample/array_obj_ref_140_Split/split_ack)
  array_obj_ref_140_store_0 <=> (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Sample/word_access_start/word_0/rr assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Update/word_access_complete/word_0/cr) (assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Sample/word_access_start/word_0/ra assign_stmt_137_to_assign_stmt_151/array_obj_ref_140_Update/word_access_complete/word_0/ca)
  // 	read_write_bar_144_delayed_4_0 := read_write_bar $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 62
  // read_write_bar
  W_read_write_bar_144_delayed_4_0_143_inst <=> (assign_stmt_137_to_assign_stmt_151/assign_stmt_145_Sample/req assign_stmt_137_to_assign_stmt_151/assign_stmt_145_Update/req) (assign_stmt_137_to_assign_stmt_151/assign_stmt_145_Sample/ack assign_stmt_137_to_assign_stmt_151/assign_stmt_145_Update/ack)
  // 	read_data := ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 63
  // read_write_bar_144_delayed_4_0
  // t_read_data
  // ( $mux read_write_bar_144_delayed_4_0 t_read_data  0  ) 
  MUX_150_inst <=> (assign_stmt_137_to_assign_stmt_151/MUX_150_start/req assign_stmt_137_to_assign_stmt_151/MUX_150_complete/req) (assign_stmt_137_to_assign_stmt_151/MUX_150_start/ack assign_stmt_137_to_assign_stmt_151/MUX_150_complete/ack)
  $attribute delay => "7"
}
$pipeline $depth 7 $buffering 1 $module [accessReg] 
{
  $in valid_1:$int<1>
  // can point into 
  addr_1:$int<8>
  // can point into 
  valid_2:$int<1>
  // can point into 
  addr_2:$int<8>
  // can point into 
  valid_w:$int<1>
  // can point into 
  addr_w:$int<8>
  // can point into 
  data_to_be_written:$int<32>
  // can point into 
  $out read_data_1:$int<32>
  // can point into 
  read_data_2:$int<32>
  // can point into 
  // pipe-declarations for block %accessReg
  //  file prog.linked.opt.aa, line 66
  // memory-space 1 is written into.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_167_to_assign_stmt_195] 
    {
      $T [valid_1_update_enable] 
      $T [valid_1_update_enable_out] 
      valid_1_update_enable &-> (valid_1_update_enable_out)
      $null &-> (valid_1_update_enable)
      $T [addr_1_update_enable] 
      $T [addr_1_update_enable_out] 
      addr_1_update_enable &-> (addr_1_update_enable_out)
      $null &-> (addr_1_update_enable)
      $T [valid_2_update_enable] 
      $T [valid_2_update_enable_out] 
      valid_2_update_enable &-> (valid_2_update_enable_out)
      $null &-> (valid_2_update_enable)
      $T [addr_2_update_enable] 
      $T [addr_2_update_enable_out] 
      addr_2_update_enable &-> (addr_2_update_enable_out)
      $null &-> (addr_2_update_enable)
      $T [valid_w_update_enable] 
      $T [valid_w_update_enable_out] 
      valid_w_update_enable &-> (valid_w_update_enable_out)
      $null &-> (valid_w_update_enable)
      $T [addr_w_update_enable] 
      $T [addr_w_update_enable_out] 
      addr_w_update_enable &-> (addr_w_update_enable_out)
      $null &-> (addr_w_update_enable)
      $T [data_to_be_written_update_enable] 
      $T [data_to_be_written_update_enable_out] 
      data_to_be_written_update_enable &-> (data_to_be_written_update_enable_out)
      $null &-> (data_to_be_written_update_enable)
      $T [read_data_1_update_enable] 
      $T [read_data_1_update_enable_in] 
      $null &-> (read_data_1_update_enable)
      $null <-& (read_data_1_update_enable_in) 
      $null &-> (read_data_1_update_enable)
      read_data_1_update_enable <-& (read_data_1_update_enable_in) 
      $T [read_data_2_update_enable] 
      $T [read_data_2_update_enable_in] 
      $null &-> (read_data_2_update_enable)
      $null <-& (read_data_2_update_enable_in) 
      $null &-> (read_data_2_update_enable)
      read_data_2_update_enable <-& (read_data_2_update_enable_in) 
      // start:  	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 71
      // Guard expression 
      // valid_1
      // Source expression
      // reg_array[addr_1]
      $T[array_obj_ref_166_base_address_calculated] 
      $T[array_obj_ref_166_sample_start_] 
      $T[array_obj_ref_166_sample_completed_] 
      $T[array_obj_ref_166_update_start_] 
      $T[array_obj_ref_166_update_completed_] 
      $T[array_obj_ref_166_word_address_calculated] 
      $T[array_obj_ref_166_root_address_calculated] 
      $T[array_obj_ref_166_offset_calculated] 
      $T[array_obj_ref_166_index_resized_0] 
      $T[array_obj_ref_166_index_scaled_0] 
      $T[array_obj_ref_166_index_computed_0] 
      // addr_1
      // start: Forward dependencies from addr_1 to transition array_obj_ref_166_index_computed_0
      array_obj_ref_166_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_1 to transition array_obj_ref_166_index_computed_0
      ;;[array_obj_ref_166_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_166_index_computed_0 &-> (array_obj_ref_166_index_resize_0)
      array_obj_ref_166_index_resized_0 <-& (array_obj_ref_166_index_resize_0)
      ;;[array_obj_ref_166_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_166_index_resized_0 &-> (array_obj_ref_166_index_scale_0)
      array_obj_ref_166_index_scaled_0 <-& (array_obj_ref_166_index_scale_0)
      ;;[array_obj_ref_166_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_166_index_scaled_0 &-> (array_obj_ref_166_final_index_sum_regn)
      array_obj_ref_166_offset_calculated <-& (array_obj_ref_166_final_index_sum_regn)
      ;;[array_obj_ref_166_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_166_offset_calculated &-> (array_obj_ref_166_base_plus_offset)
      array_obj_ref_166_root_address_calculated <-& (array_obj_ref_166_base_plus_offset)
      ;;[array_obj_ref_166_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_166_root_address_calculated &-> (array_obj_ref_166_word_addrgen)
      array_obj_ref_166_word_address_calculated <-& (array_obj_ref_166_word_addrgen)
      ;;[array_obj_ref_166_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_166_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_166_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_166_sample_start_ <-& (array_obj_ref_166_word_address_calculated)
      // reenable-joins
      addr_1_update_enable o<-& (array_obj_ref_166_sample_completed_ 0)
      array_obj_ref_166_sample_start_ &-> (array_obj_ref_166_Sample)
      array_obj_ref_166_sample_completed_ <-& (array_obj_ref_166_Sample)
      array_obj_ref_166_sample_completed_ &-> ($null)
      array_obj_ref_166_update_start_ &-> (array_obj_ref_166_Update)
      array_obj_ref_166_update_completed_ <-& (array_obj_ref_166_Update)
      // self-release: 
      array_obj_ref_166_sample_start_ o<-& (array_obj_ref_166_sample_completed_ 1)
      $null &-> (array_obj_ref_166_update_start_)
      array_obj_ref_166_update_start_ o<-& (array_obj_ref_166_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_166 with guard R_valid_1_163
      array_obj_ref_166_sample_start_ <-& ($entry)
      // RAW reenables for valid_1
      valid_1_update_enable o<-& (array_obj_ref_166_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data_1
      // start: WAR dependencies for t_read_data_1
      // done: WAR dependencies for t_read_data_1
      // end:  	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
      // start:  	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 72
      // Guard expression 
      // valid_2
      // Source expression
      // reg_array[addr_2]
      $T[array_obj_ref_171_base_address_calculated] 
      $T[array_obj_ref_171_sample_start_] 
      $T[array_obj_ref_171_sample_completed_] 
      $T[array_obj_ref_171_update_start_] 
      $T[array_obj_ref_171_update_completed_] 
      $T[array_obj_ref_171_word_address_calculated] 
      $T[array_obj_ref_171_root_address_calculated] 
      $T[array_obj_ref_171_offset_calculated] 
      $T[array_obj_ref_171_index_resized_0] 
      $T[array_obj_ref_171_index_scaled_0] 
      $T[array_obj_ref_171_index_computed_0] 
      // addr_2
      // start: Forward dependencies from addr_2 to transition array_obj_ref_171_index_computed_0
      array_obj_ref_171_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_2 to transition array_obj_ref_171_index_computed_0
      ;;[array_obj_ref_171_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_171_index_computed_0 &-> (array_obj_ref_171_index_resize_0)
      array_obj_ref_171_index_resized_0 <-& (array_obj_ref_171_index_resize_0)
      ;;[array_obj_ref_171_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_171_index_resized_0 &-> (array_obj_ref_171_index_scale_0)
      array_obj_ref_171_index_scaled_0 <-& (array_obj_ref_171_index_scale_0)
      ;;[array_obj_ref_171_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_171_index_scaled_0 &-> (array_obj_ref_171_final_index_sum_regn)
      array_obj_ref_171_offset_calculated <-& (array_obj_ref_171_final_index_sum_regn)
      ;;[array_obj_ref_171_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_171_offset_calculated &-> (array_obj_ref_171_base_plus_offset)
      array_obj_ref_171_root_address_calculated <-& (array_obj_ref_171_base_plus_offset)
      ;;[array_obj_ref_171_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_171_root_address_calculated &-> (array_obj_ref_171_word_addrgen)
      array_obj_ref_171_word_address_calculated <-& (array_obj_ref_171_word_addrgen)
      ;;[array_obj_ref_171_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_171_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_171_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_171_sample_start_ <-& (array_obj_ref_171_word_address_calculated)
      // reenable-joins
      addr_2_update_enable o<-& (array_obj_ref_171_sample_completed_ 0)
      array_obj_ref_171_sample_start_ &-> (array_obj_ref_171_Sample)
      array_obj_ref_171_sample_completed_ <-& (array_obj_ref_171_Sample)
      array_obj_ref_171_sample_completed_ &-> ($null)
      array_obj_ref_171_update_start_ &-> (array_obj_ref_171_Update)
      array_obj_ref_171_update_completed_ <-& (array_obj_ref_171_Update)
      // self-release: 
      array_obj_ref_171_sample_start_ o<-& (array_obj_ref_171_sample_completed_ 1)
      $null &-> (array_obj_ref_171_update_start_)
      array_obj_ref_171_update_start_ o<-& (array_obj_ref_171_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_171 with guard R_valid_2_168
      array_obj_ref_171_sample_start_ <-& ($entry)
      // RAW reenables for valid_2
      valid_2_update_enable o<-& (array_obj_ref_171_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data_2
      // start: WAR dependencies for t_read_data_2
      // done: WAR dependencies for t_read_data_2
      // end:  	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
      // start:  	valid_1_171_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 73
      $T[assign_stmt_175_sample_start_] 
      $T[assign_stmt_175_sample_completed_] 
      $T[assign_stmt_175_update_start_] 
      $T[assign_stmt_175_update_completed_] 
      // Source expression
      // valid_1
      // Target expression
      // (as target) valid_1_171_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_175_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_175_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_175_sample_start_ &-> (assign_stmt_175_Sample)
      assign_stmt_175_sample_completed_ <-& (assign_stmt_175_Sample)
      assign_stmt_175_sample_completed_ &-> ($null)
      assign_stmt_175_update_start_ &-> (assign_stmt_175_Update)
      assign_stmt_175_update_completed_ <-& (assign_stmt_175_Update)
      // start: Forward dependencies from valid_1 to transition assign_stmt_175_sample_start_
      assign_stmt_175_sample_start_ <-& ($entry)
      // done: Forward dependencies from valid_1 to transition assign_stmt_175_sample_start_
      // RAW reenables for valid_1
      valid_1_update_enable o<-& (assign_stmt_175_sample_completed_ 0)
      // self-release: 
      assign_stmt_175_sample_start_ o<-& (assign_stmt_175_sample_completed_ 1)
      $null &-> (assign_stmt_175_update_start_)
      assign_stmt_175_update_start_ o<-& (assign_stmt_175_update_completed_ 0)
      // start: WAR dependencies for valid_1_171_delayed_4_0
      // done: WAR dependencies for valid_1_171_delayed_4_0
      // end:  	valid_1_171_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
      // start:  	read_data_1 := ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 74
      // Source expression
      // ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) 
      $T[MUX_180_sample_start_] 
      $T[MUX_180_sample_completed_] 
      $T[MUX_180_update_start_] 
      $T[MUX_180_update_completed_] 
      // valid_1_171_delayed_4_0
      // t_read_data_1
      // start: Forward dependencies from valid_1_171_delayed_4_0 to transition MUX_180_sample_start_
      MUX_180_sample_start_ <-& (assign_stmt_175_update_completed_)
      // done: Forward dependencies from valid_1_171_delayed_4_0 to transition MUX_180_sample_start_
      // start: Forward dependencies from t_read_data_1 to transition MUX_180_sample_start_
      MUX_180_sample_start_ <-& (array_obj_ref_166_update_completed_)
      // done: Forward dependencies from t_read_data_1 to transition MUX_180_sample_start_
      ;;[MUX_180_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_180_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_180_sample_start_ &-> (MUX_180_start)
      MUX_180_sample_completed_ <-& (MUX_180_start)
      MUX_180_sample_completed_ &-> ($null)
      MUX_180_update_start_ &-> (MUX_180_complete)
      MUX_180_update_completed_ <-& (MUX_180_complete)
      // RAW reenables for valid_1_171_delayed_4_0
      assign_stmt_175_update_start_ o<-& (MUX_180_sample_completed_ 0)
      // RAW reenables for t_read_data_1
      array_obj_ref_166_update_start_ o<-& (MUX_180_sample_completed_ 0)
      // self-release: 
      MUX_180_sample_start_ o<-& (MUX_180_sample_completed_ 1)
      $null &-> (MUX_180_update_start_)
      MUX_180_update_start_ o<-& (MUX_180_update_completed_ 0)
      // Target expression
      // (as target) read_data_1
      // read_data_1
      // write to interface object
      // start: WAR dependencies for read_data_1
      // done: WAR dependencies for read_data_1
      // read_data_1
      // write to interface object
      MUX_180_update_start_ <-& (read_data_1_update_enable)
      // end:  	read_data_1 := ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
      // start:  	valid_2_177_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 75
      $T[assign_stmt_184_sample_start_] 
      $T[assign_stmt_184_sample_completed_] 
      $T[assign_stmt_184_update_start_] 
      $T[assign_stmt_184_update_completed_] 
      // Source expression
      // valid_2
      // Target expression
      // (as target) valid_2_177_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_184_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_184_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_184_sample_start_ &-> (assign_stmt_184_Sample)
      assign_stmt_184_sample_completed_ <-& (assign_stmt_184_Sample)
      assign_stmt_184_sample_completed_ &-> ($null)
      assign_stmt_184_update_start_ &-> (assign_stmt_184_Update)
      assign_stmt_184_update_completed_ <-& (assign_stmt_184_Update)
      // start: Forward dependencies from valid_2 to transition assign_stmt_184_sample_start_
      assign_stmt_184_sample_start_ <-& ($entry)
      // done: Forward dependencies from valid_2 to transition assign_stmt_184_sample_start_
      // RAW reenables for valid_2
      valid_2_update_enable o<-& (assign_stmt_184_sample_completed_ 0)
      // self-release: 
      assign_stmt_184_sample_start_ o<-& (assign_stmt_184_sample_completed_ 1)
      $null &-> (assign_stmt_184_update_start_)
      assign_stmt_184_update_start_ o<-& (assign_stmt_184_update_completed_ 0)
      // start: WAR dependencies for valid_2_177_delayed_4_0
      // done: WAR dependencies for valid_2_177_delayed_4_0
      // end:  	valid_2_177_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
      // start:  	read_data_2 := ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 76
      // Source expression
      // ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) 
      $T[MUX_189_sample_start_] 
      $T[MUX_189_sample_completed_] 
      $T[MUX_189_update_start_] 
      $T[MUX_189_update_completed_] 
      // valid_2_177_delayed_4_0
      // t_read_data_2
      // start: Forward dependencies from valid_2_177_delayed_4_0 to transition MUX_189_sample_start_
      MUX_189_sample_start_ <-& (assign_stmt_184_update_completed_)
      // done: Forward dependencies from valid_2_177_delayed_4_0 to transition MUX_189_sample_start_
      // start: Forward dependencies from t_read_data_2 to transition MUX_189_sample_start_
      MUX_189_sample_start_ <-& (array_obj_ref_171_update_completed_)
      // done: Forward dependencies from t_read_data_2 to transition MUX_189_sample_start_
      ;;[MUX_189_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_189_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_189_sample_start_ &-> (MUX_189_start)
      MUX_189_sample_completed_ <-& (MUX_189_start)
      MUX_189_sample_completed_ &-> ($null)
      MUX_189_update_start_ &-> (MUX_189_complete)
      MUX_189_update_completed_ <-& (MUX_189_complete)
      // RAW reenables for valid_2_177_delayed_4_0
      assign_stmt_184_update_start_ o<-& (MUX_189_sample_completed_ 0)
      // RAW reenables for t_read_data_2
      array_obj_ref_171_update_start_ o<-& (MUX_189_sample_completed_ 0)
      // self-release: 
      MUX_189_sample_start_ o<-& (MUX_189_sample_completed_ 1)
      $null &-> (MUX_189_update_start_)
      MUX_189_update_start_ o<-& (MUX_189_update_completed_ 0)
      // Target expression
      // (as target) read_data_2
      // read_data_2
      // write to interface object
      // start: WAR dependencies for read_data_2
      // done: WAR dependencies for read_data_2
      // read_data_2
      // write to interface object
      MUX_189_update_start_ <-& (read_data_2_update_enable)
      // end:  	read_data_2 := ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
      // start:  	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 77
      // Guard expression 
      // valid_w
      // Source expression
      // data_to_be_written
      // Target expression
      // reg_array[addr_w]
      $T[array_obj_ref_193_sample_start_] 
      $T[array_obj_ref_193_sample_completed_] 
      $T[array_obj_ref_193_update_start_] 
      $T[array_obj_ref_193_update_completed_] 
      $T[array_obj_ref_193_word_address_calculated] 
      $T[array_obj_ref_193_root_address_calculated] 
      $T[array_obj_ref_193_offset_calculated] 
      $T[array_obj_ref_193_index_resized_0] 
      $T[array_obj_ref_193_index_scaled_0] 
      $T[array_obj_ref_193_index_computed_0] 
      // addr_w
      // start: Forward dependencies from addr_w to transition array_obj_ref_193_index_computed_0
      array_obj_ref_193_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_w to transition array_obj_ref_193_index_computed_0
      ;;[array_obj_ref_193_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_193_index_computed_0 &-> (array_obj_ref_193_index_resize_0)
      array_obj_ref_193_index_resized_0 <-& (array_obj_ref_193_index_resize_0)
      ;;[array_obj_ref_193_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_193_index_resized_0 &-> (array_obj_ref_193_index_scale_0)
      array_obj_ref_193_index_scaled_0 <-& (array_obj_ref_193_index_scale_0)
      ;;[array_obj_ref_193_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_193_index_scaled_0 &-> (array_obj_ref_193_final_index_sum_regn)
      array_obj_ref_193_offset_calculated <-& (array_obj_ref_193_final_index_sum_regn)
      ;;[array_obj_ref_193_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_193_offset_calculated &-> (array_obj_ref_193_base_plus_offset)
      array_obj_ref_193_root_address_calculated <-& (array_obj_ref_193_base_plus_offset)
      ;;[array_obj_ref_193_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_193_root_address_calculated &-> (array_obj_ref_193_word_addrgen)
      array_obj_ref_193_word_address_calculated <-& (array_obj_ref_193_word_addrgen)
      ;;[array_obj_ref_193_Sample] 
      {
        ;;[array_obj_ref_193_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_193_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_193_word_address_calculated)
      // reenable-joins
      addr_w_update_enable o<-& (array_obj_ref_193_sample_completed_ 0)
      array_obj_ref_193_sample_start_ &-> (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ <-& (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ &-> ($null)
      array_obj_ref_193_update_start_ &-> (array_obj_ref_193_Update)
      array_obj_ref_193_update_completed_ <-& (array_obj_ref_193_Update)
      // Guard dependency for expression array_obj_ref_193 with guard R_valid_w_191
      array_obj_ref_193_sample_start_ <-& ($entry)
      // RAW reenables for valid_w
      valid_w_update_enable o<-& (array_obj_ref_193_sample_completed_ 0)
      // self-release: 
      array_obj_ref_193_sample_start_ o<-& (array_obj_ref_193_sample_completed_ 1)
      $null &-> (array_obj_ref_193_update_start_)
      array_obj_ref_193_update_start_ o<-& (array_obj_ref_193_update_completed_ 0)
      // start: Forward dependencies from data_to_be_written to transition array_obj_ref_193_sample_start_
      array_obj_ref_193_sample_start_ <-& ($entry)
      // done: Forward dependencies from data_to_be_written to transition array_obj_ref_193_sample_start_
      // RAW reenables for data_to_be_written
      data_to_be_written_update_enable o<-& (array_obj_ref_193_sample_completed_ 0)
      // end:  	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  array_obj_ref_166 load
      //  array_obj_ref_171 load
      //  array_obj_ref_193 store
      $T [array_obj_ref_166_array_obj_ref_193_delay] $delay
      // array_obj_ref_166(load) -> array_obj_ref_193(store)
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_166_array_obj_ref_193_delay)
      array_obj_ref_166_array_obj_ref_193_delay <-& (array_obj_ref_166_sample_completed_)
      $T [array_obj_ref_171_array_obj_ref_193_delay] $delay
      // array_obj_ref_171(load) -> array_obj_ref_193(store)
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_171_array_obj_ref_193_delay)
      array_obj_ref_171_array_obj_ref_193_delay <-& (array_obj_ref_171_sample_completed_)
      // reenable across ring for memory space memory_space_1
      $T[ring_reenable_memory_space_1] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_1 <-& (array_obj_ref_193_sample_completed_)
      array_obj_ref_166_sample_start_ o<-& (ring_reenable_memory_space_1 1)
      array_obj_ref_171_sample_start_ o<-& (ring_reenable_memory_space_1 1)
    }
    ( read_data_1_update_enable_in read_data_2_update_enable_in)
    ( valid_1_update_enable_out addr_1_update_enable_out valid_2_update_enable_out addr_2_update_enable_out valid_w_update_enable_out addr_w_update_enable_out data_to_be_written_update_enable_out)
    $P [valid_1_update_enable] 
    $P [addr_1_update_enable] 
    $P [valid_2_update_enable] 
    $P [addr_2_update_enable] 
    $P [valid_w_update_enable] 
    $P [addr_w_update_enable] 
    $P [data_to_be_written_update_enable] 
    $P [read_data_1_update_enable] 
    $P [read_data_2_update_enable] 
    $bind valid_1_update_enable <= assign_stmt_167_to_assign_stmt_195 : valid_1_update_enable_out
    $bind addr_1_update_enable <= assign_stmt_167_to_assign_stmt_195 : addr_1_update_enable_out
    $bind valid_2_update_enable <= assign_stmt_167_to_assign_stmt_195 : valid_2_update_enable_out
    $bind addr_2_update_enable <= assign_stmt_167_to_assign_stmt_195 : addr_2_update_enable_out
    $bind valid_w_update_enable <= assign_stmt_167_to_assign_stmt_195 : valid_w_update_enable_out
    $bind addr_w_update_enable <= assign_stmt_167_to_assign_stmt_195 : addr_w_update_enable_out
    $bind data_to_be_written_update_enable <= assign_stmt_167_to_assign_stmt_195 : data_to_be_written_update_enable_out
    $bind read_data_1_update_enable => assign_stmt_167_to_assign_stmt_195 : read_data_1_update_enable_in
    $bind read_data_2_update_enable => assign_stmt_167_to_assign_stmt_195 : read_data_2_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessReg
    //  file prog.linked.opt.aa, line 66
    // reg_array[addr_1]
    $constant $W[array_obj_ref_166_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_166_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_166_word_offset_0] : $int<6> := _b000000// 0
    // reg_array[addr_2]
    $constant $W[array_obj_ref_171_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_171_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_171_word_offset_0] : $int<6> := _b000000// 0
    // ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) 
    // 0 
    $constant $W[konst_179_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) 
    // 0 
    $constant $W[konst_188_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // reg_array[addr_w]
    $constant $W[array_obj_ref_193_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_193_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_193_word_offset_0] : $int<6> := _b000000// 0
    // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 71
    // reg_array[addr_1]
    $intermediate $W[R_addr_1_165_resized] : $int<6>
    $intermediate $W[R_addr_1_165_scaled] : $int<6>
    $intermediate $W[array_obj_ref_166_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_166_root_address] : $int<6>
    $W[array_obj_ref_166_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_166_data_0] : $int<32>
    // t_read_data_1
    $W[t_read_data_1_167] : $int<32>
    // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 72
    // reg_array[addr_2]
    $intermediate $W[R_addr_2_170_resized] : $int<6>
    $intermediate $W[R_addr_2_170_scaled] : $int<6>
    $intermediate $W[array_obj_ref_171_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_171_root_address] : $int<6>
    $W[array_obj_ref_171_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_171_data_0] : $int<32>
    // t_read_data_2
    $W[t_read_data_2_172] : $int<32>
    // 	valid_1_171_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 73
    // valid_1_171_delayed_4_0
    $W[valid_1_171_delayed_4_0_175] : $int<1>
    // 	read_data_1 := ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 74
    // read_data_1
    // 	valid_2_177_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 75
    // valid_2_177_delayed_4_0
    $W[valid_2_177_delayed_4_0_184] : $int<1>
    // 	read_data_2 := ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 76
    // read_data_2
    // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // reg_array[addr_w]
    $intermediate $W[R_addr_w_192_resized] : $int<6>
    $intermediate $W[R_addr_w_192_scaled] : $int<6>
    $intermediate $W[array_obj_ref_193_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_193_root_address] : $int<6>
    $W[array_obj_ref_193_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_193_data_0] : $int<32>
    // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 71
    // reg_array[addr_1]
    &/ [array_obj_ref_166_index_0_resize] (addr_1) (R_addr_1_165_resized) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_166_index_0_rename] (R_addr_1_165_resized) (R_addr_1_165_scaled) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_166_index_offset] (R_addr_1_165_scaled) (array_obj_ref_166_final_offset) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_166_root_address_inst] (array_obj_ref_166_final_offset) (array_obj_ref_166_root_address) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_166_addr_0] (array_obj_ref_166_root_address) (array_obj_ref_166_word_address_0) $guard ( valid_1 ) 
    $flowthrough 
    $load [array_obj_ref_166_load_0] $from memory_space_1 (array_obj_ref_166_word_address_0) (array_obj_ref_166_data_0) $guard ( valid_1 ) 
    $delay array_obj_ref_166_load_0 4
    &/ [array_obj_ref_166_gather_scatter] (array_obj_ref_166_data_0) (t_read_data_1_167) $guard ( valid_1 ) 
    $flowthrough 
    // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 72
    // reg_array[addr_2]
    &/ [array_obj_ref_171_index_0_resize] (addr_2) (R_addr_2_170_resized) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_171_index_0_rename] (R_addr_2_170_resized) (R_addr_2_170_scaled) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_171_index_offset] (R_addr_2_170_scaled) (array_obj_ref_171_final_offset) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_171_root_address_inst] (array_obj_ref_171_final_offset) (array_obj_ref_171_root_address) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_171_addr_0] (array_obj_ref_171_root_address) (array_obj_ref_171_word_address_0) $guard ( valid_2 ) 
    $flowthrough 
    $load [array_obj_ref_171_load_0] $from memory_space_1 (array_obj_ref_171_word_address_0) (array_obj_ref_171_data_0) $guard ( valid_2 ) 
    $delay array_obj_ref_171_load_0 4
    &/ [array_obj_ref_171_gather_scatter] (array_obj_ref_171_data_0) (t_read_data_2_172) $guard ( valid_2 ) 
    $flowthrough 
    // 	valid_1_171_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 73
    # := [W_valid_1_171_delayed_4_0_173_inst] (valid_1) (valid_1_171_delayed_4_0_175)   
    $buffering  $out W_valid_1_171_delayed_4_0_173_inst valid_1_171_delayed_4_0_175 4
    // 	read_data_1 := ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 74
    // ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) 
    ? [MUX_180_inst] (valid_1_171_delayed_4_0_175 t_read_data_1_167 konst_179_wire_constant) (read_data_1) 
    $buffering  $out MUX_180_inst read_data_1 1
    // 	valid_2_177_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 75
    # := [W_valid_2_177_delayed_4_0_182_inst] (valid_2) (valid_2_177_delayed_4_0_184)   
    $buffering  $out W_valid_2_177_delayed_4_0_182_inst valid_2_177_delayed_4_0_184 4
    // 	read_data_2 := ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 76
    // ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) 
    ? [MUX_189_inst] (valid_2_177_delayed_4_0_184 t_read_data_2_172 konst_188_wire_constant) (read_data_2) 
    $buffering  $out MUX_189_inst read_data_2 1
    // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // reg_array[addr_w]
    &/ [array_obj_ref_193_index_0_resize] (addr_w) (R_addr_w_192_resized) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_193_index_0_rename] (R_addr_w_192_resized) (R_addr_w_192_scaled) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_193_index_offset] (R_addr_w_192_scaled) (array_obj_ref_193_final_offset) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_193_root_address_inst] (array_obj_ref_193_final_offset) (array_obj_ref_193_root_address) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_193_addr_0] (array_obj_ref_193_root_address) (array_obj_ref_193_word_address_0) $guard ( valid_w ) 
    $flowthrough 
    $store [array_obj_ref_193_store_0] $to memory_space_1 (array_obj_ref_193_word_address_0 array_obj_ref_193_data_0) $guard ( valid_w ) 
    $delay array_obj_ref_193_store_0 4
    &/ [array_obj_ref_193_gather_scatter] (data_to_be_written) (array_obj_ref_193_data_0) $guard ( valid_w ) 
    $flowthrough 
  }
  // end data-path
  // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 71
  // reg_array[addr_1]
  // addr_1
  array_obj_ref_166_index_0_resize <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_index_resize_0/index_resize_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_index_resize_0/index_resize_ack)
  array_obj_ref_166_index_0_rename <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_index_scale_0/scale_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_index_scale_0/scale_rename_ack)
  array_obj_ref_166_index_offset <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_final_index_sum_regn/req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_final_index_sum_regn/ack)
  array_obj_ref_166_root_address_inst <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_base_plus_offset/sum_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_base_plus_offset/sum_rename_ack)
  array_obj_ref_166_addr_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_word_addrgen/root_register_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_word_addrgen/root_register_ack)
  array_obj_ref_166_gather_scatter <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Update/array_obj_ref_166_Merge/merge_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Update/array_obj_ref_166_Merge/merge_ack)
  array_obj_ref_166_load_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Sample/word_access_start/word_0/rr assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Update/word_access_complete/word_0/cr) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Sample/word_access_start/word_0/ra assign_stmt_167_to_assign_stmt_195/array_obj_ref_166_Update/word_access_complete/word_0/ca)
  // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 72
  // reg_array[addr_2]
  // addr_2
  array_obj_ref_171_index_0_resize <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_index_resize_0/index_resize_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_index_resize_0/index_resize_ack)
  array_obj_ref_171_index_0_rename <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_index_scale_0/scale_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_index_scale_0/scale_rename_ack)
  array_obj_ref_171_index_offset <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_final_index_sum_regn/req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_final_index_sum_regn/ack)
  array_obj_ref_171_root_address_inst <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_base_plus_offset/sum_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_base_plus_offset/sum_rename_ack)
  array_obj_ref_171_addr_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_word_addrgen/root_register_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_word_addrgen/root_register_ack)
  array_obj_ref_171_gather_scatter <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Update/array_obj_ref_171_Merge/merge_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Update/array_obj_ref_171_Merge/merge_ack)
  array_obj_ref_171_load_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Sample/word_access_start/word_0/rr assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Update/word_access_complete/word_0/cr) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Sample/word_access_start/word_0/ra assign_stmt_167_to_assign_stmt_195/array_obj_ref_171_Update/word_access_complete/word_0/ca)
  // 	valid_1_171_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 73
  // valid_1
  W_valid_1_171_delayed_4_0_173_inst <=> (assign_stmt_167_to_assign_stmt_195/assign_stmt_175_Sample/req assign_stmt_167_to_assign_stmt_195/assign_stmt_175_Update/req) (assign_stmt_167_to_assign_stmt_195/assign_stmt_175_Sample/ack assign_stmt_167_to_assign_stmt_195/assign_stmt_175_Update/ack)
  // 	read_data_1 := ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 74
  // valid_1_171_delayed_4_0
  // t_read_data_1
  // ( $mux valid_1_171_delayed_4_0 t_read_data_1  0  ) 
  MUX_180_inst <=> (assign_stmt_167_to_assign_stmt_195/MUX_180_start/req assign_stmt_167_to_assign_stmt_195/MUX_180_complete/req) (assign_stmt_167_to_assign_stmt_195/MUX_180_start/ack assign_stmt_167_to_assign_stmt_195/MUX_180_complete/ack)
  // 	valid_2_177_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 75
  // valid_2
  W_valid_2_177_delayed_4_0_182_inst <=> (assign_stmt_167_to_assign_stmt_195/assign_stmt_184_Sample/req assign_stmt_167_to_assign_stmt_195/assign_stmt_184_Update/req) (assign_stmt_167_to_assign_stmt_195/assign_stmt_184_Sample/ack assign_stmt_167_to_assign_stmt_195/assign_stmt_184_Update/ack)
  // 	read_data_2 := ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 76
  // valid_2_177_delayed_4_0
  // t_read_data_2
  // ( $mux valid_2_177_delayed_4_0 t_read_data_2  0  ) 
  MUX_189_inst <=> (assign_stmt_167_to_assign_stmt_195/MUX_189_start/req assign_stmt_167_to_assign_stmt_195/MUX_189_complete/req) (assign_stmt_167_to_assign_stmt_195/MUX_189_start/ack assign_stmt_167_to_assign_stmt_195/MUX_189_complete/ack)
  // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 77
  // data_to_be_written
  // addr_w
  array_obj_ref_193_index_0_resize <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_ack)
  array_obj_ref_193_index_0_rename <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_ack)
  array_obj_ref_193_index_offset <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/ack)
  array_obj_ref_193_root_address_inst <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_ack)
  array_obj_ref_193_addr_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_ack)
  array_obj_ref_193_gather_scatter <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_req) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_ack)
  array_obj_ref_193_store_0 <=> (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/rr assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/cr) (assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/ra assign_stmt_167_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/ca)
  $attribute delay => "7"
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 80
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 80
  }
  // end data-path
}
$pipeline $depth 7 $buffering 1 $module [iExecStage] 
{
  $in iexec_state:$int<106>
  // can point into 
  iexec_rd1_final:$int<32>
  // can point into 
  iexec_rd2_final:$int<32>
  // can point into 
  $out next_dcache_state:$int<139>
  // can point into 
  // pipe-declarations for block %iExecStage
  //  file prog.linked.opt.aa, line 87
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_208_to_assign_stmt_476] 
    {
      $T [iexec_state_update_enable] 
      $T [iexec_state_update_enable_out] 
      iexec_state_update_enable &-> (iexec_state_update_enable_out)
      $null &-> (iexec_state_update_enable)
      $T [iexec_rd1_final_update_enable] 
      $T [iexec_rd1_final_update_enable_out] 
      iexec_rd1_final_update_enable &-> (iexec_rd1_final_update_enable_out)
      $null &-> (iexec_rd1_final_update_enable)
      $T [iexec_rd2_final_update_enable] 
      $T [iexec_rd2_final_update_enable_out] 
      iexec_rd2_final_update_enable &-> (iexec_rd2_final_update_enable_out)
      $null &-> (iexec_rd2_final_update_enable)
      $T [next_dcache_state_update_enable] 
      $T [next_dcache_state_update_enable_in] 
      $null &-> (next_dcache_state_update_enable)
      $null <-& (next_dcache_state_update_enable_in) 
      $null &-> (next_dcache_state_update_enable)
      next_dcache_state_update_enable <-& (next_dcache_state_update_enable_in) 
      // start:  	opcode := ( $slice iexec_state 105 98 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 92
      // Source expression
      // ( $slice iexec_state 105 98 ) 
      $T[slice_207_sample_start_] 
      $T[slice_207_sample_completed_] 
      $T[slice_207_update_start_] 
      $T[slice_207_update_completed_] 
      // iexec_state
      // start: Forward dependencies from iexec_state to transition slice_207_sample_start_
      slice_207_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_state to transition slice_207_sample_start_
      ;;[slice_207_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_207_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_207_sample_start_ &-> (slice_207_Sample)
      slice_207_sample_completed_ <-& (slice_207_Sample)
      slice_207_sample_completed_ &-> ($null)
      slice_207_update_start_ &-> (slice_207_Update)
      slice_207_update_completed_ <-& (slice_207_Update)
      // RAW reenables for iexec_state
      iexec_state_update_enable o<-& (slice_207_sample_completed_ 0)
      // self-release: 
      slice_207_sample_start_ o<-& (slice_207_sample_completed_ 1)
      $null &-> (slice_207_update_start_)
      slice_207_update_start_ o<-& (slice_207_update_completed_ 0)
      // Target expression
      // (as target) opcode
      // start: WAR dependencies for opcode
      // done: WAR dependencies for opcode
      // end:  	opcode := ( $slice iexec_state 105 98 ) // bits of buffering = 8. 
      // start:  	rs1_imm := ( $slice iexec_state 97 90 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 93
      // Source expression
      // ( $slice iexec_state 97 90 ) 
      $T[slice_211_sample_start_] 
      $T[slice_211_sample_completed_] 
      $T[slice_211_update_start_] 
      $T[slice_211_update_completed_] 
      // iexec_state
      // start: Forward dependencies from iexec_state to transition slice_211_sample_start_
      slice_211_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_state to transition slice_211_sample_start_
      ;;[slice_211_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_211_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_211_sample_start_ &-> (slice_211_Sample)
      slice_211_sample_completed_ <-& (slice_211_Sample)
      slice_211_sample_completed_ &-> ($null)
      slice_211_update_start_ &-> (slice_211_Update)
      slice_211_update_completed_ <-& (slice_211_Update)
      // RAW reenables for iexec_state
      iexec_state_update_enable o<-& (slice_211_sample_completed_ 0)
      // self-release: 
      slice_211_sample_start_ o<-& (slice_211_sample_completed_ 1)
      $null &-> (slice_211_update_start_)
      slice_211_update_start_ o<-& (slice_211_update_completed_ 0)
      // Target expression
      // (as target) rs1_imm
      // start: WAR dependencies for rs1_imm
      // done: WAR dependencies for rs1_imm
      // end:  	rs1_imm := ( $slice iexec_state 97 90 ) // bits of buffering = 8. 
      // start:  	rs2 := ( $slice iexec_state 89 82 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 94
      // Source expression
      // ( $slice iexec_state 89 82 ) 
      $T[slice_215_sample_start_] 
      $T[slice_215_sample_completed_] 
      $T[slice_215_update_start_] 
      $T[slice_215_update_completed_] 
      // iexec_state
      // start: Forward dependencies from iexec_state to transition slice_215_sample_start_
      slice_215_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_state to transition slice_215_sample_start_
      ;;[slice_215_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_215_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_215_sample_start_ &-> (slice_215_Sample)
      slice_215_sample_completed_ <-& (slice_215_Sample)
      slice_215_sample_completed_ &-> ($null)
      slice_215_update_start_ &-> (slice_215_Update)
      slice_215_update_completed_ <-& (slice_215_Update)
      // RAW reenables for iexec_state
      iexec_state_update_enable o<-& (slice_215_sample_completed_ 0)
      // self-release: 
      slice_215_sample_start_ o<-& (slice_215_sample_completed_ 1)
      $null &-> (slice_215_update_start_)
      slice_215_update_start_ o<-& (slice_215_update_completed_ 0)
      // Target expression
      // (as target) rs2
      // start: WAR dependencies for rs2
      // done: WAR dependencies for rs2
      // end:  	rs2 := ( $slice iexec_state 89 82 ) // bits of buffering = 8. 
      // start:  	rd := ( $slice iexec_state 81 74 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 95
      // Source expression
      // ( $slice iexec_state 81 74 ) 
      $T[slice_219_sample_start_] 
      $T[slice_219_sample_completed_] 
      $T[slice_219_update_start_] 
      $T[slice_219_update_completed_] 
      // iexec_state
      // start: Forward dependencies from iexec_state to transition slice_219_sample_start_
      slice_219_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_state to transition slice_219_sample_start_
      ;;[slice_219_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_219_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_219_sample_start_ &-> (slice_219_Sample)
      slice_219_sample_completed_ <-& (slice_219_Sample)
      slice_219_sample_completed_ &-> ($null)
      slice_219_update_start_ &-> (slice_219_Update)
      slice_219_update_completed_ <-& (slice_219_Update)
      // RAW reenables for iexec_state
      iexec_state_update_enable o<-& (slice_219_sample_completed_ 0)
      // self-release: 
      slice_219_sample_start_ o<-& (slice_219_sample_completed_ 1)
      $null &-> (slice_219_update_start_)
      slice_219_update_start_ o<-& (slice_219_update_completed_ 0)
      // Target expression
      // (as target) rd
      // start: WAR dependencies for rd
      // done: WAR dependencies for rd
      // end:  	rd := ( $slice iexec_state 81 74 ) // bits of buffering = 8. 
      // start:  	program_cnt := ( $slice iexec_state 9 0 ) // bits of buffering = 10. 
      //  file prog.linked.opt.aa, line 96
      // Source expression
      // ( $slice iexec_state 9 0 ) 
      $T[slice_223_sample_start_] 
      $T[slice_223_sample_completed_] 
      $T[slice_223_update_start_] 
      $T[slice_223_update_completed_] 
      // iexec_state
      // start: Forward dependencies from iexec_state to transition slice_223_sample_start_
      slice_223_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_state to transition slice_223_sample_start_
      ;;[slice_223_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_223_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_223_sample_start_ &-> (slice_223_Sample)
      slice_223_sample_completed_ <-& (slice_223_Sample)
      slice_223_sample_completed_ &-> ($null)
      slice_223_update_start_ &-> (slice_223_Update)
      slice_223_update_completed_ <-& (slice_223_Update)
      // RAW reenables for iexec_state
      iexec_state_update_enable o<-& (slice_223_sample_completed_ 0)
      // self-release: 
      slice_223_sample_start_ o<-& (slice_223_sample_completed_ 1)
      $null &-> (slice_223_update_start_)
      slice_223_update_start_ o<-& (slice_223_update_completed_ 0)
      // Target expression
      // (as target) program_cnt
      // start: WAR dependencies for program_cnt
      // done: WAR dependencies for program_cnt
      // end:  	program_cnt := ( $slice iexec_state 9 0 ) // bits of buffering = 10. 
      // start:  	AND_u32_u32_241_241_delayed_1_0 := (iexec_rd1_final & iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 97
      // Source expression
      // (iexec_rd1_final & iexec_rd2_final)
      $T[AND_u32_u32_228_sample_start_] 
      $T[AND_u32_u32_228_sample_completed_] 
      $T[AND_u32_u32_228_update_start_] 
      $T[AND_u32_u32_228_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition AND_u32_u32_228_sample_start_
      AND_u32_u32_228_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition AND_u32_u32_228_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition AND_u32_u32_228_sample_start_
      AND_u32_u32_228_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition AND_u32_u32_228_sample_start_
      ;;[AND_u32_u32_228_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[AND_u32_u32_228_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      AND_u32_u32_228_sample_start_ &-> (AND_u32_u32_228_Sample)
      AND_u32_u32_228_sample_completed_ <-& (AND_u32_u32_228_Sample)
      AND_u32_u32_228_sample_completed_ &-> ($null)
      AND_u32_u32_228_update_start_ &-> (AND_u32_u32_228_Update)
      AND_u32_u32_228_update_completed_ <-& (AND_u32_u32_228_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (AND_u32_u32_228_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (AND_u32_u32_228_sample_completed_ 0)
      // self-release: 
      AND_u32_u32_228_sample_start_ o<-& (AND_u32_u32_228_sample_completed_ 1)
      $null &-> (AND_u32_u32_228_update_start_)
      AND_u32_u32_228_update_start_ o<-& (AND_u32_u32_228_update_completed_ 0)
      // Target expression
      // (as target) AND_u32_u32_241_241_delayed_1_0
      // start: WAR dependencies for AND_u32_u32_241_241_delayed_1_0
      // done: WAR dependencies for AND_u32_u32_241_241_delayed_1_0
      // end:  	AND_u32_u32_241_241_delayed_1_0 := (iexec_rd1_final & iexec_rd2_final)// bits of buffering = 32. 
      // start:  	OR_u32_u32_250_250_delayed_1_0 := (iexec_rd1_final | iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 98
      // Source expression
      // (iexec_rd1_final | iexec_rd2_final)
      $T[OR_u32_u32_233_sample_start_] 
      $T[OR_u32_u32_233_sample_completed_] 
      $T[OR_u32_u32_233_update_start_] 
      $T[OR_u32_u32_233_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition OR_u32_u32_233_sample_start_
      OR_u32_u32_233_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition OR_u32_u32_233_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition OR_u32_u32_233_sample_start_
      OR_u32_u32_233_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition OR_u32_u32_233_sample_start_
      ;;[OR_u32_u32_233_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_233_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_233_sample_start_ &-> (OR_u32_u32_233_Sample)
      OR_u32_u32_233_sample_completed_ <-& (OR_u32_u32_233_Sample)
      OR_u32_u32_233_sample_completed_ &-> ($null)
      OR_u32_u32_233_update_start_ &-> (OR_u32_u32_233_Update)
      OR_u32_u32_233_update_completed_ <-& (OR_u32_u32_233_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (OR_u32_u32_233_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (OR_u32_u32_233_sample_completed_ 0)
      // self-release: 
      OR_u32_u32_233_sample_start_ o<-& (OR_u32_u32_233_sample_completed_ 1)
      $null &-> (OR_u32_u32_233_update_start_)
      OR_u32_u32_233_update_start_ o<-& (OR_u32_u32_233_update_completed_ 0)
      // Target expression
      // (as target) OR_u32_u32_250_250_delayed_1_0
      // start: WAR dependencies for OR_u32_u32_250_250_delayed_1_0
      // done: WAR dependencies for OR_u32_u32_250_250_delayed_1_0
      // end:  	OR_u32_u32_250_250_delayed_1_0 := (iexec_rd1_final | iexec_rd2_final)// bits of buffering = 32. 
      // start:  	AND_u32_u32_230_230_delayed_1_0 := (iexec_rd2_final & byte_mask_3_bytes)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 99
      // Source expression
      // (iexec_rd2_final & byte_mask_3_bytes)
      $T[AND_u32_u32_238_sample_start_] 
      $T[AND_u32_u32_238_sample_completed_] 
      $T[AND_u32_u32_238_update_start_] 
      $T[AND_u32_u32_238_update_completed_] 
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd2_final to transition AND_u32_u32_238_sample_start_
      AND_u32_u32_238_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition AND_u32_u32_238_sample_start_
      ;;[AND_u32_u32_238_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[AND_u32_u32_238_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      AND_u32_u32_238_sample_start_ &-> (AND_u32_u32_238_Sample)
      AND_u32_u32_238_sample_completed_ <-& (AND_u32_u32_238_Sample)
      AND_u32_u32_238_sample_completed_ &-> ($null)
      AND_u32_u32_238_update_start_ &-> (AND_u32_u32_238_Update)
      AND_u32_u32_238_update_completed_ <-& (AND_u32_u32_238_Update)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (AND_u32_u32_238_sample_completed_ 0)
      // self-release: 
      AND_u32_u32_238_sample_start_ o<-& (AND_u32_u32_238_sample_completed_ 1)
      $null &-> (AND_u32_u32_238_update_start_)
      AND_u32_u32_238_update_start_ o<-& (AND_u32_u32_238_update_completed_ 0)
      // Target expression
      // (as target) AND_u32_u32_230_230_delayed_1_0
      // start: WAR dependencies for AND_u32_u32_230_230_delayed_1_0
      // done: WAR dependencies for AND_u32_u32_230_230_delayed_1_0
      // end:  	AND_u32_u32_230_230_delayed_1_0 := (iexec_rd2_final & byte_mask_3_bytes)// bits of buffering = 32. 
      // start:  	XOR_u32_u32_259_259_delayed_1_0 := (iexec_rd1_final ~^ iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 100
      // Source expression
      // (iexec_rd1_final ~^ iexec_rd2_final)
      $T[XOR_u32_u32_243_sample_start_] 
      $T[XOR_u32_u32_243_sample_completed_] 
      $T[XOR_u32_u32_243_update_start_] 
      $T[XOR_u32_u32_243_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition XOR_u32_u32_243_sample_start_
      XOR_u32_u32_243_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition XOR_u32_u32_243_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition XOR_u32_u32_243_sample_start_
      XOR_u32_u32_243_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition XOR_u32_u32_243_sample_start_
      ;;[XOR_u32_u32_243_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[XOR_u32_u32_243_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      XOR_u32_u32_243_sample_start_ &-> (XOR_u32_u32_243_Sample)
      XOR_u32_u32_243_sample_completed_ <-& (XOR_u32_u32_243_Sample)
      XOR_u32_u32_243_sample_completed_ &-> ($null)
      XOR_u32_u32_243_update_start_ &-> (XOR_u32_u32_243_Update)
      XOR_u32_u32_243_update_completed_ <-& (XOR_u32_u32_243_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (XOR_u32_u32_243_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (XOR_u32_u32_243_sample_completed_ 0)
      // self-release: 
      XOR_u32_u32_243_sample_start_ o<-& (XOR_u32_u32_243_sample_completed_ 1)
      $null &-> (XOR_u32_u32_243_update_start_)
      XOR_u32_u32_243_update_start_ o<-& (XOR_u32_u32_243_update_completed_ 0)
      // Target expression
      // (as target) XOR_u32_u32_259_259_delayed_1_0
      // start: WAR dependencies for XOR_u32_u32_259_259_delayed_1_0
      // done: WAR dependencies for XOR_u32_u32_259_259_delayed_1_0
      // end:  	XOR_u32_u32_259_259_delayed_1_0 := (iexec_rd1_final ~^ iexec_rd2_final)// bits of buffering = 32. 
      // start:  	XOR_u32_u32_267_267_delayed_1_0 := (iexec_rd1_final ^ iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 101
      // Source expression
      // (iexec_rd1_final ^ iexec_rd2_final)
      $T[XOR_u32_u32_248_sample_start_] 
      $T[XOR_u32_u32_248_sample_completed_] 
      $T[XOR_u32_u32_248_update_start_] 
      $T[XOR_u32_u32_248_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition XOR_u32_u32_248_sample_start_
      XOR_u32_u32_248_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition XOR_u32_u32_248_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition XOR_u32_u32_248_sample_start_
      XOR_u32_u32_248_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition XOR_u32_u32_248_sample_start_
      ;;[XOR_u32_u32_248_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[XOR_u32_u32_248_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      XOR_u32_u32_248_sample_start_ &-> (XOR_u32_u32_248_Sample)
      XOR_u32_u32_248_sample_completed_ <-& (XOR_u32_u32_248_Sample)
      XOR_u32_u32_248_sample_completed_ &-> ($null)
      XOR_u32_u32_248_update_start_ &-> (XOR_u32_u32_248_Update)
      XOR_u32_u32_248_update_completed_ <-& (XOR_u32_u32_248_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (XOR_u32_u32_248_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (XOR_u32_u32_248_sample_completed_ 0)
      // self-release: 
      XOR_u32_u32_248_sample_start_ o<-& (XOR_u32_u32_248_sample_completed_ 1)
      $null &-> (XOR_u32_u32_248_update_start_)
      XOR_u32_u32_248_update_start_ o<-& (XOR_u32_u32_248_update_completed_ 0)
      // Target expression
      // (as target) XOR_u32_u32_267_267_delayed_1_0
      // start: WAR dependencies for XOR_u32_u32_267_267_delayed_1_0
      // done: WAR dependencies for XOR_u32_u32_267_267_delayed_1_0
      // end:  	XOR_u32_u32_267_267_delayed_1_0 := (iexec_rd1_final ^ iexec_rd2_final)// bits of buffering = 32. 
      // start:  	ADD_u32_u32_276_276_delayed_1_0 := (iexec_rd1_final + iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 102
      // Source expression
      // (iexec_rd1_final + iexec_rd2_final)
      $T[ADD_u32_u32_253_sample_start_] 
      $T[ADD_u32_u32_253_sample_completed_] 
      $T[ADD_u32_u32_253_update_start_] 
      $T[ADD_u32_u32_253_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition ADD_u32_u32_253_sample_start_
      ADD_u32_u32_253_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition ADD_u32_u32_253_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition ADD_u32_u32_253_sample_start_
      ADD_u32_u32_253_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition ADD_u32_u32_253_sample_start_
      ;;[ADD_u32_u32_253_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_253_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_253_sample_start_ &-> (ADD_u32_u32_253_Sample)
      ADD_u32_u32_253_sample_completed_ <-& (ADD_u32_u32_253_Sample)
      ADD_u32_u32_253_sample_completed_ &-> ($null)
      ADD_u32_u32_253_update_start_ &-> (ADD_u32_u32_253_Update)
      ADD_u32_u32_253_update_completed_ <-& (ADD_u32_u32_253_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (ADD_u32_u32_253_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (ADD_u32_u32_253_sample_completed_ 0)
      // self-release: 
      ADD_u32_u32_253_sample_start_ o<-& (ADD_u32_u32_253_sample_completed_ 1)
      $null &-> (ADD_u32_u32_253_update_start_)
      ADD_u32_u32_253_update_start_ o<-& (ADD_u32_u32_253_update_completed_ 0)
      // Target expression
      // (as target) ADD_u32_u32_276_276_delayed_1_0
      // start: WAR dependencies for ADD_u32_u32_276_276_delayed_1_0
      // done: WAR dependencies for ADD_u32_u32_276_276_delayed_1_0
      // end:  	ADD_u32_u32_276_276_delayed_1_0 := (iexec_rd1_final + iexec_rd2_final)// bits of buffering = 32. 
      // start:  	SUB_u32_u32_286_286_delayed_1_0 := (iexec_rd1_final - iexec_rd2_final)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 103
      // Source expression
      // (iexec_rd1_final - iexec_rd2_final)
      $T[SUB_u32_u32_258_sample_start_] 
      $T[SUB_u32_u32_258_sample_completed_] 
      $T[SUB_u32_u32_258_update_start_] 
      $T[SUB_u32_u32_258_update_completed_] 
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from iexec_rd1_final to transition SUB_u32_u32_258_sample_start_
      SUB_u32_u32_258_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition SUB_u32_u32_258_sample_start_
      // start: Forward dependencies from iexec_rd2_final to transition SUB_u32_u32_258_sample_start_
      SUB_u32_u32_258_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition SUB_u32_u32_258_sample_start_
      ;;[SUB_u32_u32_258_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[SUB_u32_u32_258_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      SUB_u32_u32_258_sample_start_ &-> (SUB_u32_u32_258_Sample)
      SUB_u32_u32_258_sample_completed_ <-& (SUB_u32_u32_258_Sample)
      SUB_u32_u32_258_sample_completed_ &-> ($null)
      SUB_u32_u32_258_update_start_ &-> (SUB_u32_u32_258_Update)
      SUB_u32_u32_258_update_completed_ <-& (SUB_u32_u32_258_Update)
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (SUB_u32_u32_258_sample_completed_ 0)
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (SUB_u32_u32_258_sample_completed_ 0)
      // self-release: 
      SUB_u32_u32_258_sample_start_ o<-& (SUB_u32_u32_258_sample_completed_ 1)
      $null &-> (SUB_u32_u32_258_update_start_)
      SUB_u32_u32_258_update_start_ o<-& (SUB_u32_u32_258_update_completed_ 0)
      // Target expression
      // (as target) SUB_u32_u32_286_286_delayed_1_0
      // start: WAR dependencies for SUB_u32_u32_286_286_delayed_1_0
      // done: WAR dependencies for SUB_u32_u32_286_286_delayed_1_0
      // end:  	SUB_u32_u32_286_286_delayed_1_0 := (iexec_rd1_final - iexec_rd2_final)// bits of buffering = 32. 
      // start:  	type_cast_295_295_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 104
      // Source expression
      // ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )
      $T[type_cast_264_sample_start_] 
      $T[type_cast_264_sample_completed_] 
      $T[type_cast_264_update_start_] 
      $T[type_cast_264_update_completed_] 
      // (iexec_rd1_final << iexec_rd2_final)
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from (iexec_rd1_final << iexec_rd2_final) to transition type_cast_264_sample_start_
      type_cast_264_sample_start_ <-& ($entry)
      type_cast_264_sample_start_ <-& ($entry)
      // done: Forward dependencies from (iexec_rd1_final << iexec_rd2_final) to transition type_cast_264_sample_start_
      ;;[type_cast_264_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_264_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_264_sample_start_ &-> (type_cast_264_Sample)
      type_cast_264_sample_completed_ <-& (type_cast_264_Sample)
      type_cast_264_sample_completed_ &-> ($null)
      type_cast_264_update_start_ &-> (type_cast_264_Update)
      type_cast_264_update_completed_ <-& (type_cast_264_Update)
      // RAW reenables for (iexec_rd1_final << iexec_rd2_final)
      iexec_rd1_final_update_enable o<-& (type_cast_264_sample_completed_ 0)
      iexec_rd2_final_update_enable o<-& (type_cast_264_sample_completed_ 0)
      // self-release: 
      type_cast_264_sample_start_ o<-& (type_cast_264_sample_completed_ 1)
      $null &-> (type_cast_264_update_start_)
      type_cast_264_update_start_ o<-& (type_cast_264_update_completed_ 0)
      // Target expression
      // (as target) type_cast_295_295_delayed_1_0
      // start: WAR dependencies for type_cast_295_295_delayed_1_0
      // done: WAR dependencies for type_cast_295_295_delayed_1_0
      // end:  	type_cast_295_295_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )// bits of buffering = 32. 
      // start:  	type_cast_305_305_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 105
      // Source expression
      // ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )
      $T[type_cast_270_sample_start_] 
      $T[type_cast_270_sample_completed_] 
      $T[type_cast_270_update_start_] 
      $T[type_cast_270_update_completed_] 
      // (iexec_rd1_final >> iexec_rd2_final)
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from (iexec_rd1_final >> iexec_rd2_final) to transition type_cast_270_sample_start_
      type_cast_270_sample_start_ <-& ($entry)
      type_cast_270_sample_start_ <-& ($entry)
      // done: Forward dependencies from (iexec_rd1_final >> iexec_rd2_final) to transition type_cast_270_sample_start_
      ;;[type_cast_270_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[type_cast_270_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      type_cast_270_sample_start_ &-> (type_cast_270_Sample)
      type_cast_270_sample_completed_ <-& (type_cast_270_Sample)
      type_cast_270_sample_completed_ &-> ($null)
      type_cast_270_update_start_ &-> (type_cast_270_Update)
      type_cast_270_update_completed_ <-& (type_cast_270_Update)
      // RAW reenables for (iexec_rd1_final >> iexec_rd2_final)
      iexec_rd1_final_update_enable o<-& (type_cast_270_sample_completed_ 0)
      iexec_rd2_final_update_enable o<-& (type_cast_270_sample_completed_ 0)
      // self-release: 
      type_cast_270_sample_start_ o<-& (type_cast_270_sample_completed_ 1)
      $null &-> (type_cast_270_update_start_)
      type_cast_270_update_start_ o<-& (type_cast_270_update_completed_ 0)
      // Target expression
      // (as target) type_cast_305_305_delayed_1_0
      // start: WAR dependencies for type_cast_305_305_delayed_1_0
      // done: WAR dependencies for type_cast_305_305_delayed_1_0
      // end:  	type_cast_305_305_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )// bits of buffering = 32. 
      // start:  	OR_u32_u32_331_331_delayed_1_0 := ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 106
      // Source expression
      // ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )
      $T[OR_u32_u32_292_sample_start_] 
      $T[OR_u32_u32_292_sample_completed_] 
      $T[OR_u32_u32_292_update_start_] 
      $T[OR_u32_u32_292_update_completed_] 
      // (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) )
      // ( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  ) 
      // (iexec_rd1_final == iexec_rd2_final)
      // iexec_rd1_final
      // iexec_rd2_final
      // ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) 
      // (iexec_rd1_final < iexec_rd2_final)
      // iexec_rd1_final
      // iexec_rd2_final
      // ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
      // (iexec_rd1_final > iexec_rd2_final)
      // iexec_rd1_final
      // iexec_rd2_final
      // start: Forward dependencies from (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) to transition OR_u32_u32_292_sample_start_
      OR_u32_u32_292_sample_start_ <-& ($entry)
      OR_u32_u32_292_sample_start_ <-& ($entry)
      // done: Forward dependencies from (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) to transition OR_u32_u32_292_sample_start_
      // start: Forward dependencies from ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  )  to transition OR_u32_u32_292_sample_start_
      OR_u32_u32_292_sample_start_ <-& ($entry)
      OR_u32_u32_292_sample_start_ <-& ($entry)
      // done: Forward dependencies from ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  )  to transition OR_u32_u32_292_sample_start_
      ;;[OR_u32_u32_292_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_292_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_292_sample_start_ &-> (OR_u32_u32_292_Sample)
      OR_u32_u32_292_sample_completed_ <-& (OR_u32_u32_292_Sample)
      OR_u32_u32_292_sample_completed_ &-> ($null)
      OR_u32_u32_292_update_start_ &-> (OR_u32_u32_292_Update)
      OR_u32_u32_292_update_completed_ <-& (OR_u32_u32_292_Update)
      // RAW reenables for (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) )
      iexec_rd1_final_update_enable o<-& (OR_u32_u32_292_sample_completed_ 0)
      iexec_rd2_final_update_enable o<-& (OR_u32_u32_292_sample_completed_ 0)
      // RAW reenables for ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
      iexec_rd1_final_update_enable o<-& (OR_u32_u32_292_sample_completed_ 0)
      iexec_rd2_final_update_enable o<-& (OR_u32_u32_292_sample_completed_ 0)
      // self-release: 
      OR_u32_u32_292_sample_start_ o<-& (OR_u32_u32_292_sample_completed_ 1)
      $null &-> (OR_u32_u32_292_update_start_)
      OR_u32_u32_292_update_start_ o<-& (OR_u32_u32_292_update_completed_ 0)
      // Target expression
      // (as target) OR_u32_u32_331_331_delayed_1_0
      // start: WAR dependencies for OR_u32_u32_331_331_delayed_1_0
      // done: WAR dependencies for OR_u32_u32_331_331_delayed_1_0
      // end:  	OR_u32_u32_331_331_delayed_1_0 := ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )// bits of buffering = 32. 
      // start: WAR dependencies for exec_result_initial
      // done: WAR dependencies for exec_result_initial
      // start:  	$volatile exec_result_initial := ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
      //  file prog.linked.opt.aa, line 107
      // volatile! 
      // Source expression
      // ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
      // (((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) ))
      // ((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) )
      // (( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) )
      // ( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  ) 
      // (opcode == SBIR)
      // opcode
      // (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))
      // AND_u32_u32_230_230_delayed_1_0
      // ($bitcast ($uint<32>) rs1_imm )
      // rs1_imm
      // ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) 
      // (opcode == L_AND)
      // opcode
      // AND_u32_u32_241_241_delayed_1_0
      // ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) 
      // (opcode == L_OR)
      // opcode
      // OR_u32_u32_250_250_delayed_1_0
      // ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )
      // (( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) )
      // ( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  ) 
      // (opcode == L_XNOR)
      // opcode
      // XOR_u32_u32_259_259_delayed_1_0
      // ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) 
      // (opcode == L_XOR)
      // opcode
      // XOR_u32_u32_267_267_delayed_1_0
      // ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) 
      // (opcode == ADD)
      // opcode
      // ADD_u32_u32_276_276_delayed_1_0
      // (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) ))
      // ((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) )
      // (( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) )
      // ( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  ) 
      // (opcode == SUB)
      // opcode
      // SUB_u32_u32_286_286_delayed_1_0
      // ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) 
      // (opcode == L_SLL)
      // opcode
      // type_cast_295_295_delayed_1_0
      // ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) 
      // (opcode == L_SRL)
      // opcode
      // type_cast_305_305_delayed_1_0
      // (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )
      // ( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  ) 
      // (opcode == CMP)
      // opcode
      // OR_u32_u32_331_331_delayed_1_0
      // ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) 
      // (opcode == CALL)
      // opcode
      // ($bitcast ($uint<32>) (program_cnt + 1 ) )
      // (program_cnt + 1 )
      // program_cnt
      // Target expression
      // (as target) exec_result_initial
      // start: WAR dependencies for exec_result_initial
      // done: WAR dependencies for exec_result_initial
      // end:  	$volatile exec_result_initial := ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
      // start: WAR dependencies for is_SRA
      // done: WAR dependencies for is_SRA
      // start:  	$volatile is_SRA := ( $mux (opcode == L_SRA) one_1  zero_1 ) 
      //  file prog.linked.opt.aa, line 108
      // volatile! 
      // Source expression
      // ( $mux (opcode == L_SRA) one_1  zero_1 ) 
      // (opcode == L_SRA)
      // opcode
      // Target expression
      // (as target) is_SRA
      // start: WAR dependencies for is_SRA
      // done: WAR dependencies for is_SRA
      // end:  	$volatile is_SRA := ( $mux (opcode == L_SRA) one_1  zero_1 ) 
      // start:  	iexec_rd1_final_357_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 109
      $T[assign_stmt_388_sample_start_] 
      $T[assign_stmt_388_sample_completed_] 
      $T[assign_stmt_388_update_start_] 
      $T[assign_stmt_388_update_completed_] 
      // Source expression
      // iexec_rd1_final
      // Target expression
      // (as target) iexec_rd1_final_357_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_388_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_388_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_388_sample_start_ &-> (assign_stmt_388_Sample)
      assign_stmt_388_sample_completed_ <-& (assign_stmt_388_Sample)
      assign_stmt_388_sample_completed_ &-> ($null)
      assign_stmt_388_update_start_ &-> (assign_stmt_388_Update)
      assign_stmt_388_update_completed_ <-& (assign_stmt_388_Update)
      // start: Forward dependencies from iexec_rd1_final to transition assign_stmt_388_sample_start_
      assign_stmt_388_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition assign_stmt_388_sample_start_
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (assign_stmt_388_sample_completed_ 0)
      // self-release: 
      assign_stmt_388_sample_start_ o<-& (assign_stmt_388_sample_completed_ 1)
      $null &-> (assign_stmt_388_update_start_)
      assign_stmt_388_update_start_ o<-& (assign_stmt_388_update_completed_ 0)
      // start: WAR dependencies for iexec_rd1_final_357_delayed_1_0
      // done: WAR dependencies for iexec_rd1_final_357_delayed_1_0
      // end:  	iexec_rd1_final_357_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      // start:  	iexec_rd2_final_358_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 110
      $T[assign_stmt_391_sample_start_] 
      $T[assign_stmt_391_sample_completed_] 
      $T[assign_stmt_391_update_start_] 
      $T[assign_stmt_391_update_completed_] 
      // Source expression
      // iexec_rd2_final
      // Target expression
      // (as target) iexec_rd2_final_358_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_391_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_391_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_391_sample_start_ &-> (assign_stmt_391_Sample)
      assign_stmt_391_sample_completed_ <-& (assign_stmt_391_Sample)
      assign_stmt_391_sample_completed_ &-> ($null)
      assign_stmt_391_update_start_ &-> (assign_stmt_391_Update)
      assign_stmt_391_update_completed_ <-& (assign_stmt_391_Update)
      // start: Forward dependencies from iexec_rd2_final to transition assign_stmt_391_sample_start_
      assign_stmt_391_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition assign_stmt_391_sample_start_
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (assign_stmt_391_sample_completed_ 0)
      // self-release: 
      assign_stmt_391_sample_start_ o<-& (assign_stmt_391_sample_completed_ 1)
      $null &-> (assign_stmt_391_update_start_)
      assign_stmt_391_update_start_ o<-& (assign_stmt_391_update_completed_ 0)
      // start: WAR dependencies for iexec_rd2_final_358_delayed_1_0
      // done: WAR dependencies for iexec_rd2_final_358_delayed_1_0
      // end:  	iexec_rd2_final_358_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      // start: WAR dependencies for bottom_bits
      // done: WAR dependencies for bottom_bits
      // start:  	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
      //  file prog.linked.opt.aa, line 111
      // volatile! 
      // Guard expression 
      // is_SRA
      // Source expression
      // (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
      // iexec_rd1_final_357_delayed_1_0
      // iexec_rd2_final_358_delayed_1_0
      // Target expression
      // (as target) bottom_bits
      // start: WAR dependencies for bottom_bits
      // done: WAR dependencies for bottom_bits
      // end:  	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
      // start:  	iexec_rd1_final_364_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 112
      $T[assign_stmt_400_sample_start_] 
      $T[assign_stmt_400_sample_completed_] 
      $T[assign_stmt_400_update_start_] 
      $T[assign_stmt_400_update_completed_] 
      // Source expression
      // iexec_rd1_final
      // Target expression
      // (as target) iexec_rd1_final_364_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_400_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_400_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_400_sample_start_ &-> (assign_stmt_400_Sample)
      assign_stmt_400_sample_completed_ <-& (assign_stmt_400_Sample)
      assign_stmt_400_sample_completed_ &-> ($null)
      assign_stmt_400_update_start_ &-> (assign_stmt_400_Update)
      assign_stmt_400_update_completed_ <-& (assign_stmt_400_Update)
      // start: Forward dependencies from iexec_rd1_final to transition assign_stmt_400_sample_start_
      assign_stmt_400_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition assign_stmt_400_sample_start_
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (assign_stmt_400_sample_completed_ 0)
      // self-release: 
      assign_stmt_400_sample_start_ o<-& (assign_stmt_400_sample_completed_ 1)
      $null &-> (assign_stmt_400_update_start_)
      assign_stmt_400_update_start_ o<-& (assign_stmt_400_update_completed_ 0)
      // start: WAR dependencies for iexec_rd1_final_364_delayed_1_0
      // done: WAR dependencies for iexec_rd1_final_364_delayed_1_0
      // end:  	iexec_rd1_final_364_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      // start:  	iexec_rd2_final_369_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 113
      $T[assign_stmt_403_sample_start_] 
      $T[assign_stmt_403_sample_completed_] 
      $T[assign_stmt_403_update_start_] 
      $T[assign_stmt_403_update_completed_] 
      // Source expression
      // iexec_rd2_final
      // Target expression
      // (as target) iexec_rd2_final_369_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_403_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_403_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_403_sample_start_ &-> (assign_stmt_403_Sample)
      assign_stmt_403_sample_completed_ <-& (assign_stmt_403_Sample)
      assign_stmt_403_sample_completed_ &-> ($null)
      assign_stmt_403_update_start_ &-> (assign_stmt_403_Update)
      assign_stmt_403_update_completed_ <-& (assign_stmt_403_Update)
      // start: Forward dependencies from iexec_rd2_final to transition assign_stmt_403_sample_start_
      assign_stmt_403_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition assign_stmt_403_sample_start_
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (assign_stmt_403_sample_completed_ 0)
      // self-release: 
      assign_stmt_403_sample_start_ o<-& (assign_stmt_403_sample_completed_ 1)
      $null &-> (assign_stmt_403_update_start_)
      assign_stmt_403_update_start_ o<-& (assign_stmt_403_update_completed_ 0)
      // start: WAR dependencies for iexec_rd2_final_369_delayed_1_0
      // done: WAR dependencies for iexec_rd2_final_369_delayed_1_0
      // end:  	iexec_rd2_final_369_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      // start: WAR dependencies for top_bits
      // done: WAR dependencies for top_bits
      // start:  	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
      //  file prog.linked.opt.aa, line 114
      // volatile! 
      // Guard expression 
      // is_SRA
      // Source expression
      // ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
      // (zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32))
      // (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)
      // iexec_rd1_final_364_delayed_1_0
      // (thirty_two_32 - iexec_rd2_final_369_delayed_1_0)
      // iexec_rd2_final_369_delayed_1_0
      // Target expression
      // (as target) top_bits
      // start: WAR dependencies for top_bits
      // done: WAR dependencies for top_bits
      // end:  	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
      // start: WAR dependencies for result_for_SRA
      // done: WAR dependencies for result_for_SRA
      // start:  	$guard (is_SRA) $volatile result_for_SRA := (top_bits | bottom_bits)
      //  file prog.linked.opt.aa, line 115
      // volatile! 
      // Guard expression 
      // is_SRA
      // Source expression
      // (top_bits | bottom_bits)
      // top_bits
      // bottom_bits
      // Target expression
      // (as target) result_for_SRA
      // start: WAR dependencies for result_for_SRA
      // done: WAR dependencies for result_for_SRA
      // end:  	$guard (is_SRA) $volatile result_for_SRA := (top_bits | bottom_bits)
      // start: WAR dependencies for exec_result
      // done: WAR dependencies for exec_result
      // start:  	$volatile exec_result := ( $mux is_SRA result_for_SRA  exec_result_initial ) 
      //  file prog.linked.opt.aa, line 116
      // volatile! 
      // Source expression
      // ( $mux is_SRA result_for_SRA  exec_result_initial ) 
      // is_SRA
      // result_for_SRA
      // exec_result_initial
      // Target expression
      // (as target) exec_result
      // start: WAR dependencies for exec_result
      // done: WAR dependencies for exec_result
      // end:  	$volatile exec_result := ( $mux is_SRA result_for_SRA  exec_result_initial ) 
      // start: WAR dependencies for is_rs1_neg
      // done: WAR dependencies for is_rs1_neg
      // start:  	$volatile is_rs1_neg := ( $slice iexec_rd1_final 31 31 ) 
      //  file prog.linked.opt.aa, line 117
      // volatile! 
      // Source expression
      // ( $slice iexec_rd1_final 31 31 ) 
      // iexec_rd1_final
      // Target expression
      // (as target) is_rs1_neg
      // start: WAR dependencies for is_rs1_neg
      // done: WAR dependencies for is_rs1_neg
      // end:  	$volatile is_rs1_neg := ( $slice iexec_rd1_final 31 31 ) 
      // start:  	NOT_u1_u1_399_399_delayed_1_0 := ( ~ is_rs1_neg )// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 118
      // Source expression
      // ( ~ is_rs1_neg )
      $T[NOT_u1_u1_434_sample_start_] 
      $T[NOT_u1_u1_434_sample_completed_] 
      $T[NOT_u1_u1_434_update_start_] 
      $T[NOT_u1_u1_434_update_completed_] 
      // is_rs1_neg
      // start: Forward dependencies from is_rs1_neg to transition NOT_u1_u1_434_sample_start_
      NOT_u1_u1_434_sample_start_ <-& ($entry)
      // done: Forward dependencies from is_rs1_neg to transition NOT_u1_u1_434_sample_start_
      ;;[NOT_u1_u1_434_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[NOT_u1_u1_434_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      NOT_u1_u1_434_sample_start_ &-> (NOT_u1_u1_434_Sample)
      NOT_u1_u1_434_sample_completed_ <-& (NOT_u1_u1_434_Sample)
      NOT_u1_u1_434_sample_completed_ &-> ($null)
      NOT_u1_u1_434_update_start_ &-> (NOT_u1_u1_434_Update)
      NOT_u1_u1_434_update_completed_ <-& (NOT_u1_u1_434_Update)
      // RAW reenables for is_rs1_neg
      iexec_rd1_final_update_enable o<-& (NOT_u1_u1_434_sample_completed_ 0)
      // self-release: 
      NOT_u1_u1_434_sample_start_ o<-& (NOT_u1_u1_434_sample_completed_ 1)
      $null &-> (NOT_u1_u1_434_update_start_)
      NOT_u1_u1_434_update_start_ o<-& (NOT_u1_u1_434_update_completed_ 0)
      // Target expression
      // (as target) NOT_u1_u1_399_399_delayed_1_0
      // start: WAR dependencies for NOT_u1_u1_399_399_delayed_1_0
      // done: WAR dependencies for NOT_u1_u1_399_399_delayed_1_0
      // end:  	NOT_u1_u1_399_399_delayed_1_0 := ( ~ is_rs1_neg )// bits of buffering = 1. 
      // start:  	is_rs1_neg_404_delayed_1_0 := is_rs1_neg// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 119
      $T[assign_stmt_438_sample_start_] 
      $T[assign_stmt_438_sample_completed_] 
      $T[assign_stmt_438_update_start_] 
      $T[assign_stmt_438_update_completed_] 
      // Source expression
      // is_rs1_neg
      // Target expression
      // (as target) is_rs1_neg_404_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_438_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_438_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_438_sample_start_ &-> (assign_stmt_438_Sample)
      assign_stmt_438_sample_completed_ <-& (assign_stmt_438_Sample)
      assign_stmt_438_sample_completed_ &-> ($null)
      assign_stmt_438_update_start_ &-> (assign_stmt_438_Update)
      assign_stmt_438_update_completed_ <-& (assign_stmt_438_Update)
      // start: Forward dependencies from is_rs1_neg to transition assign_stmt_438_sample_start_
      assign_stmt_438_sample_start_ <-& ($entry)
      // done: Forward dependencies from is_rs1_neg to transition assign_stmt_438_sample_start_
      // RAW reenables for is_rs1_neg
      iexec_rd1_final_update_enable o<-& (assign_stmt_438_sample_completed_ 0)
      // self-release: 
      assign_stmt_438_sample_start_ o<-& (assign_stmt_438_sample_completed_ 1)
      $null &-> (assign_stmt_438_update_start_)
      assign_stmt_438_update_start_ o<-& (assign_stmt_438_update_completed_ 0)
      // start: WAR dependencies for is_rs1_neg_404_delayed_1_0
      // done: WAR dependencies for is_rs1_neg_404_delayed_1_0
      // end:  	is_rs1_neg_404_delayed_1_0 := is_rs1_neg// bits of buffering = 1. 
      // start: WAR dependencies for is_Branch
      // done: WAR dependencies for is_Branch
      // start:  	$volatile is_Branch := (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
      //  file prog.linked.opt.aa, line 120
      // volatile! 
      // Source expression
      // (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
      // ((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0)
      // (opcode == BZ)
      // opcode
      // NOT_u1_u1_399_399_delayed_1_0
      // ((opcode == BN) & is_rs1_neg_404_delayed_1_0)
      // (opcode == BN)
      // opcode
      // is_rs1_neg_404_delayed_1_0
      // Target expression
      // (as target) is_Branch
      // start: WAR dependencies for is_Branch
      // done: WAR dependencies for is_Branch
      // end:  	$volatile is_Branch := (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
      // start:  	iexec_rd1_final_415_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 121
      $T[assign_stmt_454_sample_start_] 
      $T[assign_stmt_454_sample_completed_] 
      $T[assign_stmt_454_update_start_] 
      $T[assign_stmt_454_update_completed_] 
      // Source expression
      // iexec_rd1_final
      // Target expression
      // (as target) iexec_rd1_final_415_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_454_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_454_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_454_sample_start_ &-> (assign_stmt_454_Sample)
      assign_stmt_454_sample_completed_ <-& (assign_stmt_454_Sample)
      assign_stmt_454_sample_completed_ &-> ($null)
      assign_stmt_454_update_start_ &-> (assign_stmt_454_Update)
      assign_stmt_454_update_completed_ <-& (assign_stmt_454_Update)
      // start: Forward dependencies from iexec_rd1_final to transition assign_stmt_454_sample_start_
      assign_stmt_454_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd1_final to transition assign_stmt_454_sample_start_
      // RAW reenables for iexec_rd1_final
      iexec_rd1_final_update_enable o<-& (assign_stmt_454_sample_completed_ 0)
      // self-release: 
      assign_stmt_454_sample_start_ o<-& (assign_stmt_454_sample_completed_ 1)
      $null &-> (assign_stmt_454_update_start_)
      assign_stmt_454_update_start_ o<-& (assign_stmt_454_update_completed_ 0)
      // start: WAR dependencies for iexec_rd1_final_415_delayed_1_0
      // done: WAR dependencies for iexec_rd1_final_415_delayed_1_0
      // end:  	iexec_rd1_final_415_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
      // start:  	iexec_rd2_final_418_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 122
      $T[assign_stmt_457_sample_start_] 
      $T[assign_stmt_457_sample_completed_] 
      $T[assign_stmt_457_update_start_] 
      $T[assign_stmt_457_update_completed_] 
      // Source expression
      // iexec_rd2_final
      // Target expression
      // (as target) iexec_rd2_final_418_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_457_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_457_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_457_sample_start_ &-> (assign_stmt_457_Sample)
      assign_stmt_457_sample_completed_ <-& (assign_stmt_457_Sample)
      assign_stmt_457_sample_completed_ &-> ($null)
      assign_stmt_457_update_start_ &-> (assign_stmt_457_Update)
      assign_stmt_457_update_completed_ <-& (assign_stmt_457_Update)
      // start: Forward dependencies from iexec_rd2_final to transition assign_stmt_457_sample_start_
      assign_stmt_457_sample_start_ <-& ($entry)
      // done: Forward dependencies from iexec_rd2_final to transition assign_stmt_457_sample_start_
      // RAW reenables for iexec_rd2_final
      iexec_rd2_final_update_enable o<-& (assign_stmt_457_sample_completed_ 0)
      // self-release: 
      assign_stmt_457_sample_start_ o<-& (assign_stmt_457_sample_completed_ 1)
      $null &-> (assign_stmt_457_update_start_)
      assign_stmt_457_update_start_ o<-& (assign_stmt_457_update_completed_ 0)
      // start: WAR dependencies for iexec_rd2_final_418_delayed_1_0
      // done: WAR dependencies for iexec_rd2_final_418_delayed_1_0
      // end:  	iexec_rd2_final_418_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
      // start:  	next_dcache_state := ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))// bits of buffering = 139. 
      //  file prog.linked.opt.aa, line 123
      // Source expression
      // ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))
      $T[CONCAT_u64_u139_475_sample_start_] 
      $T[CONCAT_u64_u139_475_sample_completed_] 
      $T[CONCAT_u64_u139_475_update_start_] 
      $T[CONCAT_u64_u139_475_update_completed_] 
      // (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0))
      // ((opcode && rs1_imm) && rs2)
      // (opcode && rs1_imm)
      // opcode
      // rs1_imm
      // rs2
      // (rd && iexec_rd1_final_415_delayed_1_0)
      // rd
      // iexec_rd1_final_415_delayed_1_0
      // ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt))
      // (iexec_rd2_final_418_delayed_1_0 && exec_result)
      // iexec_rd2_final_418_delayed_1_0
      // exec_result
      // (is_Branch && program_cnt)
      // is_Branch
      // program_cnt
      // start: Forward dependencies from (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) to transition CONCAT_u64_u139_475_sample_start_
      CONCAT_u64_u139_475_sample_start_ <-& (slice_207_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_211_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_215_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_219_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_454_update_completed_)
      // done: Forward dependencies from (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) to transition CONCAT_u64_u139_475_sample_start_
      // start: Forward dependencies from ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)) to transition CONCAT_u64_u139_475_sample_start_
      CONCAT_u64_u139_475_sample_start_ <-& (AND_u32_u32_228_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (OR_u32_u32_233_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (type_cast_264_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (AND_u32_u32_238_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_207_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_211_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (slice_223_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (XOR_u32_u32_243_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (XOR_u32_u32_248_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (ADD_u32_u32_253_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (SUB_u32_u32_258_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (type_cast_270_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (OR_u32_u32_292_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_400_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_403_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_388_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_391_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (NOT_u1_u1_434_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_438_update_completed_)
      CONCAT_u64_u139_475_sample_start_ <-& (assign_stmt_457_update_completed_)
      // done: Forward dependencies from ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)) to transition CONCAT_u64_u139_475_sample_start_
      ;;[CONCAT_u64_u139_475_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u64_u139_475_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u64_u139_475_sample_start_ &-> (CONCAT_u64_u139_475_Sample)
      CONCAT_u64_u139_475_sample_completed_ <-& (CONCAT_u64_u139_475_Sample)
      CONCAT_u64_u139_475_sample_completed_ &-> ($null)
      CONCAT_u64_u139_475_update_start_ &-> (CONCAT_u64_u139_475_Update)
      CONCAT_u64_u139_475_update_completed_ <-& (CONCAT_u64_u139_475_Update)
      // RAW reenables for (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0))
      slice_207_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_211_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_215_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_219_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_454_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      // RAW reenables for ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt))
      AND_u32_u32_228_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      OR_u32_u32_233_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      type_cast_264_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      AND_u32_u32_238_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_207_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_211_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      slice_223_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      XOR_u32_u32_243_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      XOR_u32_u32_248_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      ADD_u32_u32_253_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      SUB_u32_u32_258_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      type_cast_270_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      OR_u32_u32_292_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_400_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_403_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_388_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_391_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      NOT_u1_u1_434_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_438_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      assign_stmt_457_update_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 0)
      // self-release: 
      CONCAT_u64_u139_475_sample_start_ o<-& (CONCAT_u64_u139_475_sample_completed_ 1)
      $null &-> (CONCAT_u64_u139_475_update_start_)
      CONCAT_u64_u139_475_update_start_ o<-& (CONCAT_u64_u139_475_update_completed_ 0)
      // Target expression
      // (as target) next_dcache_state
      // next_dcache_state
      // write to interface object
      // start: WAR dependencies for next_dcache_state
      // done: WAR dependencies for next_dcache_state
      // next_dcache_state
      // write to interface object
      CONCAT_u64_u139_475_update_start_ <-& (next_dcache_state_update_enable)
      // end:  	next_dcache_state := ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))// bits of buffering = 139. 
      // load-store dependencies..
    }
    ( next_dcache_state_update_enable_in)
    ( iexec_state_update_enable_out iexec_rd1_final_update_enable_out iexec_rd2_final_update_enable_out)
    $P [iexec_state_update_enable] 
    $P [iexec_rd1_final_update_enable] 
    $P [iexec_rd2_final_update_enable] 
    $P [next_dcache_state_update_enable] 
    $bind iexec_state_update_enable <= assign_stmt_208_to_assign_stmt_476 : iexec_state_update_enable_out
    $bind iexec_rd1_final_update_enable <= assign_stmt_208_to_assign_stmt_476 : iexec_rd1_final_update_enable_out
    $bind iexec_rd2_final_update_enable <= assign_stmt_208_to_assign_stmt_476 : iexec_rd2_final_update_enable_out
    $bind next_dcache_state_update_enable => assign_stmt_208_to_assign_stmt_476 : next_dcache_state_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %iExecStage
    //  file prog.linked.opt.aa, line 87
    // byte_mask_3_bytes
    $constant $W[R_byte_mask_3_bytes_237_wire_constant] : $int<32> := _b11111111111111111111111100000000// -256
    // ( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  ) 
    // zero_32
    $constant $W[R_zero_32_276_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // _b0 
    $constant $W[konst_277_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) 
    // minus_1
    $constant $W[R_minus_1_282_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // _b0 
    $constant $W[konst_283_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
    // one_32
    $constant $W[R_one_32_289_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // _b0 
    $constant $W[konst_290_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  ) 
    // SBIR
    $constant $W[R_SBIR_296_wire_constant] : $int<8> := _b00000010// 2
    // _b0 
    $constant $W[konst_302_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) 
    // L_AND
    $constant $W[R_L_AND_305_wire_constant] : $int<8> := _b00000101// 5
    // _b0 
    $constant $W[konst_308_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) 
    // L_OR
    $constant $W[R_L_OR_312_wire_constant] : $int<8> := _b00000110// 6
    // _b0 
    $constant $W[konst_315_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  ) 
    // L_XNOR
    $constant $W[R_L_XNOR_319_wire_constant] : $int<8> := _b00000111// 7
    // _b0 
    $constant $W[konst_322_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) 
    // L_XOR
    $constant $W[R_L_XOR_325_wire_constant] : $int<8> := _b00001000// 8
    // _b0 
    $constant $W[konst_328_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) 
    // ADD
    $constant $W[R_ADD_332_wire_constant] : $int<8> := _b00001001// 9
    // _b0 
    $constant $W[konst_335_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  ) 
    // SUB
    $constant $W[R_SUB_340_wire_constant] : $int<8> := _b00001010// 10
    // _b0 
    $constant $W[konst_343_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) 
    // L_SLL
    $constant $W[R_L_SLL_346_wire_constant] : $int<8> := _b00001011// 11
    // _b0 
    $constant $W[konst_349_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) 
    // L_SRL
    $constant $W[R_L_SRL_353_wire_constant] : $int<8> := _b00001100// 12
    // _b0 
    $constant $W[konst_356_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  ) 
    // CMP
    $constant $W[R_CMP_360_wire_constant] : $int<8> := _b00010010// 18
    // _b0 
    $constant $W[konst_363_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) 
    // CALL
    $constant $W[R_CALL_366_wire_constant] : $int<8> := _b00010000// 16
    // 1 
    $constant $W[konst_369_wire_constant] : $int<10> := _b0000000001// 1
    // _b0 
    $constant $W[konst_372_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (opcode == L_SRA) one_1  zero_1 ) 
    // L_SRA
    $constant $W[R_L_SRA_380_wire_constant] : $int<8> := _b00001101// 13
    // one_1
    $constant $W[R_one_1_382_wire_constant] : $int<1> := _b1// 1
    // zero_1
    $constant $W[R_zero_1_383_wire_constant] : $int<1> := _b0// 0
    // zero_32
    $constant $W[R_zero_32_406_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // thirty_one_32
    $constant $W[R_thirty_one_32_408_wire_constant] : $int<32> := _b00000000000000000000000000011111// 31
    // thirty_two_32
    $constant $W[R_thirty_two_32_411_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // ( $mux is_SRA result_for_SRA  exec_result_initial ) 
    // BZ
    $constant $W[R_BZ_441_wire_constant] : $int<8> := _b00001110// 14
    // BN
    $constant $W[R_BN_446_wire_constant] : $int<8> := _b00001111// 15
    // 	opcode := ( $slice iexec_state 105 98 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 92
    // opcode
    $W[opcode_208] : $int<8>
    // 	rs1_imm := ( $slice iexec_state 97 90 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 93
    // rs1_imm
    $W[rs1_imm_212] : $int<8>
    // 	rs2 := ( $slice iexec_state 89 82 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 94
    // rs2
    $W[rs2_216] : $int<8>
    // 	rd := ( $slice iexec_state 81 74 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 95
    // rd
    $W[rd_220] : $int<8>
    // 	program_cnt := ( $slice iexec_state 9 0 ) // bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 96
    // program_cnt
    $W[program_cnt_224] : $int<10>
    // 	AND_u32_u32_241_241_delayed_1_0 := (iexec_rd1_final & iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 97
    // AND_u32_u32_241_241_delayed_1_0
    $W[AND_u32_u32_241_241_delayed_1_0_229] : $int<32>
    // 	OR_u32_u32_250_250_delayed_1_0 := (iexec_rd1_final | iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 98
    // OR_u32_u32_250_250_delayed_1_0
    $W[OR_u32_u32_250_250_delayed_1_0_234] : $int<32>
    // 	AND_u32_u32_230_230_delayed_1_0 := (iexec_rd2_final & byte_mask_3_bytes)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 99
    // AND_u32_u32_230_230_delayed_1_0
    $W[AND_u32_u32_230_230_delayed_1_0_239] : $int<32>
    // 	XOR_u32_u32_259_259_delayed_1_0 := (iexec_rd1_final ~^ iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 100
    // XOR_u32_u32_259_259_delayed_1_0
    $W[XOR_u32_u32_259_259_delayed_1_0_244] : $int<32>
    // 	XOR_u32_u32_267_267_delayed_1_0 := (iexec_rd1_final ^ iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 101
    // XOR_u32_u32_267_267_delayed_1_0
    $W[XOR_u32_u32_267_267_delayed_1_0_249] : $int<32>
    // 	ADD_u32_u32_276_276_delayed_1_0 := (iexec_rd1_final + iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 102
    // ADD_u32_u32_276_276_delayed_1_0
    $W[ADD_u32_u32_276_276_delayed_1_0_254] : $int<32>
    // 	SUB_u32_u32_286_286_delayed_1_0 := (iexec_rd1_final - iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 103
    // SUB_u32_u32_286_286_delayed_1_0
    $W[SUB_u32_u32_286_286_delayed_1_0_259] : $int<32>
    // 	type_cast_295_295_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 104
    // (iexec_rd1_final << iexec_rd2_final)
    $intermediate $W[SHL_u32_u32_263_wire] : $int<32>
    // type_cast_295_295_delayed_1_0
    $W[type_cast_295_295_delayed_1_0_265] : $int<32>
    // 	type_cast_305_305_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 105
    // (iexec_rd1_final >> iexec_rd2_final)
    $intermediate $W[LSHR_u32_u32_269_wire] : $int<32>
    // type_cast_305_305_delayed_1_0
    $W[type_cast_305_305_delayed_1_0_271] : $int<32>
    // 	OR_u32_u32_331_331_delayed_1_0 := ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 106
    // (iexec_rd1_final == iexec_rd2_final)
    $intermediate $W[EQ_u32_u1_275_wire] : $int<1>
    // ( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  ) 
    $intermediate $W[MUX_278_wire] : $int<32>
    // (iexec_rd1_final < iexec_rd2_final)
    $intermediate $W[ULT_u32_u1_281_wire] : $int<1>
    // ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) 
    $intermediate $W[MUX_284_wire] : $int<32>
    // (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) )
    $intermediate $W[OR_u32_u32_285_wire] : $int<32>
    // (iexec_rd1_final > iexec_rd2_final)
    $intermediate $W[UGT_u32_u1_288_wire] : $int<1>
    // ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
    $intermediate $W[MUX_291_wire] : $int<32>
    // OR_u32_u32_331_331_delayed_1_0
    $W[OR_u32_u32_331_331_delayed_1_0_293] : $int<32>
    // 	$volatile exec_result_initial := ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
    //  file prog.linked.opt.aa, line 107
    // (opcode == SBIR)
    $intermediate $W[EQ_u8_u1_297_wire] : $int<1>
    // ($bitcast ($uint<32>) rs1_imm )
    $intermediate $W[type_cast_300_wire] : $int<32>
    // (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))
    $intermediate $W[OR_u32_u32_301_wire] : $int<32>
    // ( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  ) 
    $intermediate $W[MUX_303_wire] : $int<32>
    // (opcode == L_AND)
    $intermediate $W[EQ_u8_u1_306_wire] : $int<1>
    // ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_309_wire] : $int<32>
    // (( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_310_wire] : $int<32>
    // (opcode == L_OR)
    $intermediate $W[EQ_u8_u1_313_wire] : $int<1>
    // ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_316_wire] : $int<32>
    // ((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_317_wire] : $int<32>
    // (opcode == L_XNOR)
    $intermediate $W[EQ_u8_u1_320_wire] : $int<1>
    // ( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_323_wire] : $int<32>
    // (opcode == L_XOR)
    $intermediate $W[EQ_u8_u1_326_wire] : $int<1>
    // ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_329_wire] : $int<32>
    // (( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_330_wire] : $int<32>
    // (opcode == ADD)
    $intermediate $W[EQ_u8_u1_333_wire] : $int<1>
    // ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_336_wire] : $int<32>
    // ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_337_wire] : $int<32>
    // (((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) ))
    $intermediate $W[OR_u32_u32_338_wire] : $int<32>
    // (opcode == SUB)
    $intermediate $W[EQ_u8_u1_341_wire] : $int<1>
    // ( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_344_wire] : $int<32>
    // (opcode == L_SLL)
    $intermediate $W[EQ_u8_u1_347_wire] : $int<1>
    // ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_350_wire] : $int<32>
    // (( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_351_wire] : $int<32>
    // (opcode == L_SRL)
    $intermediate $W[EQ_u8_u1_354_wire] : $int<1>
    // ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_357_wire] : $int<32>
    // ((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) )
    $intermediate $W[OR_u32_u32_358_wire] : $int<32>
    // (opcode == CMP)
    $intermediate $W[EQ_u8_u1_361_wire] : $int<1>
    // ( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  ) 
    $intermediate $W[MUX_364_wire] : $int<32>
    // (opcode == CALL)
    $intermediate $W[EQ_u8_u1_367_wire] : $int<1>
    // (program_cnt + 1 )
    $intermediate $W[ADD_u10_u10_370_wire] : $int<10>
    // ($bitcast ($uint<32>) (program_cnt + 1 ) )
    $intermediate $W[type_cast_371_wire] : $int<32>
    // ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) 
    $intermediate $W[MUX_373_wire] : $int<32>
    // (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )
    $intermediate $W[OR_u32_u32_374_wire] : $int<32>
    // (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) ))
    $intermediate $W[OR_u32_u32_375_wire] : $int<32>
    // exec_result_initial
    $W[exec_result_initial_377] : $int<32>
    // 	$volatile is_SRA := ( $mux (opcode == L_SRA) one_1  zero_1 ) 
    //  file prog.linked.opt.aa, line 108
    // (opcode == L_SRA)
    $intermediate $W[EQ_u8_u1_381_wire] : $int<1>
    // is_SRA
    $W[is_SRA_385] : $int<1>
    // 	iexec_rd1_final_357_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 109
    // iexec_rd1_final_357_delayed_1_0
    $W[iexec_rd1_final_357_delayed_1_0_388] : $int<32>
    // 	iexec_rd2_final_358_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 110
    // iexec_rd2_final_358_delayed_1_0
    $W[iexec_rd2_final_358_delayed_1_0_391] : $int<32>
    // 	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
    //  file prog.linked.opt.aa, line 111
    // bottom_bits
    $W[bottom_bits_397] : $int<32>
    // 	iexec_rd1_final_364_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 112
    // iexec_rd1_final_364_delayed_1_0
    $W[iexec_rd1_final_364_delayed_1_0_400] : $int<32>
    // 	iexec_rd2_final_369_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 113
    // iexec_rd2_final_369_delayed_1_0
    $W[iexec_rd2_final_369_delayed_1_0_403] : $int<32>
    // 	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
    //  file prog.linked.opt.aa, line 114
    // (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)
    $intermediate $W[LSHR_u32_u32_409_wire] : $int<32>
    // (zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32))
    $intermediate $W[SUB_u32_u32_410_wire] : $int<32>
    // (thirty_two_32 - iexec_rd2_final_369_delayed_1_0)
    $intermediate $W[SUB_u32_u32_413_wire] : $int<32>
    // top_bits
    $W[top_bits_415] : $int<32>
    // 	$guard (is_SRA) $volatile result_for_SRA := (top_bits | bottom_bits)
    //  file prog.linked.opt.aa, line 115
    // result_for_SRA
    $W[result_for_SRA_421] : $int<32>
    // 	$volatile exec_result := ( $mux is_SRA result_for_SRA  exec_result_initial ) 
    //  file prog.linked.opt.aa, line 116
    // exec_result
    $W[exec_result_427] : $int<32>
    // 	$volatile is_rs1_neg := ( $slice iexec_rd1_final 31 31 ) 
    //  file prog.linked.opt.aa, line 117
    // is_rs1_neg
    $W[is_rs1_neg_431] : $int<1>
    // 	NOT_u1_u1_399_399_delayed_1_0 := ( ~ is_rs1_neg )// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 118
    // NOT_u1_u1_399_399_delayed_1_0
    $W[NOT_u1_u1_399_399_delayed_1_0_435] : $int<1>
    // 	is_rs1_neg_404_delayed_1_0 := is_rs1_neg// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 119
    // is_rs1_neg_404_delayed_1_0
    $W[is_rs1_neg_404_delayed_1_0_438] : $int<1>
    // 	$volatile is_Branch := (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
    //  file prog.linked.opt.aa, line 120
    // (opcode == BZ)
    $intermediate $W[EQ_u8_u1_442_wire] : $int<1>
    // ((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0)
    $intermediate $W[AND_u1_u1_444_wire] : $int<1>
    // (opcode == BN)
    $intermediate $W[EQ_u8_u1_447_wire] : $int<1>
    // ((opcode == BN) & is_rs1_neg_404_delayed_1_0)
    $intermediate $W[AND_u1_u1_449_wire] : $int<1>
    // is_Branch
    $W[is_Branch_451] : $int<1>
    // 	iexec_rd1_final_415_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 121
    // iexec_rd1_final_415_delayed_1_0
    $W[iexec_rd1_final_415_delayed_1_0_454] : $int<32>
    // 	iexec_rd2_final_418_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 122
    // iexec_rd2_final_418_delayed_1_0
    $W[iexec_rd2_final_418_delayed_1_0_457] : $int<32>
    // 	next_dcache_state := ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))// bits of buffering = 139. 
    //  file prog.linked.opt.aa, line 123
    // (opcode && rs1_imm)
    $intermediate $W[CONCAT_u8_u16_461_wire] : $int<16>
    // ((opcode && rs1_imm) && rs2)
    $intermediate $W[CONCAT_u16_u24_463_wire] : $int<24>
    // (rd && iexec_rd1_final_415_delayed_1_0)
    $intermediate $W[CONCAT_u8_u40_466_wire] : $int<40>
    // (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0))
    $intermediate $W[CONCAT_u24_u64_467_wire] : $int<64>
    // (iexec_rd2_final_418_delayed_1_0 && exec_result)
    $intermediate $W[CONCAT_u32_u64_470_wire] : $int<64>
    // (is_Branch && program_cnt)
    $intermediate $W[CONCAT_u1_u11_473_wire] : $int<11>
    // ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt))
    $intermediate $W[CONCAT_u64_u75_474_wire] : $int<75>
    // next_dcache_state
    // 	opcode := ( $slice iexec_state 105 98 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 92
    // ( $slice iexec_state 105 98 ) 
    [:] [slice_207_inst] (iexec_state 105 98) (opcode_208) 
    $buffering  $out slice_207_inst opcode_208 1
    $delay slice_207_inst 1
    // 	rs1_imm := ( $slice iexec_state 97 90 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 93
    // ( $slice iexec_state 97 90 ) 
    [:] [slice_211_inst] (iexec_state 97 90) (rs1_imm_212) 
    $buffering  $out slice_211_inst rs1_imm_212 1
    $delay slice_211_inst 1
    // 	rs2 := ( $slice iexec_state 89 82 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 94
    // ( $slice iexec_state 89 82 ) 
    [:] [slice_215_inst] (iexec_state 89 82) (rs2_216) 
    $buffering  $out slice_215_inst rs2_216 1
    $delay slice_215_inst 1
    // 	rd := ( $slice iexec_state 81 74 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 95
    // ( $slice iexec_state 81 74 ) 
    [:] [slice_219_inst] (iexec_state 81 74) (rd_220) 
    $buffering  $out slice_219_inst rd_220 1
    $delay slice_219_inst 1
    // 	program_cnt := ( $slice iexec_state 9 0 ) // bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 96
    // ( $slice iexec_state 9 0 ) 
    [:] [slice_223_inst] (iexec_state 9 0) (program_cnt_224) 
    $buffering  $out slice_223_inst program_cnt_224 1
    $delay slice_223_inst 1
    // 	AND_u32_u32_241_241_delayed_1_0 := (iexec_rd1_final & iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 97
    // (iexec_rd1_final & iexec_rd2_final)
    &[AND_u32_u32_228_inst] (iexec_rd1_final iexec_rd2_final) (AND_u32_u32_241_241_delayed_1_0_229)   
    $buffering  $out AND_u32_u32_228_inst AND_u32_u32_241_241_delayed_1_0_229 1
    $delay AND_u32_u32_228_inst 1
    // 	OR_u32_u32_250_250_delayed_1_0 := (iexec_rd1_final | iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 98
    // (iexec_rd1_final | iexec_rd2_final)
    |[OR_u32_u32_233_inst] (iexec_rd1_final iexec_rd2_final) (OR_u32_u32_250_250_delayed_1_0_234)   
    $buffering  $out OR_u32_u32_233_inst OR_u32_u32_250_250_delayed_1_0_234 1
    $delay OR_u32_u32_233_inst 1
    // 	AND_u32_u32_230_230_delayed_1_0 := (iexec_rd2_final & byte_mask_3_bytes)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 99
    // (iexec_rd2_final & byte_mask_3_bytes)
    &[AND_u32_u32_238_inst] (iexec_rd2_final R_byte_mask_3_bytes_237_wire_constant) (AND_u32_u32_230_230_delayed_1_0_239)   
    $buffering  $out AND_u32_u32_238_inst AND_u32_u32_230_230_delayed_1_0_239 1
    $delay AND_u32_u32_238_inst 1
    // 	XOR_u32_u32_259_259_delayed_1_0 := (iexec_rd1_final ~^ iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 100
    // (iexec_rd1_final ~^ iexec_rd2_final)
    ~^[XOR_u32_u32_243_inst] (iexec_rd1_final iexec_rd2_final) (XOR_u32_u32_259_259_delayed_1_0_244)   
    $buffering  $out XOR_u32_u32_243_inst XOR_u32_u32_259_259_delayed_1_0_244 1
    $delay XOR_u32_u32_243_inst 1
    // 	XOR_u32_u32_267_267_delayed_1_0 := (iexec_rd1_final ^ iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 101
    // (iexec_rd1_final ^ iexec_rd2_final)
    ^[XOR_u32_u32_248_inst] (iexec_rd1_final iexec_rd2_final) (XOR_u32_u32_267_267_delayed_1_0_249)   
    $buffering  $out XOR_u32_u32_248_inst XOR_u32_u32_267_267_delayed_1_0_249 1
    $delay XOR_u32_u32_248_inst 1
    // 	ADD_u32_u32_276_276_delayed_1_0 := (iexec_rd1_final + iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 102
    // (iexec_rd1_final + iexec_rd2_final)
    +[ADD_u32_u32_253_inst] (iexec_rd1_final iexec_rd2_final) (ADD_u32_u32_276_276_delayed_1_0_254)   
    $buffering  $out ADD_u32_u32_253_inst ADD_u32_u32_276_276_delayed_1_0_254 1
    $delay ADD_u32_u32_253_inst 1
    // 	SUB_u32_u32_286_286_delayed_1_0 := (iexec_rd1_final - iexec_rd2_final)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 103
    // (iexec_rd1_final - iexec_rd2_final)
    -[SUB_u32_u32_258_inst] (iexec_rd1_final iexec_rd2_final) (SUB_u32_u32_286_286_delayed_1_0_259)   
    $buffering  $out SUB_u32_u32_258_inst SUB_u32_u32_286_286_delayed_1_0_259 1
    $delay SUB_u32_u32_258_inst 1
    // 	type_cast_295_295_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 104
    // (iexec_rd1_final << iexec_rd2_final)
    <<[SHL_u32_u32_263_inst] (iexec_rd1_final iexec_rd2_final) (SHL_u32_u32_263_wire)   $flowthrough 
    $delay SHL_u32_u32_263_inst 0
    // ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )
    # := [type_cast_264_inst] (SHL_u32_u32_263_wire) (type_cast_295_295_delayed_1_0_265)   
    $buffering  $out type_cast_264_inst type_cast_295_295_delayed_1_0_265 1
    $delay type_cast_264_inst 1
    // 	type_cast_305_305_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 105
    // (iexec_rd1_final >> iexec_rd2_final)
    >>[LSHR_u32_u32_269_inst] (iexec_rd1_final iexec_rd2_final) (LSHR_u32_u32_269_wire)   $flowthrough 
    $delay LSHR_u32_u32_269_inst 0
    // ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )
    # := [type_cast_270_inst] (LSHR_u32_u32_269_wire) (type_cast_305_305_delayed_1_0_271)   
    $buffering  $out type_cast_270_inst type_cast_305_305_delayed_1_0_271 1
    $delay type_cast_270_inst 1
    // 	OR_u32_u32_331_331_delayed_1_0 := ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 106
    // (iexec_rd1_final == iexec_rd2_final)
    ==[EQ_u32_u1_275_inst] (iexec_rd1_final iexec_rd2_final) (EQ_u32_u1_275_wire)   $flowthrough 
    $delay EQ_u32_u1_275_inst 0
    // ( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  ) 
    ? [MUX_278_inst] (EQ_u32_u1_275_wire R_zero_32_276_wire_constant konst_277_wire_constant) (MUX_278_wire)  $flowthrough
    // (iexec_rd1_final < iexec_rd2_final)
    <[ULT_u32_u1_281_inst] (iexec_rd1_final iexec_rd2_final) (ULT_u32_u1_281_wire)   $flowthrough 
    $delay ULT_u32_u1_281_inst 0
    // ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) 
    ? [MUX_284_inst] (ULT_u32_u1_281_wire R_minus_1_282_wire_constant konst_283_wire_constant) (MUX_284_wire)  $flowthrough
    // (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) )
    |[OR_u32_u32_285_inst] (MUX_278_wire MUX_284_wire) (OR_u32_u32_285_wire)   $flowthrough 
    $delay OR_u32_u32_285_inst 0
    // (iexec_rd1_final > iexec_rd2_final)
    >[UGT_u32_u1_288_inst] (iexec_rd1_final iexec_rd2_final) (UGT_u32_u1_288_wire)   $flowthrough 
    $delay UGT_u32_u1_288_inst 0
    // ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
    ? [MUX_291_inst] (UGT_u32_u1_288_wire R_one_32_289_wire_constant konst_290_wire_constant) (MUX_291_wire)  $flowthrough
    // ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )
    |[OR_u32_u32_292_inst] (OR_u32_u32_285_wire MUX_291_wire) (OR_u32_u32_331_331_delayed_1_0_293)   
    $buffering  $out OR_u32_u32_292_inst OR_u32_u32_331_331_delayed_1_0_293 1
    $delay OR_u32_u32_292_inst 1
    // 	$volatile exec_result_initial := ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
    //  file prog.linked.opt.aa, line 107
    // (opcode == SBIR)
    ==[EQ_u8_u1_297_inst] (opcode_208 R_SBIR_296_wire_constant) (EQ_u8_u1_297_wire)   $flowthrough 
    $delay EQ_u8_u1_297_inst 0
    // ($bitcast ($uint<32>) rs1_imm )
    # := [type_cast_300_inst] (rs1_imm_212) (type_cast_300_wire)   $flowthrough
    $delay type_cast_300_inst 0
    // (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))
    |[OR_u32_u32_301_inst] (AND_u32_u32_230_230_delayed_1_0_239 type_cast_300_wire) (OR_u32_u32_301_wire)   $flowthrough 
    $delay OR_u32_u32_301_inst 0
    // ( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  ) 
    ? [MUX_303_inst] (EQ_u8_u1_297_wire OR_u32_u32_301_wire konst_302_wire_constant) (MUX_303_wire)  $flowthrough
    // (opcode == L_AND)
    ==[EQ_u8_u1_306_inst] (opcode_208 R_L_AND_305_wire_constant) (EQ_u8_u1_306_wire)   $flowthrough 
    $delay EQ_u8_u1_306_inst 0
    // ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) 
    ? [MUX_309_inst] (EQ_u8_u1_306_wire AND_u32_u32_241_241_delayed_1_0_229 konst_308_wire_constant) (MUX_309_wire)  $flowthrough
    // (( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) )
    |[OR_u32_u32_310_inst] (MUX_303_wire MUX_309_wire) (OR_u32_u32_310_wire)   $flowthrough 
    $delay OR_u32_u32_310_inst 0
    // (opcode == L_OR)
    ==[EQ_u8_u1_313_inst] (opcode_208 R_L_OR_312_wire_constant) (EQ_u8_u1_313_wire)   $flowthrough 
    $delay EQ_u8_u1_313_inst 0
    // ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) 
    ? [MUX_316_inst] (EQ_u8_u1_313_wire OR_u32_u32_250_250_delayed_1_0_234 konst_315_wire_constant) (MUX_316_wire)  $flowthrough
    // ((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) )
    |[OR_u32_u32_317_inst] (OR_u32_u32_310_wire MUX_316_wire) (OR_u32_u32_317_wire)   $flowthrough 
    $delay OR_u32_u32_317_inst 0
    // (opcode == L_XNOR)
    ==[EQ_u8_u1_320_inst] (opcode_208 R_L_XNOR_319_wire_constant) (EQ_u8_u1_320_wire)   $flowthrough 
    $delay EQ_u8_u1_320_inst 0
    // ( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  ) 
    ? [MUX_323_inst] (EQ_u8_u1_320_wire XOR_u32_u32_259_259_delayed_1_0_244 konst_322_wire_constant) (MUX_323_wire)  $flowthrough
    // (opcode == L_XOR)
    ==[EQ_u8_u1_326_inst] (opcode_208 R_L_XOR_325_wire_constant) (EQ_u8_u1_326_wire)   $flowthrough 
    $delay EQ_u8_u1_326_inst 0
    // ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) 
    ? [MUX_329_inst] (EQ_u8_u1_326_wire XOR_u32_u32_267_267_delayed_1_0_249 konst_328_wire_constant) (MUX_329_wire)  $flowthrough
    // (( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) )
    |[OR_u32_u32_330_inst] (MUX_323_wire MUX_329_wire) (OR_u32_u32_330_wire)   $flowthrough 
    $delay OR_u32_u32_330_inst 0
    // (opcode == ADD)
    ==[EQ_u8_u1_333_inst] (opcode_208 R_ADD_332_wire_constant) (EQ_u8_u1_333_wire)   $flowthrough 
    $delay EQ_u8_u1_333_inst 0
    // ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) 
    ? [MUX_336_inst] (EQ_u8_u1_333_wire ADD_u32_u32_276_276_delayed_1_0_254 konst_335_wire_constant) (MUX_336_wire)  $flowthrough
    // ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )
    |[OR_u32_u32_337_inst] (OR_u32_u32_330_wire MUX_336_wire) (OR_u32_u32_337_wire)   $flowthrough 
    $delay OR_u32_u32_337_inst 0
    // (((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) ))
    |[OR_u32_u32_338_inst] (OR_u32_u32_317_wire OR_u32_u32_337_wire) (OR_u32_u32_338_wire)   $flowthrough 
    $delay OR_u32_u32_338_inst 0
    // (opcode == SUB)
    ==[EQ_u8_u1_341_inst] (opcode_208 R_SUB_340_wire_constant) (EQ_u8_u1_341_wire)   $flowthrough 
    $delay EQ_u8_u1_341_inst 0
    // ( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  ) 
    ? [MUX_344_inst] (EQ_u8_u1_341_wire SUB_u32_u32_286_286_delayed_1_0_259 konst_343_wire_constant) (MUX_344_wire)  $flowthrough
    // (opcode == L_SLL)
    ==[EQ_u8_u1_347_inst] (opcode_208 R_L_SLL_346_wire_constant) (EQ_u8_u1_347_wire)   $flowthrough 
    $delay EQ_u8_u1_347_inst 0
    // ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) 
    ? [MUX_350_inst] (EQ_u8_u1_347_wire type_cast_295_295_delayed_1_0_265 konst_349_wire_constant) (MUX_350_wire)  $flowthrough
    // (( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) )
    |[OR_u32_u32_351_inst] (MUX_344_wire MUX_350_wire) (OR_u32_u32_351_wire)   $flowthrough 
    $delay OR_u32_u32_351_inst 0
    // (opcode == L_SRL)
    ==[EQ_u8_u1_354_inst] (opcode_208 R_L_SRL_353_wire_constant) (EQ_u8_u1_354_wire)   $flowthrough 
    $delay EQ_u8_u1_354_inst 0
    // ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) 
    ? [MUX_357_inst] (EQ_u8_u1_354_wire type_cast_305_305_delayed_1_0_271 konst_356_wire_constant) (MUX_357_wire)  $flowthrough
    // ((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) )
    |[OR_u32_u32_358_inst] (OR_u32_u32_351_wire MUX_357_wire) (OR_u32_u32_358_wire)   $flowthrough 
    $delay OR_u32_u32_358_inst 0
    // (opcode == CMP)
    ==[EQ_u8_u1_361_inst] (opcode_208 R_CMP_360_wire_constant) (EQ_u8_u1_361_wire)   $flowthrough 
    $delay EQ_u8_u1_361_inst 0
    // ( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  ) 
    ? [MUX_364_inst] (EQ_u8_u1_361_wire OR_u32_u32_331_331_delayed_1_0_293 konst_363_wire_constant) (MUX_364_wire)  $flowthrough
    // (opcode == CALL)
    ==[EQ_u8_u1_367_inst] (opcode_208 R_CALL_366_wire_constant) (EQ_u8_u1_367_wire)   $flowthrough 
    $delay EQ_u8_u1_367_inst 0
    // (program_cnt + 1 )
    +[ADD_u10_u10_370_inst] (program_cnt_224 konst_369_wire_constant) (ADD_u10_u10_370_wire)   $flowthrough 
    $delay ADD_u10_u10_370_inst 0
    // ($bitcast ($uint<32>) (program_cnt + 1 ) )
    # := [type_cast_371_inst] (ADD_u10_u10_370_wire) (type_cast_371_wire)   $flowthrough
    $delay type_cast_371_inst 0
    // ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) 
    ? [MUX_373_inst] (EQ_u8_u1_367_wire type_cast_371_wire konst_372_wire_constant) (MUX_373_wire)  $flowthrough
    // (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )
    |[OR_u32_u32_374_inst] (MUX_364_wire MUX_373_wire) (OR_u32_u32_374_wire)   $flowthrough 
    $delay OR_u32_u32_374_inst 0
    // (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) ))
    |[OR_u32_u32_375_inst] (OR_u32_u32_358_wire OR_u32_u32_374_wire) (OR_u32_u32_375_wire)   $flowthrough 
    $delay OR_u32_u32_375_inst 0
    // ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
    |[OR_u32_u32_376_inst] (OR_u32_u32_338_wire OR_u32_u32_375_wire) (exec_result_initial_377)   $flowthrough 
    $delay OR_u32_u32_376_inst 0
    // 	$volatile is_SRA := ( $mux (opcode == L_SRA) one_1  zero_1 ) 
    //  file prog.linked.opt.aa, line 108
    // (opcode == L_SRA)
    ==[EQ_u8_u1_381_inst] (opcode_208 R_L_SRA_380_wire_constant) (EQ_u8_u1_381_wire)   $flowthrough 
    $delay EQ_u8_u1_381_inst 0
    // ( $mux (opcode == L_SRA) one_1  zero_1 ) 
    ? [MUX_384_inst] (EQ_u8_u1_381_wire R_one_1_382_wire_constant R_zero_1_383_wire_constant) (is_SRA_385)  $flowthrough
    // 	iexec_rd1_final_357_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 109
    # := [W_iexec_rd1_final_357_delayed_1_0_386_inst] (iexec_rd1_final) (iexec_rd1_final_357_delayed_1_0_388)   
    // 	iexec_rd2_final_358_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 110
    # := [W_iexec_rd2_final_358_delayed_1_0_389_inst] (iexec_rd2_final) (iexec_rd2_final_358_delayed_1_0_391)   
    // 	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
    //  file prog.linked.opt.aa, line 111
    // (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
    >>[LSHR_u32_u32_396_inst] (iexec_rd1_final_357_delayed_1_0_388 iexec_rd2_final_358_delayed_1_0_391) (bottom_bits_397) $guard ( is_SRA_385 )   $flowthrough 
    $delay LSHR_u32_u32_396_inst 0
    // 	iexec_rd1_final_364_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 112
    # := [W_iexec_rd1_final_364_delayed_1_0_398_inst] (iexec_rd1_final) (iexec_rd1_final_364_delayed_1_0_400)   
    // 	iexec_rd2_final_369_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 113
    # := [W_iexec_rd2_final_369_delayed_1_0_401_inst] (iexec_rd2_final) (iexec_rd2_final_369_delayed_1_0_403)   
    // 	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
    //  file prog.linked.opt.aa, line 114
    // (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)
    >>[LSHR_u32_u32_409_inst] (iexec_rd1_final_364_delayed_1_0_400 R_thirty_one_32_408_wire_constant) (LSHR_u32_u32_409_wire) $guard ( is_SRA_385 )   $flowthrough 
    $delay LSHR_u32_u32_409_inst 0
    // (zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32))
    -[SUB_u32_u32_410_inst] (R_zero_32_406_wire_constant LSHR_u32_u32_409_wire) (SUB_u32_u32_410_wire) $guard ( is_SRA_385 )   $flowthrough 
    $delay SUB_u32_u32_410_inst 0
    // (thirty_two_32 - iexec_rd2_final_369_delayed_1_0)
    -[SUB_u32_u32_413_inst] (R_thirty_two_32_411_wire_constant iexec_rd2_final_369_delayed_1_0_403) (SUB_u32_u32_413_wire) $guard ( is_SRA_385 )   $flowthrough 
    $delay SUB_u32_u32_413_inst 0
    // ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
    <<[SHL_u32_u32_414_inst] (SUB_u32_u32_410_wire SUB_u32_u32_413_wire) (top_bits_415) $guard ( is_SRA_385 )   $flowthrough 
    $delay SHL_u32_u32_414_inst 0
    // 	$guard (is_SRA) $volatile result_for_SRA := (top_bits | bottom_bits)
    //  file prog.linked.opt.aa, line 115
    // (top_bits | bottom_bits)
    |[OR_u32_u32_420_inst] (top_bits_415 bottom_bits_397) (result_for_SRA_421) $guard ( is_SRA_385 )   $flowthrough 
    $delay OR_u32_u32_420_inst 0
    // 	$volatile exec_result := ( $mux is_SRA result_for_SRA  exec_result_initial ) 
    //  file prog.linked.opt.aa, line 116
    // ( $mux is_SRA result_for_SRA  exec_result_initial ) 
    ? [MUX_426_inst] (is_SRA_385 result_for_SRA_421 exec_result_initial_377) (exec_result_427)  $flowthrough
    // 	$volatile is_rs1_neg := ( $slice iexec_rd1_final 31 31 ) 
    //  file prog.linked.opt.aa, line 117
    // ( $slice iexec_rd1_final 31 31 ) 
    [:] [slice_430_inst] (iexec_rd1_final 31 31) (is_rs1_neg_431)  $flowthrough
    $delay slice_430_inst 0
    // 	NOT_u1_u1_399_399_delayed_1_0 := ( ~ is_rs1_neg )// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 118
    // ( ~ is_rs1_neg )
    ~ [NOT_u1_u1_434_inst] (is_rs1_neg_431) (NOT_u1_u1_399_399_delayed_1_0_435)  
    $buffering  $out NOT_u1_u1_434_inst NOT_u1_u1_399_399_delayed_1_0_435 1
    $delay NOT_u1_u1_434_inst 1
    // 	is_rs1_neg_404_delayed_1_0 := is_rs1_neg// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 119
    # := [W_is_rs1_neg_404_delayed_1_0_436_inst] (is_rs1_neg_431) (is_rs1_neg_404_delayed_1_0_438)   
    // 	$volatile is_Branch := (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
    //  file prog.linked.opt.aa, line 120
    // (opcode == BZ)
    ==[EQ_u8_u1_442_inst] (opcode_208 R_BZ_441_wire_constant) (EQ_u8_u1_442_wire)   $flowthrough 
    $delay EQ_u8_u1_442_inst 0
    // ((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0)
    &[AND_u1_u1_444_inst] (EQ_u8_u1_442_wire NOT_u1_u1_399_399_delayed_1_0_435) (AND_u1_u1_444_wire)   $flowthrough 
    $delay AND_u1_u1_444_inst 0
    // (opcode == BN)
    ==[EQ_u8_u1_447_inst] (opcode_208 R_BN_446_wire_constant) (EQ_u8_u1_447_wire)   $flowthrough 
    $delay EQ_u8_u1_447_inst 0
    // ((opcode == BN) & is_rs1_neg_404_delayed_1_0)
    &[AND_u1_u1_449_inst] (EQ_u8_u1_447_wire is_rs1_neg_404_delayed_1_0_438) (AND_u1_u1_449_wire)   $flowthrough 
    $delay AND_u1_u1_449_inst 0
    // (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
    |[OR_u1_u1_450_inst] (AND_u1_u1_444_wire AND_u1_u1_449_wire) (is_Branch_451)   $flowthrough 
    $delay OR_u1_u1_450_inst 0
    // 	iexec_rd1_final_415_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 121
    # := [W_iexec_rd1_final_415_delayed_1_0_452_inst] (iexec_rd1_final) (iexec_rd1_final_415_delayed_1_0_454)   
    // 	iexec_rd2_final_418_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 122
    # := [W_iexec_rd2_final_418_delayed_1_0_455_inst] (iexec_rd2_final) (iexec_rd2_final_418_delayed_1_0_457)   
    // 	next_dcache_state := ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))// bits of buffering = 139. 
    //  file prog.linked.opt.aa, line 123
    // (opcode && rs1_imm)
    &&[CONCAT_u8_u16_461_inst] (opcode_208 rs1_imm_212) (CONCAT_u8_u16_461_wire)   $flowthrough 
    $delay CONCAT_u8_u16_461_inst 0
    // ((opcode && rs1_imm) && rs2)
    &&[CONCAT_u16_u24_463_inst] (CONCAT_u8_u16_461_wire rs2_216) (CONCAT_u16_u24_463_wire)   $flowthrough 
    $delay CONCAT_u16_u24_463_inst 0
    // (rd && iexec_rd1_final_415_delayed_1_0)
    &&[CONCAT_u8_u40_466_inst] (rd_220 iexec_rd1_final_415_delayed_1_0_454) (CONCAT_u8_u40_466_wire)   $flowthrough 
    $delay CONCAT_u8_u40_466_inst 0
    // (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0))
    &&[CONCAT_u24_u64_467_inst] (CONCAT_u16_u24_463_wire CONCAT_u8_u40_466_wire) (CONCAT_u24_u64_467_wire)   $flowthrough 
    $delay CONCAT_u24_u64_467_inst 0
    // (iexec_rd2_final_418_delayed_1_0 && exec_result)
    &&[CONCAT_u32_u64_470_inst] (iexec_rd2_final_418_delayed_1_0_457 exec_result_427) (CONCAT_u32_u64_470_wire)   $flowthrough 
    $delay CONCAT_u32_u64_470_inst 0
    // (is_Branch && program_cnt)
    &&[CONCAT_u1_u11_473_inst] (is_Branch_451 program_cnt_224) (CONCAT_u1_u11_473_wire)   $flowthrough 
    $delay CONCAT_u1_u11_473_inst 0
    // ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt))
    &&[CONCAT_u64_u75_474_inst] (CONCAT_u32_u64_470_wire CONCAT_u1_u11_473_wire) (CONCAT_u64_u75_474_wire)   $flowthrough 
    $delay CONCAT_u64_u75_474_inst 0
    // ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))
    &&[CONCAT_u64_u139_475_inst] (CONCAT_u24_u64_467_wire CONCAT_u64_u75_474_wire) (next_dcache_state)   
    $buffering  $out CONCAT_u64_u139_475_inst next_dcache_state 1
    $delay CONCAT_u64_u139_475_inst 1
  }
  // end data-path
  // 	opcode := ( $slice iexec_state 105 98 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 92
  // iexec_state
  // ( $slice iexec_state 105 98 ) 
  slice_207_inst <=> (assign_stmt_208_to_assign_stmt_476/slice_207_Sample/rr assign_stmt_208_to_assign_stmt_476/slice_207_Update/cr) (assign_stmt_208_to_assign_stmt_476/slice_207_Sample/ra assign_stmt_208_to_assign_stmt_476/slice_207_Update/ca)
  // 	rs1_imm := ( $slice iexec_state 97 90 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 93
  // iexec_state
  // ( $slice iexec_state 97 90 ) 
  slice_211_inst <=> (assign_stmt_208_to_assign_stmt_476/slice_211_Sample/rr assign_stmt_208_to_assign_stmt_476/slice_211_Update/cr) (assign_stmt_208_to_assign_stmt_476/slice_211_Sample/ra assign_stmt_208_to_assign_stmt_476/slice_211_Update/ca)
  // 	rs2 := ( $slice iexec_state 89 82 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 94
  // iexec_state
  // ( $slice iexec_state 89 82 ) 
  slice_215_inst <=> (assign_stmt_208_to_assign_stmt_476/slice_215_Sample/rr assign_stmt_208_to_assign_stmt_476/slice_215_Update/cr) (assign_stmt_208_to_assign_stmt_476/slice_215_Sample/ra assign_stmt_208_to_assign_stmt_476/slice_215_Update/ca)
  // 	rd := ( $slice iexec_state 81 74 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 95
  // iexec_state
  // ( $slice iexec_state 81 74 ) 
  slice_219_inst <=> (assign_stmt_208_to_assign_stmt_476/slice_219_Sample/rr assign_stmt_208_to_assign_stmt_476/slice_219_Update/cr) (assign_stmt_208_to_assign_stmt_476/slice_219_Sample/ra assign_stmt_208_to_assign_stmt_476/slice_219_Update/ca)
  // 	program_cnt := ( $slice iexec_state 9 0 ) // bits of buffering = 10. 
  //  file prog.linked.opt.aa, line 96
  // iexec_state
  // ( $slice iexec_state 9 0 ) 
  slice_223_inst <=> (assign_stmt_208_to_assign_stmt_476/slice_223_Sample/rr assign_stmt_208_to_assign_stmt_476/slice_223_Update/cr) (assign_stmt_208_to_assign_stmt_476/slice_223_Sample/ra assign_stmt_208_to_assign_stmt_476/slice_223_Update/ca)
  // 	AND_u32_u32_241_241_delayed_1_0 := (iexec_rd1_final & iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 97
  // (iexec_rd1_final & iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  AND_u32_u32_228_inst <=> (assign_stmt_208_to_assign_stmt_476/AND_u32_u32_228_Sample/rr assign_stmt_208_to_assign_stmt_476/AND_u32_u32_228_Update/cr) (assign_stmt_208_to_assign_stmt_476/AND_u32_u32_228_Sample/ra assign_stmt_208_to_assign_stmt_476/AND_u32_u32_228_Update/ca)
  // 	OR_u32_u32_250_250_delayed_1_0 := (iexec_rd1_final | iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 98
  // (iexec_rd1_final | iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  OR_u32_u32_233_inst <=> (assign_stmt_208_to_assign_stmt_476/OR_u32_u32_233_Sample/rr assign_stmt_208_to_assign_stmt_476/OR_u32_u32_233_Update/cr) (assign_stmt_208_to_assign_stmt_476/OR_u32_u32_233_Sample/ra assign_stmt_208_to_assign_stmt_476/OR_u32_u32_233_Update/ca)
  // 	AND_u32_u32_230_230_delayed_1_0 := (iexec_rd2_final & byte_mask_3_bytes)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 99
  // (iexec_rd2_final & byte_mask_3_bytes)
  // iexec_rd2_final
  AND_u32_u32_238_inst <=> (assign_stmt_208_to_assign_stmt_476/AND_u32_u32_238_Sample/rr assign_stmt_208_to_assign_stmt_476/AND_u32_u32_238_Update/cr) (assign_stmt_208_to_assign_stmt_476/AND_u32_u32_238_Sample/ra assign_stmt_208_to_assign_stmt_476/AND_u32_u32_238_Update/ca)
  // 	XOR_u32_u32_259_259_delayed_1_0 := (iexec_rd1_final ~^ iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 100
  // (iexec_rd1_final ~^ iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  XOR_u32_u32_243_inst <=> (assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_243_Sample/rr assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_243_Update/cr) (assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_243_Sample/ra assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_243_Update/ca)
  // 	XOR_u32_u32_267_267_delayed_1_0 := (iexec_rd1_final ^ iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 101
  // (iexec_rd1_final ^ iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  XOR_u32_u32_248_inst <=> (assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_248_Sample/rr assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_248_Update/cr) (assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_248_Sample/ra assign_stmt_208_to_assign_stmt_476/XOR_u32_u32_248_Update/ca)
  // 	ADD_u32_u32_276_276_delayed_1_0 := (iexec_rd1_final + iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 102
  // (iexec_rd1_final + iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  ADD_u32_u32_253_inst <=> (assign_stmt_208_to_assign_stmt_476/ADD_u32_u32_253_Sample/rr assign_stmt_208_to_assign_stmt_476/ADD_u32_u32_253_Update/cr) (assign_stmt_208_to_assign_stmt_476/ADD_u32_u32_253_Sample/ra assign_stmt_208_to_assign_stmt_476/ADD_u32_u32_253_Update/ca)
  // 	SUB_u32_u32_286_286_delayed_1_0 := (iexec_rd1_final - iexec_rd2_final)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 103
  // (iexec_rd1_final - iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  SUB_u32_u32_258_inst <=> (assign_stmt_208_to_assign_stmt_476/SUB_u32_u32_258_Sample/rr assign_stmt_208_to_assign_stmt_476/SUB_u32_u32_258_Update/cr) (assign_stmt_208_to_assign_stmt_476/SUB_u32_u32_258_Sample/ra assign_stmt_208_to_assign_stmt_476/SUB_u32_u32_258_Update/ca)
  // 	type_cast_295_295_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 104
  // (iexec_rd1_final << iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  // ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final) )
  type_cast_264_inst <=> (assign_stmt_208_to_assign_stmt_476/type_cast_264_Sample/rr assign_stmt_208_to_assign_stmt_476/type_cast_264_Update/cr) (assign_stmt_208_to_assign_stmt_476/type_cast_264_Sample/ra assign_stmt_208_to_assign_stmt_476/type_cast_264_Update/ca)
  // 	type_cast_305_305_delayed_1_0 := ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 105
  // (iexec_rd1_final >> iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  // ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final) )
  type_cast_270_inst <=> (assign_stmt_208_to_assign_stmt_476/type_cast_270_Sample/rr assign_stmt_208_to_assign_stmt_476/type_cast_270_Update/cr) (assign_stmt_208_to_assign_stmt_476/type_cast_270_Sample/ra assign_stmt_208_to_assign_stmt_476/type_cast_270_Update/ca)
  // 	OR_u32_u32_331_331_delayed_1_0 := ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 106
  // ((( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) ) | ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) )
  // (( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  )  | ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) )
  // (iexec_rd1_final == iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  // ( $mux (iexec_rd1_final == iexec_rd2_final) zero_32  _b0  ) 
  // (iexec_rd1_final < iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  // ( $mux (iexec_rd1_final < iexec_rd2_final) minus_1  _b0  ) 
  // (iexec_rd1_final > iexec_rd2_final)
  // iexec_rd1_final
  // iexec_rd2_final
  // ( $mux (iexec_rd1_final > iexec_rd2_final) one_32  _b0  ) 
  OR_u32_u32_292_inst <=> (assign_stmt_208_to_assign_stmt_476/OR_u32_u32_292_Sample/rr assign_stmt_208_to_assign_stmt_476/OR_u32_u32_292_Update/cr) (assign_stmt_208_to_assign_stmt_476/OR_u32_u32_292_Sample/ra assign_stmt_208_to_assign_stmt_476/OR_u32_u32_292_Update/ca)
  // 	$volatile exec_result_initial := ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
  //  file prog.linked.opt.aa, line 107
  // ((((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )) | (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )))
  // (((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) ) | ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) ))
  // ((( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) )
  // (( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  )  | ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) )
  // (opcode == SBIR)
  // opcode
  // (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))
  // AND_u32_u32_230_230_delayed_1_0
  // rs1_imm
  // ( $mux (opcode == SBIR) (AND_u32_u32_230_230_delayed_1_0 | ($bitcast ($uint<32>) rs1_imm ))  _b0  ) 
  // (opcode == L_AND)
  // opcode
  // AND_u32_u32_241_241_delayed_1_0
  // ( $mux (opcode == L_AND) AND_u32_u32_241_241_delayed_1_0  _b0  ) 
  // (opcode == L_OR)
  // opcode
  // OR_u32_u32_250_250_delayed_1_0
  // ( $mux (opcode == L_OR) OR_u32_u32_250_250_delayed_1_0  _b0  ) 
  // ((( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) ) | ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) )
  // (( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  )  | ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) )
  // (opcode == L_XNOR)
  // opcode
  // XOR_u32_u32_259_259_delayed_1_0
  // ( $mux (opcode == L_XNOR) XOR_u32_u32_259_259_delayed_1_0  _b0  ) 
  // (opcode == L_XOR)
  // opcode
  // XOR_u32_u32_267_267_delayed_1_0
  // ( $mux (opcode == L_XOR) XOR_u32_u32_267_267_delayed_1_0  _b0  ) 
  // (opcode == ADD)
  // opcode
  // ADD_u32_u32_276_276_delayed_1_0
  // ( $mux (opcode == ADD) ADD_u32_u32_276_276_delayed_1_0  _b0  ) 
  // (((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) ) | (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) ))
  // ((( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) ) | ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) )
  // (( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  )  | ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) )
  // (opcode == SUB)
  // opcode
  // SUB_u32_u32_286_286_delayed_1_0
  // ( $mux (opcode == SUB) SUB_u32_u32_286_286_delayed_1_0  _b0  ) 
  // (opcode == L_SLL)
  // opcode
  // type_cast_295_295_delayed_1_0
  // ( $mux (opcode == L_SLL) type_cast_295_295_delayed_1_0  _b0  ) 
  // (opcode == L_SRL)
  // opcode
  // type_cast_305_305_delayed_1_0
  // ( $mux (opcode == L_SRL) type_cast_305_305_delayed_1_0  _b0  ) 
  // (( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  )  | ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) )
  // (opcode == CMP)
  // opcode
  // OR_u32_u32_331_331_delayed_1_0
  // ( $mux (opcode == CMP) OR_u32_u32_331_331_delayed_1_0  _b0  ) 
  // (opcode == CALL)
  // opcode
  // (program_cnt + 1 )
  // program_cnt
  // ( $mux (opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1 ) )  _b0  ) 
  // 	$volatile is_SRA := ( $mux (opcode == L_SRA) one_1  zero_1 ) 
  //  file prog.linked.opt.aa, line 108
  // (opcode == L_SRA)
  // opcode
  // ( $mux (opcode == L_SRA) one_1  zero_1 ) 
  // 	iexec_rd1_final_357_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 109
  // iexec_rd1_final
  W_iexec_rd1_final_357_delayed_1_0_386_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_388_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_388_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_388_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_388_Update/ack)
  // 	iexec_rd2_final_358_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 110
  // iexec_rd2_final
  W_iexec_rd2_final_358_delayed_1_0_389_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_391_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_391_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_391_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_391_Update/ack)
  // 	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
  //  file prog.linked.opt.aa, line 111
  // (iexec_rd1_final_357_delayed_1_0 >> iexec_rd2_final_358_delayed_1_0)
  // iexec_rd1_final_357_delayed_1_0
  // iexec_rd2_final_358_delayed_1_0
  // 	iexec_rd1_final_364_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 112
  // iexec_rd1_final
  W_iexec_rd1_final_364_delayed_1_0_398_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_400_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_400_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_400_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_400_Update/ack)
  // 	iexec_rd2_final_369_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 113
  // iexec_rd2_final
  W_iexec_rd2_final_369_delayed_1_0_401_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_403_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_403_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_403_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_403_Update/ack)
  // 	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
  //  file prog.linked.opt.aa, line 114
  // ((zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final_369_delayed_1_0))
  // (zero_32 - (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32))
  // (iexec_rd1_final_364_delayed_1_0 >> thirty_one_32)
  // iexec_rd1_final_364_delayed_1_0
  // (thirty_two_32 - iexec_rd2_final_369_delayed_1_0)
  // iexec_rd2_final_369_delayed_1_0
  // 	$guard (is_SRA) $volatile result_for_SRA := (top_bits | bottom_bits)
  //  file prog.linked.opt.aa, line 115
  // (top_bits | bottom_bits)
  // top_bits
  // bottom_bits
  // 	$volatile exec_result := ( $mux is_SRA result_for_SRA  exec_result_initial ) 
  //  file prog.linked.opt.aa, line 116
  // is_SRA
  // result_for_SRA
  // exec_result_initial
  // ( $mux is_SRA result_for_SRA  exec_result_initial ) 
  // 	$volatile is_rs1_neg := ( $slice iexec_rd1_final 31 31 ) 
  //  file prog.linked.opt.aa, line 117
  // iexec_rd1_final
  // 	NOT_u1_u1_399_399_delayed_1_0 := ( ~ is_rs1_neg )// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 118
  // is_rs1_neg
  // ( ~ is_rs1_neg )
  NOT_u1_u1_434_inst <=> (assign_stmt_208_to_assign_stmt_476/NOT_u1_u1_434_Sample/rr assign_stmt_208_to_assign_stmt_476/NOT_u1_u1_434_Update/cr) (assign_stmt_208_to_assign_stmt_476/NOT_u1_u1_434_Sample/ra assign_stmt_208_to_assign_stmt_476/NOT_u1_u1_434_Update/ca)
  // 	is_rs1_neg_404_delayed_1_0 := is_rs1_neg// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 119
  // is_rs1_neg
  W_is_rs1_neg_404_delayed_1_0_436_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_438_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_438_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_438_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_438_Update/ack)
  // 	$volatile is_Branch := (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
  //  file prog.linked.opt.aa, line 120
  // (((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0) | ((opcode == BN) & is_rs1_neg_404_delayed_1_0))
  // ((opcode == BZ) & NOT_u1_u1_399_399_delayed_1_0)
  // (opcode == BZ)
  // opcode
  // NOT_u1_u1_399_399_delayed_1_0
  // ((opcode == BN) & is_rs1_neg_404_delayed_1_0)
  // (opcode == BN)
  // opcode
  // is_rs1_neg_404_delayed_1_0
  // 	iexec_rd1_final_415_delayed_1_0 := iexec_rd1_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 121
  // iexec_rd1_final
  W_iexec_rd1_final_415_delayed_1_0_452_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_454_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_454_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_454_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_454_Update/ack)
  // 	iexec_rd2_final_418_delayed_1_0 := iexec_rd2_final// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 122
  // iexec_rd2_final
  W_iexec_rd2_final_418_delayed_1_0_455_inst <=> (assign_stmt_208_to_assign_stmt_476/assign_stmt_457_Sample/req assign_stmt_208_to_assign_stmt_476/assign_stmt_457_Update/req) (assign_stmt_208_to_assign_stmt_476/assign_stmt_457_Sample/ack assign_stmt_208_to_assign_stmt_476/assign_stmt_457_Update/ack)
  // 	next_dcache_state := ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))// bits of buffering = 139. 
  //  file prog.linked.opt.aa, line 123
  // ((((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0)) && ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt)))
  // (((opcode && rs1_imm) && rs2) && (rd && iexec_rd1_final_415_delayed_1_0))
  // ((opcode && rs1_imm) && rs2)
  // (opcode && rs1_imm)
  // opcode
  // rs1_imm
  // rs2
  // (rd && iexec_rd1_final_415_delayed_1_0)
  // rd
  // iexec_rd1_final_415_delayed_1_0
  // ((iexec_rd2_final_418_delayed_1_0 && exec_result) && (is_Branch && program_cnt))
  // (iexec_rd2_final_418_delayed_1_0 && exec_result)
  // iexec_rd2_final_418_delayed_1_0
  // exec_result
  // (is_Branch && program_cnt)
  // is_Branch
  // program_cnt
  CONCAT_u64_u139_475_inst <=> (assign_stmt_208_to_assign_stmt_476/CONCAT_u64_u139_475_Sample/rr assign_stmt_208_to_assign_stmt_476/CONCAT_u64_u139_475_Update/cr) (assign_stmt_208_to_assign_stmt_476/CONCAT_u64_u139_475_Sample/ra assign_stmt_208_to_assign_stmt_476/CONCAT_u64_u139_475_Update/ca)
  $attribute delay => "4"
}
$module [memAccessDaemon] 
{
  // pipe-declarations for block %memAccessDaemon
  //  file prog.linked.opt.aa, line 126
  // pipe-declarations for block %memAccessDaemon%loop
  //  file prog.linked.opt.aa, line 131
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_479] // Branch Block  file prog.linked.opt.aa, line 131
    {
      $P [branch_block_stmt_479__entry__]
      branch_block_stmt_479__entry__ <-| ($entry)
      $P [branch_block_stmt_479__exit__]
      branch_block_stmt_479__exit__ |-> ($exit)
      $P [do_while_stmt_480__entry__] 
      $P [do_while_stmt_480__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 133
      <o> [do_while_stmt_480]  $depth 20 $buffering 2 
      {
        $P[do_while_stmt_480__entry__] 
        $P[do_while_stmt_480__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_480_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			cmd_1 := accessMem_request// bits of buffering = 64. 
          //  file prog.linked.opt.aa, line 137
          // Source expression
          // accessMem_request
          $T[RPIPE_accessMem_request_483_sample_start_] 
          $T[RPIPE_accessMem_request_483_sample_completed_] 
          $T[RPIPE_accessMem_request_483_update_start_] 
          $T[RPIPE_accessMem_request_483_update_completed_] 
          ;;[RPIPE_accessMem_request_483_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_accessMem_request_483_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_accessMem_request_483_sample_start_ &-> (RPIPE_accessMem_request_483_Sample)
          RPIPE_accessMem_request_483_sample_completed_ <-& (RPIPE_accessMem_request_483_Sample)
          RPIPE_accessMem_request_483_update_start_ <-& (RPIPE_accessMem_request_483_sample_completed_)
          RPIPE_accessMem_request_483_update_start_ &-> (RPIPE_accessMem_request_483_Update)
          RPIPE_accessMem_request_483_update_completed_ <-& (RPIPE_accessMem_request_483_Update)
          RPIPE_accessMem_request_483_sample_start_ o<-& (RPIPE_accessMem_request_483_update_completed_ 0)
          // Target expression
          // (as target) cmd_1
          // start: WAR dependencies for cmd_1
          // done: WAR dependencies for cmd_1
          // end:  			cmd_1 := accessMem_request// bits of buffering = 64. 
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice cmd_1 63 32 ) 
          //  file prog.linked.opt.aa, line 138
          // volatile! 
          // Source expression
          // ( $slice cmd_1 63 32 ) 
          // cmd_1
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice cmd_1 63 32 ) 
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // start:  			$volatile addr := ( $slice cmd_1 31 22 ) 
          //  file prog.linked.opt.aa, line 139
          // volatile! 
          // Source expression
          // ( $slice cmd_1 31 22 ) 
          // cmd_1
          // Target expression
          // (as target) addr
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // end:  			$volatile addr := ( $slice cmd_1 31 22 ) 
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice cmd_1 0 0 ) 
          //  file prog.linked.opt.aa, line 140
          // volatile! 
          // Source expression
          // ( $slice cmd_1 0 0 ) 
          // cmd_1
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice cmd_1 0 0 ) 
          // start: 			$call accessMem (rwbar addr wdata ) (rdata ) 
          //  file prog.linked.opt.aa, line 141
          $T[call_stmt_501_sample_start_] 
          $T[call_stmt_501_sample_completed_] 
          $T[call_stmt_501_update_start_] 
          $T[call_stmt_501_update_completed_] 
          // Call input argument 0
          // rwbar
          // Call input argument 1
          // addr
          // Call input argument 2
          // wdata
          // start: Forward dependencies from rwbar to transition call_stmt_501_sample_start_
          call_stmt_501_sample_start_ <-& (RPIPE_accessMem_request_483_update_completed_)
          // done: Forward dependencies from rwbar to transition call_stmt_501_sample_start_
          // RAW reenables for rwbar
          RPIPE_accessMem_request_483_update_start_ o<-& (call_stmt_501_sample_completed_ 0)
          // start: Forward dependencies from addr to transition call_stmt_501_sample_start_
          call_stmt_501_sample_start_ <-& (RPIPE_accessMem_request_483_update_completed_)
          // done: Forward dependencies from addr to transition call_stmt_501_sample_start_
          // RAW reenables for addr
          RPIPE_accessMem_request_483_update_start_ o<-& (call_stmt_501_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_501_sample_start_
          call_stmt_501_sample_start_ <-& (RPIPE_accessMem_request_483_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_501_sample_start_
          // RAW reenables for wdata
          RPIPE_accessMem_request_483_update_start_ o<-& (call_stmt_501_sample_completed_ 0)
          ;;[call_stmt_501_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_501_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_501_sample_start_ &-> (call_stmt_501_Sample)
          call_stmt_501_sample_completed_ <-& (call_stmt_501_Sample)
          call_stmt_501_sample_completed_ &-> ($null)
          call_stmt_501_update_start_ &-> (call_stmt_501_Update)
          call_stmt_501_update_completed_ <-& (call_stmt_501_Update)
          // Call output argument 0
          // (as target) rdata
          // self-release: 
          call_stmt_501_sample_start_ o<-& (call_stmt_501_sample_completed_ 1)
          $null &-> (call_stmt_501_update_start_)
          call_stmt_501_update_start_ o<-& (call_stmt_501_update_completed_ 0)
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end: 			$call accessMem (rwbar addr wdata ) (rdata ) 
          // start:  			accessMem_response := rdata// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 142
          // Source expression
          // rdata
          // Target expression
          // (as target) accessMem_response
          $T[WPIPE_accessMem_response_502_sample_start_] 
          $T[WPIPE_accessMem_response_502_sample_completed_] 
          $T[WPIPE_accessMem_response_502_update_start_] 
          $T[WPIPE_accessMem_response_502_update_completed_] 
          ;;[WPIPE_accessMem_response_502_Sample] 
          {
            // pipe write sample-start accessMem_response
            $T [req] $T [ack] 
          }
          ;;[WPIPE_accessMem_response_502_Update] 
          {
            // pipe write update (complete) accessMem_response
            $T [req] $T [ack] 
          }
          WPIPE_accessMem_response_502_sample_start_ &-> (WPIPE_accessMem_response_502_Sample)
          WPIPE_accessMem_response_502_sample_completed_ <-& (WPIPE_accessMem_response_502_Sample)
          WPIPE_accessMem_response_502_update_start_ <-& (WPIPE_accessMem_response_502_sample_completed_)
          WPIPE_accessMem_response_502_update_start_ &-> (WPIPE_accessMem_response_502_Update)
          WPIPE_accessMem_response_502_update_completed_ <-& (WPIPE_accessMem_response_502_Update)
          WPIPE_accessMem_response_502_sample_start_ o<-& (WPIPE_accessMem_response_502_update_completed_ 0)
          // start: Forward dependencies from rdata to transition WPIPE_accessMem_response_502_sample_start_
          WPIPE_accessMem_response_502_sample_start_ <-& (call_stmt_501_update_completed_)
          // done: Forward dependencies from rdata to transition WPIPE_accessMem_response_502_sample_start_
          // RAW reenables for rdata
          call_stmt_501_update_start_ o<-& (WPIPE_accessMem_response_502_sample_completed_ 0)
          // end:  			accessMem_response := rdata// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_stmt_501 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe accessMem_request
          // read-dependencies for pipe accessMem_request
          // write-dependencies for pipe accessMem_request
          // signal dependencies for accessMem_request
          // pipe read/write dependencies for pipe accessMem_response
          // read-dependencies for pipe accessMem_response
          // write-dependencies for pipe accessMem_response
          // signal dependencies for accessMem_response
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_480__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_480_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_480__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_480_loop_body : condition_evaluated
        $bind do_while_stmt_480__entry__  => do_while_stmt_480_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_480_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_480__exit__)
      }
      do_while_stmt_480__entry__ |-> (do_while_stmt_480)
      do_while_stmt_480__exit__ <-| (do_while_stmt_480)
      do_while_stmt_480__entry__ <-| (branch_block_stmt_479__entry__)
      do_while_stmt_480__exit__ |-> (branch_block_stmt_479__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 135
    // constant-object-declarations for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 131
    // constant-object-declarations for block %memAccessDaemon
    //  file prog.linked.opt.aa, line 126
    // constant-declarations for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 131
    // do-while statement  
    //  file prog.linked.opt.aa, line 133
    // 1 
    $constant $W[konst_506_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 135
    // 			$call accessMem (rwbar addr wdata ) (rdata ) 
    //  file prog.linked.opt.aa, line 141
    // block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 131
    // do-while statement  
    //  file prog.linked.opt.aa, line 133
    // 			cmd_1 := accessMem_request// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 137
    // cmd_1
    $W[cmd_1_484] : $int<64>
    // 			$volatile wdata := ( $slice cmd_1 63 32 ) 
    //  file prog.linked.opt.aa, line 138
    // wdata
    $W[wdata_488] : $int<32>
    // 			$volatile addr := ( $slice cmd_1 31 22 ) 
    //  file prog.linked.opt.aa, line 139
    // addr
    $W[addr_492] : $int<10>
    // 			$volatile rwbar := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 140
    // rwbar
    $W[rwbar_496] : $int<1>
    // 			$call accessMem (rwbar addr wdata ) (rdata ) 
    //  file prog.linked.opt.aa, line 141
    // rdata
    $W[rdata_501] : $int<32>
    // 			accessMem_response := rdata// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 142
    // accessMem_response
    // datapath-instances for block %memAccessDaemon%loop
    //  file prog.linked.opt.aa, line 131
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 133
    ==0? [do_while_stmt_480_branch] (konst_506_wire_constant)
    $flowthrough
    // 			cmd_1 := accessMem_request// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 137
    // accessMem_request
    $ioport $in [RPIPE_accessMem_request_483_inst] (accessMem_request) (cmd_1_484)  $fullrate 
    $buffering $out RPIPE_accessMem_request_483_inst cmd_1_484 1
    // 			$volatile wdata := ( $slice cmd_1 63 32 ) 
    //  file prog.linked.opt.aa, line 138
    // ( $slice cmd_1 63 32 ) 
    [:] [slice_487_inst] (cmd_1_484 63 32) (wdata_488)  $flowthrough
    $delay slice_487_inst 0
    // 			$volatile addr := ( $slice cmd_1 31 22 ) 
    //  file prog.linked.opt.aa, line 139
    // ( $slice cmd_1 31 22 ) 
    [:] [slice_491_inst] (cmd_1_484 31 22) (addr_492)  $flowthrough
    $delay slice_491_inst 0
    // 			$volatile rwbar := ( $slice cmd_1 0 0 ) 
    //  file prog.linked.opt.aa, line 140
    // ( $slice cmd_1 0 0 ) 
    [:] [slice_495_inst] (cmd_1_484 0 0) (rwbar_496)  $flowthrough
    $delay slice_495_inst 0
    // 			$call accessMem (rwbar addr wdata ) (rdata ) 
    //  file prog.linked.opt.aa, line 141
    $call [call_stmt_501_call] $module accessMem(rwbar_496 addr_492 wdata_488) (rdata_501)   $fullrate
    $delay call_stmt_501_call 7
    $buffering  $in call_stmt_501_call rwbar_496 1
    $buffering  $in call_stmt_501_call addr_492 1
    $buffering  $in call_stmt_501_call wdata_488 1
    $buffering  $out call_stmt_501_call rdata_501 1
    // 			accessMem_response := rdata// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 142
    // accessMem_response
    $ioport $out [WPIPE_accessMem_response_502_inst]  (rdata_501) (accessMem_response)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_480
  //  file prog.linked.opt.aa, line 133
  // 			cmd_1 := accessMem_request// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 137
  // accessMem_request
  RPIPE_accessMem_request_483_inst <=> (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/RPIPE_accessMem_request_483_Sample/rr branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/RPIPE_accessMem_request_483_Update/cr) (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/RPIPE_accessMem_request_483_Sample/ra branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/RPIPE_accessMem_request_483_Update/ca)
  // 			$volatile wdata := ( $slice cmd_1 63 32 ) 
  //  file prog.linked.opt.aa, line 138
  // cmd_1
  // 			$volatile addr := ( $slice cmd_1 31 22 ) 
  //  file prog.linked.opt.aa, line 139
  // cmd_1
  // 			$volatile rwbar := ( $slice cmd_1 0 0 ) 
  //  file prog.linked.opt.aa, line 140
  // cmd_1
  // 			$call accessMem (rwbar addr wdata ) (rdata ) 
  //  file prog.linked.opt.aa, line 141
  // rwbar
  // addr
  // wdata
  call_stmt_501_call <=> (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/call_stmt_501_Sample/crr branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/call_stmt_501_Update/ccr) (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/call_stmt_501_Sample/cra branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/call_stmt_501_Update/cca)
  // 			accessMem_response := rdata// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 142
  // rdata
  // accessMem_response
  WPIPE_accessMem_response_502_inst <=> (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/WPIPE_accessMem_response_502_Sample/req branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/WPIPE_accessMem_response_502_Update/req) (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/WPIPE_accessMem_response_502_Sample/ack branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/WPIPE_accessMem_response_502_Update/ack)
  do_while_stmt_480_branch <=> (branch_block_stmt_479/do_while_stmt_480/do_while_stmt_480_loop_body/condition_evaluated) (branch_block_stmt_479/do_while_stmt_480/loop_exit/ack branch_block_stmt_479/do_while_stmt_480/loop_taken/ack)
}
$volatile $module [scoreBoard] 
{
  $in ifetch_state:$int<10>
  // can point into 
  icache_state:$int<10>
  // can point into 
  idecode_state:$int<42>
  // can point into 
  iregfile_state:$int<42>
  // can point into 
  iexec_state:$int<106>
  // can point into 
  dcache_state:$int<139>
  // can point into 
  iretire_state:$int<139>
  // can point into 
  $out ifetch_actions:$int<10>
  // can point into 
  icache_actions:$int<10>
  // can point into 
  idecode_actions:$int<42>
  // can point into 
  iregfile_actions:$int<5>
  // can point into 
  iexec_actions:$int<4>
  // can point into 
  dcache_actions:$int<3>
  // can point into 
  ex_Unconditional_JUMP:$int<1>
  // can point into 
  is_Branch_Hazard:$int<1>
  // can point into 
  flush_ifetch:$int<1>
  // can point into 
  flush_icache:$int<1>
  // can point into 
  flush_idecode:$int<1>
  // can point into 
  flush_reg:$int<1>
  // can point into 
  flush_iexec:$int<1>
  // can point into 
  flush_dcache:$int<1>
  // can point into 
  stall_first_4:$int<1>
  // can point into 
  // pipe-declarations for block %scoreBoard
  //  file prog.linked.opt.aa, line 146
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %scoreBoard
    //  file prog.linked.opt.aa, line 146
    // CALL
    $constant $W[R_CALL_557_wire_constant] : $int<8> := _b00010000// 16
    // JMP
    $constant $W[R_JMP_560_wire_constant] : $int<8> := _b00010001// 17
    // SBIR
    $constant $W[R_SBIR_585_wire_constant] : $int<8> := _b00000010// 2
    // LOAD
    $constant $W[R_LOAD_588_wire_constant] : $int<8> := _b00000011// 3
    // L_AND
    $constant $W[R_L_AND_592_wire_constant] : $int<8> := _b00000101// 5
    // L_OR
    $constant $W[R_L_OR_596_wire_constant] : $int<8> := _b00000110// 6
    // L_XNOR
    $constant $W[R_L_XNOR_599_wire_constant] : $int<8> := _b00000111// 7
    // ADD
    $constant $W[R_ADD_603_wire_constant] : $int<8> := _b00001001// 9
    // SUB
    $constant $W[R_SUB_608_wire_constant] : $int<8> := _b00001010// 10
    // L_SLL
    $constant $W[R_L_SLL_611_wire_constant] : $int<8> := _b00001011// 11
    // L_SRL
    $constant $W[R_L_SRL_615_wire_constant] : $int<8> := _b00001100// 12
    // L_SRA
    $constant $W[R_L_SRA_619_wire_constant] : $int<8> := _b00001101// 13
    // CALL
    $constant $W[R_CALL_622_wire_constant] : $int<8> := _b00010000// 16
    // CMP
    $constant $W[R_CMP_626_wire_constant] : $int<8> := _b00010010// 18
    // one_1
    $constant $W[R_one_1_634_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_643_wire_constant] : $int<1> := _b1// 1
    // SBIR
    $constant $W[R_SBIR_664_wire_constant] : $int<8> := _b00000010// 2
    // LOAD
    $constant $W[R_LOAD_667_wire_constant] : $int<8> := _b00000011// 3
    // L_AND
    $constant $W[R_L_AND_671_wire_constant] : $int<8> := _b00000101// 5
    // L_OR
    $constant $W[R_L_OR_675_wire_constant] : $int<8> := _b00000110// 6
    // L_XNOR
    $constant $W[R_L_XNOR_678_wire_constant] : $int<8> := _b00000111// 7
    // ADD
    $constant $W[R_ADD_682_wire_constant] : $int<8> := _b00001001// 9
    // SUB
    $constant $W[R_SUB_687_wire_constant] : $int<8> := _b00001010// 10
    // L_SLL
    $constant $W[R_L_SLL_690_wire_constant] : $int<8> := _b00001011// 11
    // L_SRL
    $constant $W[R_L_SRL_694_wire_constant] : $int<8> := _b00001100// 12
    // L_SRA
    $constant $W[R_L_SRA_698_wire_constant] : $int<8> := _b00001101// 13
    // CALL
    $constant $W[R_CALL_701_wire_constant] : $int<8> := _b00010000// 16
    // CMP
    $constant $W[R_CMP_705_wire_constant] : $int<8> := _b00010010// 18
    // one_1
    $constant $W[R_one_1_713_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_722_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_731_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_740_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_761_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_770_wire_constant] : $int<1> := _b1// 1
    // LOAD
    $constant $W[R_LOAD_779_wire_constant] : $int<8> := _b00000011// 3
    // zero_8
    $constant $W[R_zero_8_782_wire_constant] : $int<8> := _b00000000// 0
    // STORE
    $constant $W[R_STORE_787_wire_constant] : $int<8> := _b00000100// 4
    // one_1
    $constant $W[R_one_1_802_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_805_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_811_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_814_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_820_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_823_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_829_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_832_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_838_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_841_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_845_wire_constant] : $int<1> := _b1// 1
    // ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    // 0 
    $constant $W[konst_867_wire_constant] : $int<8> := _b00000000// 0
    // zero_1
    $constant $W[R_zero_1_869_wire_constant] : $int<1> := _b0// 0
    // one_1
    $constant $W[R_one_1_870_wire_constant] : $int<1> := _b1// 1
    // ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    // 0 
    $constant $W[konst_875_wire_constant] : $int<8> := _b00000000// 0
    // zero_1
    $constant $W[R_zero_1_877_wire_constant] : $int<1> := _b0// 0
    // one_1
    $constant $W[R_one_1_878_wire_constant] : $int<1> := _b1// 1
    // ( $mux (dcache_opcode == STORE) zero_1  one_1 ) 
    // STORE
    $constant $W[R_STORE_906_wire_constant] : $int<8> := _b00000100// 4
    // zero_1
    $constant $W[R_zero_1_908_wire_constant] : $int<1> := _b0// 0
    // one_1
    $constant $W[R_one_1_909_wire_constant] : $int<1> := _b1// 1
    // 	$volatile is_Branch := ( $slice dcache_state 10 10 ) 
    //  file prog.linked.opt.aa, line 151
    // is_Branch
    $W[is_Branch_538] : $int<1>
    // 	$volatile ex_opcode := ( $slice iexec_state 105 98 ) 
    //  file prog.linked.opt.aa, line 152
    // ex_opcode
    $W[ex_opcode_542] : $int<8>
    // 	$volatile ex_rs1_imm := ( $slice iexec_state 97 90 ) 
    //  file prog.linked.opt.aa, line 153
    // ex_rs1_imm
    $W[ex_rs1_imm_546] : $int<8>
    // 	$volatile ex_rs2 := ( $slice iexec_state 89 82 ) 
    //  file prog.linked.opt.aa, line 154
    // ex_rs2
    $W[ex_rs2_550] : $int<8>
    // 	$volatile ex_rd := ( $slice iexec_state 81 74 ) 
    //  file prog.linked.opt.aa, line 155
    // ex_rd
    $W[ex_rd_554] : $int<8>
    // 	$volatile ex_Unconditional_JUMP := ((ex_opcode == CALL) | (ex_opcode == JMP))
    //  file prog.linked.opt.aa, line 156
    // (ex_opcode == CALL)
    $intermediate $W[EQ_u8_u1_558_wire] : $int<1>
    // (ex_opcode == JMP)
    $intermediate $W[EQ_u8_u1_561_wire] : $int<1>
    // ex_Unconditional_JUMP
    // 	$volatile is_Branch_Hazard := is_Branch
    //  file prog.linked.opt.aa, line 157
    // is_Branch_Hazard
    // 	$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
    //  file prog.linked.opt.aa, line 158
    // dcache_opcode
    $W[dcache_opcode_570] : $int<8>
    // 	$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
    //  file prog.linked.opt.aa, line 159
    // dcache_rs1_imm
    $W[dcache_rs1_imm_574] : $int<8>
    // 	$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
    //  file prog.linked.opt.aa, line 160
    // dcache_rs2
    $W[dcache_rs2_578] : $int<8>
    // 	$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
    //  file prog.linked.opt.aa, line 161
    // dcache_rd
    $W[dcache_rd_582] : $int<8>
    // 	$volatile dcache_state_reg_write := (((((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND)) | (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD))) | ((((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL)) | (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP))))
    //  file prog.linked.opt.aa, line 162
    // (dcache_opcode == SBIR)
    $intermediate $W[EQ_u8_u1_586_wire] : $int<1>
    // (dcache_opcode == LOAD)
    $intermediate $W[EQ_u8_u1_589_wire] : $int<1>
    // ((dcache_opcode == SBIR) | (dcache_opcode == LOAD))
    $intermediate $W[OR_u1_u1_590_wire] : $int<1>
    // (dcache_opcode == L_AND)
    $intermediate $W[EQ_u8_u1_593_wire] : $int<1>
    // (((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND))
    $intermediate $W[OR_u1_u1_594_wire] : $int<1>
    // (dcache_opcode == L_OR)
    $intermediate $W[EQ_u8_u1_597_wire] : $int<1>
    // (dcache_opcode == L_XNOR)
    $intermediate $W[EQ_u8_u1_600_wire] : $int<1>
    // ((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR))
    $intermediate $W[OR_u1_u1_601_wire] : $int<1>
    // (dcache_opcode == ADD)
    $intermediate $W[EQ_u8_u1_604_wire] : $int<1>
    // (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD))
    $intermediate $W[OR_u1_u1_605_wire] : $int<1>
    // ((((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND)) | (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD)))
    $intermediate $W[OR_u1_u1_606_wire] : $int<1>
    // (dcache_opcode == SUB)
    $intermediate $W[EQ_u8_u1_609_wire] : $int<1>
    // (dcache_opcode == L_SLL)
    $intermediate $W[EQ_u8_u1_612_wire] : $int<1>
    // ((dcache_opcode == SUB) | (dcache_opcode == L_SLL))
    $intermediate $W[OR_u1_u1_613_wire] : $int<1>
    // (dcache_opcode == L_SRL)
    $intermediate $W[EQ_u8_u1_616_wire] : $int<1>
    // (((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL))
    $intermediate $W[OR_u1_u1_617_wire] : $int<1>
    // (dcache_opcode == L_SRA)
    $intermediate $W[EQ_u8_u1_620_wire] : $int<1>
    // (dcache_opcode == CALL)
    $intermediate $W[EQ_u8_u1_623_wire] : $int<1>
    // ((dcache_opcode == L_SRA) | (dcache_opcode == CALL))
    $intermediate $W[OR_u1_u1_624_wire] : $int<1>
    // (dcache_opcode == CMP)
    $intermediate $W[EQ_u8_u1_627_wire] : $int<1>
    // (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP))
    $intermediate $W[OR_u1_u1_628_wire] : $int<1>
    // ((((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL)) | (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP)))
    $intermediate $W[OR_u1_u1_629_wire] : $int<1>
    // dcache_state_reg_write
    $W[dcache_state_reg_write_631] : $int<1>
    // 	$volatile dcache_to_ex_rs1_imm := ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs1_imm))
    //  file prog.linked.opt.aa, line 163
    // (dcache_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_635_wire] : $int<1>
    // (dcache_rd == ex_rs1_imm)
    $intermediate $W[EQ_u8_u1_638_wire] : $int<1>
    // dcache_to_ex_rs1_imm
    $W[dcache_to_ex_rs1_imm_640] : $int<1>
    // 	$volatile dcache_to_ex_rs2 := ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs2))
    //  file prog.linked.opt.aa, line 164
    // (dcache_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_644_wire] : $int<1>
    // (dcache_rd == ex_rs2)
    $intermediate $W[EQ_u8_u1_647_wire] : $int<1>
    // dcache_to_ex_rs2
    $W[dcache_to_ex_rs2_649] : $int<1>
    // 	$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
    //  file prog.linked.opt.aa, line 165
    // iretire_opcode
    $W[iretire_opcode_653] : $int<8>
    // 	$volatile iretire_rs1_imm := ( $slice iretire_state 130 123 ) 
    //  file prog.linked.opt.aa, line 166
    // iretire_rs1_imm
    $W[iretire_rs1_imm_657] : $int<8>
    // 	$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
    //  file prog.linked.opt.aa, line 167
    // iretire_rd
    $W[iretire_rd_661] : $int<8>
    // 	$volatile iretire_state_reg_write := (((((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND)) | (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD))) | ((((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL)) | (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP))))
    //  file prog.linked.opt.aa, line 168
    // (iretire_opcode == SBIR)
    $intermediate $W[EQ_u8_u1_665_wire] : $int<1>
    // (iretire_opcode == LOAD)
    $intermediate $W[EQ_u8_u1_668_wire] : $int<1>
    // ((iretire_opcode == SBIR) | (iretire_opcode == LOAD))
    $intermediate $W[OR_u1_u1_669_wire] : $int<1>
    // (iretire_opcode == L_AND)
    $intermediate $W[EQ_u8_u1_672_wire] : $int<1>
    // (((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND))
    $intermediate $W[OR_u1_u1_673_wire] : $int<1>
    // (iretire_opcode == L_OR)
    $intermediate $W[EQ_u8_u1_676_wire] : $int<1>
    // (iretire_opcode == L_XNOR)
    $intermediate $W[EQ_u8_u1_679_wire] : $int<1>
    // ((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR))
    $intermediate $W[OR_u1_u1_680_wire] : $int<1>
    // (iretire_opcode == ADD)
    $intermediate $W[EQ_u8_u1_683_wire] : $int<1>
    // (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD))
    $intermediate $W[OR_u1_u1_684_wire] : $int<1>
    // ((((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND)) | (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD)))
    $intermediate $W[OR_u1_u1_685_wire] : $int<1>
    // (iretire_opcode == SUB)
    $intermediate $W[EQ_u8_u1_688_wire] : $int<1>
    // (iretire_opcode == L_SLL)
    $intermediate $W[EQ_u8_u1_691_wire] : $int<1>
    // ((iretire_opcode == SUB) | (iretire_opcode == L_SLL))
    $intermediate $W[OR_u1_u1_692_wire] : $int<1>
    // (iretire_opcode == L_SRL)
    $intermediate $W[EQ_u8_u1_695_wire] : $int<1>
    // (((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL))
    $intermediate $W[OR_u1_u1_696_wire] : $int<1>
    // (iretire_opcode == L_SRA)
    $intermediate $W[EQ_u8_u1_699_wire] : $int<1>
    // (iretire_opcode == CALL)
    $intermediate $W[EQ_u8_u1_702_wire] : $int<1>
    // ((iretire_opcode == L_SRA) | (iretire_opcode == CALL))
    $intermediate $W[OR_u1_u1_703_wire] : $int<1>
    // (iretire_opcode == CMP)
    $intermediate $W[EQ_u8_u1_706_wire] : $int<1>
    // (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP))
    $intermediate $W[OR_u1_u1_707_wire] : $int<1>
    // ((((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL)) | (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP)))
    $intermediate $W[OR_u1_u1_708_wire] : $int<1>
    // iretire_state_reg_write
    $W[iretire_state_reg_write_710] : $int<1>
    // 	$volatile iretire_state_to_ex_rs1_imm := ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs1_imm))
    //  file prog.linked.opt.aa, line 169
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_714_wire] : $int<1>
    // (iretire_rd == ex_rs1_imm)
    $intermediate $W[EQ_u8_u1_717_wire] : $int<1>
    // iretire_state_to_ex_rs1_imm
    $W[iretire_state_to_ex_rs1_imm_719] : $int<1>
    // 	$volatile iretire_state_to_ex_rs2 := ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs2))
    //  file prog.linked.opt.aa, line 170
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_723_wire] : $int<1>
    // (iretire_rd == ex_rs2)
    $intermediate $W[EQ_u8_u1_726_wire] : $int<1>
    // iretire_state_to_ex_rs2
    $W[iretire_state_to_ex_rs2_728] : $int<1>
    // 	$volatile iretire_state_to_dcache_addr := ((iretire_state_reg_write == one_1) & (dcache_rs1_imm == iretire_rd))
    //  file prog.linked.opt.aa, line 171
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_732_wire] : $int<1>
    // (dcache_rs1_imm == iretire_rd)
    $intermediate $W[EQ_u8_u1_735_wire] : $int<1>
    // iretire_state_to_dcache_addr
    $W[iretire_state_to_dcache_addr_737] : $int<1>
    // 	$volatile iretire_state_to_dcache_memData := ((iretire_state_reg_write == one_1) & (dcache_rs2 == iretire_rd))
    //  file prog.linked.opt.aa, line 172
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_741_wire] : $int<1>
    // (dcache_rs2 == iretire_rd)
    $intermediate $W[EQ_u8_u1_744_wire] : $int<1>
    // iretire_state_to_dcache_memData
    $W[iretire_state_to_dcache_memData_746] : $int<1>
    // 	$volatile iregfile_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 173
    // iregfile_opcode
    $W[iregfile_opcode_750] : $int<8>
    // 	$volatile iregfile_rs1_imm := ( $slice iregfile_state 33 26 ) 
    //  file prog.linked.opt.aa, line 174
    // iregfile_rs1_imm
    $W[iregfile_rs1_imm_754] : $int<8>
    // 	$volatile iregfile_rs2 := ( $slice iregfile_state 25 18 ) 
    //  file prog.linked.opt.aa, line 175
    // iregfile_rs2
    $W[iregfile_rs2_758] : $int<8>
    // 	$volatile iretire_state_to_rs1_imm := ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs1_imm))
    //  file prog.linked.opt.aa, line 176
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_762_wire] : $int<1>
    // (iretire_rd == iregfile_rs1_imm)
    $intermediate $W[EQ_u8_u1_765_wire] : $int<1>
    // iretire_state_to_rs1_imm
    $W[iretire_state_to_rs1_imm_767] : $int<1>
    // 	$volatile iretire_state_to_rs2 := ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs2))
    //  file prog.linked.opt.aa, line 177
    // (iretire_state_reg_write == one_1)
    $intermediate $W[EQ_u1_u1_771_wire] : $int<1>
    // (iretire_rd == iregfile_rs2)
    $intermediate $W[EQ_u8_u1_774_wire] : $int<1>
    // iretire_state_to_rs2
    $W[iretire_state_to_rs2_776] : $int<1>
    // 	$volatile stall_first_4 := (((ex_opcode == LOAD) & ( ~ (iregfile_opcode == zero_8) )) & (( ~ (iregfile_opcode == STORE) ) & ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd))))
    //  file prog.linked.opt.aa, line 178
    // (ex_opcode == LOAD)
    $intermediate $W[EQ_u8_u1_780_wire] : $int<1>
    // (iregfile_opcode == zero_8)
    $intermediate $W[EQ_u8_u1_783_wire] : $int<1>
    // ( ~ (iregfile_opcode == zero_8) )
    $intermediate $W[NOT_u1_u1_784_wire] : $int<1>
    // ((ex_opcode == LOAD) & ( ~ (iregfile_opcode == zero_8) ))
    $intermediate $W[AND_u1_u1_785_wire] : $int<1>
    // (iregfile_opcode == STORE)
    $intermediate $W[EQ_u8_u1_788_wire] : $int<1>
    // ( ~ (iregfile_opcode == STORE) )
    $intermediate $W[NOT_u1_u1_789_wire] : $int<1>
    // (iretire_rs1_imm == ex_rd)
    $intermediate $W[EQ_u8_u1_792_wire] : $int<1>
    // (iregfile_rs2 == ex_rd)
    $intermediate $W[EQ_u8_u1_795_wire] : $int<1>
    // ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd))
    $intermediate $W[OR_u1_u1_796_wire] : $int<1>
    // (( ~ (iregfile_opcode == STORE) ) & ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd)))
    $intermediate $W[AND_u1_u1_797_wire] : $int<1>
    // stall_first_4
    // 	$volatile flush_ifetch := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 179
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_803_wire] : $int<1>
    // (ex_Unconditional_JUMP == one_1)
    $intermediate $W[EQ_u1_u1_806_wire] : $int<1>
    // flush_ifetch
    // 	$volatile flush_icache := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 180
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_812_wire] : $int<1>
    // (ex_Unconditional_JUMP == one_1)
    $intermediate $W[EQ_u1_u1_815_wire] : $int<1>
    // flush_icache
    // 	$volatile flush_idecode := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 181
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_821_wire] : $int<1>
    // (ex_Unconditional_JUMP == one_1)
    $intermediate $W[EQ_u1_u1_824_wire] : $int<1>
    // flush_idecode
    // 	$volatile flush_reg := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 182
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_830_wire] : $int<1>
    // (ex_Unconditional_JUMP == one_1)
    $intermediate $W[EQ_u1_u1_833_wire] : $int<1>
    // flush_reg
    // 	$volatile flush_iexec := (((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1)) | (stall_first_4 == one_1))
    //  file prog.linked.opt.aa, line 183
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_839_wire] : $int<1>
    // (ex_Unconditional_JUMP == one_1)
    $intermediate $W[EQ_u1_u1_842_wire] : $int<1>
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    $intermediate $W[OR_u1_u1_843_wire] : $int<1>
    // (stall_first_4 == one_1)
    $intermediate $W[EQ_u1_u1_846_wire] : $int<1>
    // flush_iexec
    // 	$volatile flush_dcache := is_Branch
    //  file prog.linked.opt.aa, line 184
    // flush_dcache
    // 	$volatile ifetch_actions := ifetch_state
    //  file prog.linked.opt.aa, line 185
    // ifetch_actions
    // 	$volatile icache_actions := icache_state
    //  file prog.linked.opt.aa, line 186
    // icache_actions
    // 	$volatile idecode_actions := idecode_state
    //  file prog.linked.opt.aa, line 187
    // idecode_actions
    // 	$volatile iregfile_state_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 188
    // iregfile_state_opcode
    $W[iregfile_state_opcode_864] : $int<8>
    // 	$volatile reg_valid_read1 := ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 189
    // (iregfile_state_opcode == 0 )
    $intermediate $W[EQ_u8_u1_868_wire] : $int<1>
    // reg_valid_read1
    $W[reg_valid_read1_872] : $int<1>
    // 	$volatile reg_valid_read2 := ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 190
    // (iregfile_state_opcode == 0 )
    $intermediate $W[EQ_u8_u1_876_wire] : $int<1>
    // reg_valid_read2
    $W[reg_valid_read2_880] : $int<1>
    // 	$volatile reg_valid_write := iretire_state_reg_write
    //  file prog.linked.opt.aa, line 191
    // reg_valid_write
    $W[reg_valid_write_883] : $int<1>
    // 	$volatile iregfile_actions := (((reg_valid_read1 && reg_valid_read2) && reg_valid_write) && (iretire_state_to_rs1_imm && iretire_state_to_rs2))
    //  file prog.linked.opt.aa, line 192
    // (reg_valid_read1 && reg_valid_read2)
    $intermediate $W[CONCAT_u1_u2_887_wire] : $int<2>
    // ((reg_valid_read1 && reg_valid_read2) && reg_valid_write)
    $intermediate $W[CONCAT_u2_u3_889_wire] : $int<3>
    // (iretire_state_to_rs1_imm && iretire_state_to_rs2)
    $intermediate $W[CONCAT_u1_u2_892_wire] : $int<2>
    // iregfile_actions
    // 	$volatile iexec_actions := ((dcache_to_ex_rs1_imm && dcache_to_ex_rs2) && (iretire_state_to_ex_rs1_imm && iretire_state_to_ex_rs2))
    //  file prog.linked.opt.aa, line 193
    // (dcache_to_ex_rs1_imm && dcache_to_ex_rs2)
    $intermediate $W[CONCAT_u1_u2_898_wire] : $int<2>
    // (iretire_state_to_ex_rs1_imm && iretire_state_to_ex_rs2)
    $intermediate $W[CONCAT_u1_u2_901_wire] : $int<2>
    // iexec_actions
    // 	$volatile memWrite := ( $mux (dcache_opcode == STORE) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 194
    // (dcache_opcode == STORE)
    $intermediate $W[EQ_u8_u1_907_wire] : $int<1>
    // memWrite
    $W[memWrite_911] : $int<1>
    // 	$volatile dcache_actions := ((memWrite && iretire_state_to_dcache_addr) && iretire_state_to_dcache_memData)
    //  file prog.linked.opt.aa, line 195
    // (memWrite && iretire_state_to_dcache_addr)
    $intermediate $W[CONCAT_u1_u2_915_wire] : $int<2>
    // dcache_actions
    // 	$volatile is_Branch := ( $slice dcache_state 10 10 ) 
    //  file prog.linked.opt.aa, line 151
    // ( $slice dcache_state 10 10 ) 
    [:] [slice_537_inst] (dcache_state 10 10) (is_Branch_538)  $flowthrough
    $delay slice_537_inst 0
    // 	$volatile ex_opcode := ( $slice iexec_state 105 98 ) 
    //  file prog.linked.opt.aa, line 152
    // ( $slice iexec_state 105 98 ) 
    [:] [slice_541_inst] (iexec_state 105 98) (ex_opcode_542)  $flowthrough
    $delay slice_541_inst 0
    // 	$volatile ex_rs1_imm := ( $slice iexec_state 97 90 ) 
    //  file prog.linked.opt.aa, line 153
    // ( $slice iexec_state 97 90 ) 
    [:] [slice_545_inst] (iexec_state 97 90) (ex_rs1_imm_546)  $flowthrough
    $delay slice_545_inst 0
    // 	$volatile ex_rs2 := ( $slice iexec_state 89 82 ) 
    //  file prog.linked.opt.aa, line 154
    // ( $slice iexec_state 89 82 ) 
    [:] [slice_549_inst] (iexec_state 89 82) (ex_rs2_550)  $flowthrough
    $delay slice_549_inst 0
    // 	$volatile ex_rd := ( $slice iexec_state 81 74 ) 
    //  file prog.linked.opt.aa, line 155
    // ( $slice iexec_state 81 74 ) 
    [:] [slice_553_inst] (iexec_state 81 74) (ex_rd_554)  $flowthrough
    $delay slice_553_inst 0
    // 	$volatile ex_Unconditional_JUMP := ((ex_opcode == CALL) | (ex_opcode == JMP))
    //  file prog.linked.opt.aa, line 156
    // (ex_opcode == CALL)
    ==[EQ_u8_u1_558_inst] (ex_opcode_542 R_CALL_557_wire_constant) (EQ_u8_u1_558_wire)   $flowthrough 
    $delay EQ_u8_u1_558_inst 0
    // (ex_opcode == JMP)
    ==[EQ_u8_u1_561_inst] (ex_opcode_542 R_JMP_560_wire_constant) (EQ_u8_u1_561_wire)   $flowthrough 
    $delay EQ_u8_u1_561_inst 0
    // ((ex_opcode == CALL) | (ex_opcode == JMP))
    |[OR_u1_u1_562_inst] (EQ_u8_u1_558_wire EQ_u8_u1_561_wire) (ex_Unconditional_JUMP)   $flowthrough 
    $delay OR_u1_u1_562_inst 0
    // 	$volatile is_Branch_Hazard := is_Branch
    //  file prog.linked.opt.aa, line 157
    # := [W_is_Branch_Hazard_564_inst] (is_Branch_538) (is_Branch_Hazard)   $flowthrough 
    // 	$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
    //  file prog.linked.opt.aa, line 158
    // ( $slice dcache_state 138 131 ) 
    [:] [slice_569_inst] (dcache_state 138 131) (dcache_opcode_570)  $flowthrough
    $delay slice_569_inst 0
    // 	$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
    //  file prog.linked.opt.aa, line 159
    // ( $slice dcache_state 130 123 ) 
    [:] [slice_573_inst] (dcache_state 130 123) (dcache_rs1_imm_574)  $flowthrough
    $delay slice_573_inst 0
    // 	$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
    //  file prog.linked.opt.aa, line 160
    // ( $slice dcache_state 122 115 ) 
    [:] [slice_577_inst] (dcache_state 122 115) (dcache_rs2_578)  $flowthrough
    $delay slice_577_inst 0
    // 	$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
    //  file prog.linked.opt.aa, line 161
    // ( $slice dcache_state 114 107 ) 
    [:] [slice_581_inst] (dcache_state 114 107) (dcache_rd_582)  $flowthrough
    $delay slice_581_inst 0
    // 	$volatile dcache_state_reg_write := (((((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND)) | (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD))) | ((((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL)) | (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP))))
    //  file prog.linked.opt.aa, line 162
    // (dcache_opcode == SBIR)
    ==[EQ_u8_u1_586_inst] (dcache_opcode_570 R_SBIR_585_wire_constant) (EQ_u8_u1_586_wire)   $flowthrough 
    $delay EQ_u8_u1_586_inst 0
    // (dcache_opcode == LOAD)
    ==[EQ_u8_u1_589_inst] (dcache_opcode_570 R_LOAD_588_wire_constant) (EQ_u8_u1_589_wire)   $flowthrough 
    $delay EQ_u8_u1_589_inst 0
    // ((dcache_opcode == SBIR) | (dcache_opcode == LOAD))
    |[OR_u1_u1_590_inst] (EQ_u8_u1_586_wire EQ_u8_u1_589_wire) (OR_u1_u1_590_wire)   $flowthrough 
    $delay OR_u1_u1_590_inst 0
    // (dcache_opcode == L_AND)
    ==[EQ_u8_u1_593_inst] (dcache_opcode_570 R_L_AND_592_wire_constant) (EQ_u8_u1_593_wire)   $flowthrough 
    $delay EQ_u8_u1_593_inst 0
    // (((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND))
    |[OR_u1_u1_594_inst] (OR_u1_u1_590_wire EQ_u8_u1_593_wire) (OR_u1_u1_594_wire)   $flowthrough 
    $delay OR_u1_u1_594_inst 0
    // (dcache_opcode == L_OR)
    ==[EQ_u8_u1_597_inst] (dcache_opcode_570 R_L_OR_596_wire_constant) (EQ_u8_u1_597_wire)   $flowthrough 
    $delay EQ_u8_u1_597_inst 0
    // (dcache_opcode == L_XNOR)
    ==[EQ_u8_u1_600_inst] (dcache_opcode_570 R_L_XNOR_599_wire_constant) (EQ_u8_u1_600_wire)   $flowthrough 
    $delay EQ_u8_u1_600_inst 0
    // ((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR))
    |[OR_u1_u1_601_inst] (EQ_u8_u1_597_wire EQ_u8_u1_600_wire) (OR_u1_u1_601_wire)   $flowthrough 
    $delay OR_u1_u1_601_inst 0
    // (dcache_opcode == ADD)
    ==[EQ_u8_u1_604_inst] (dcache_opcode_570 R_ADD_603_wire_constant) (EQ_u8_u1_604_wire)   $flowthrough 
    $delay EQ_u8_u1_604_inst 0
    // (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD))
    |[OR_u1_u1_605_inst] (OR_u1_u1_601_wire EQ_u8_u1_604_wire) (OR_u1_u1_605_wire)   $flowthrough 
    $delay OR_u1_u1_605_inst 0
    // ((((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND)) | (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD)))
    |[OR_u1_u1_606_inst] (OR_u1_u1_594_wire OR_u1_u1_605_wire) (OR_u1_u1_606_wire)   $flowthrough 
    $delay OR_u1_u1_606_inst 0
    // (dcache_opcode == SUB)
    ==[EQ_u8_u1_609_inst] (dcache_opcode_570 R_SUB_608_wire_constant) (EQ_u8_u1_609_wire)   $flowthrough 
    $delay EQ_u8_u1_609_inst 0
    // (dcache_opcode == L_SLL)
    ==[EQ_u8_u1_612_inst] (dcache_opcode_570 R_L_SLL_611_wire_constant) (EQ_u8_u1_612_wire)   $flowthrough 
    $delay EQ_u8_u1_612_inst 0
    // ((dcache_opcode == SUB) | (dcache_opcode == L_SLL))
    |[OR_u1_u1_613_inst] (EQ_u8_u1_609_wire EQ_u8_u1_612_wire) (OR_u1_u1_613_wire)   $flowthrough 
    $delay OR_u1_u1_613_inst 0
    // (dcache_opcode == L_SRL)
    ==[EQ_u8_u1_616_inst] (dcache_opcode_570 R_L_SRL_615_wire_constant) (EQ_u8_u1_616_wire)   $flowthrough 
    $delay EQ_u8_u1_616_inst 0
    // (((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL))
    |[OR_u1_u1_617_inst] (OR_u1_u1_613_wire EQ_u8_u1_616_wire) (OR_u1_u1_617_wire)   $flowthrough 
    $delay OR_u1_u1_617_inst 0
    // (dcache_opcode == L_SRA)
    ==[EQ_u8_u1_620_inst] (dcache_opcode_570 R_L_SRA_619_wire_constant) (EQ_u8_u1_620_wire)   $flowthrough 
    $delay EQ_u8_u1_620_inst 0
    // (dcache_opcode == CALL)
    ==[EQ_u8_u1_623_inst] (dcache_opcode_570 R_CALL_622_wire_constant) (EQ_u8_u1_623_wire)   $flowthrough 
    $delay EQ_u8_u1_623_inst 0
    // ((dcache_opcode == L_SRA) | (dcache_opcode == CALL))
    |[OR_u1_u1_624_inst] (EQ_u8_u1_620_wire EQ_u8_u1_623_wire) (OR_u1_u1_624_wire)   $flowthrough 
    $delay OR_u1_u1_624_inst 0
    // (dcache_opcode == CMP)
    ==[EQ_u8_u1_627_inst] (dcache_opcode_570 R_CMP_626_wire_constant) (EQ_u8_u1_627_wire)   $flowthrough 
    $delay EQ_u8_u1_627_inst 0
    // (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP))
    |[OR_u1_u1_628_inst] (OR_u1_u1_624_wire EQ_u8_u1_627_wire) (OR_u1_u1_628_wire)   $flowthrough 
    $delay OR_u1_u1_628_inst 0
    // ((((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL)) | (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP)))
    |[OR_u1_u1_629_inst] (OR_u1_u1_617_wire OR_u1_u1_628_wire) (OR_u1_u1_629_wire)   $flowthrough 
    $delay OR_u1_u1_629_inst 0
    // (((((dcache_opcode == SBIR) | (dcache_opcode == LOAD)) | (dcache_opcode == L_AND)) | (((dcache_opcode == L_OR) | (dcache_opcode == L_XNOR)) | (dcache_opcode == ADD))) | ((((dcache_opcode == SUB) | (dcache_opcode == L_SLL)) | (dcache_opcode == L_SRL)) | (((dcache_opcode == L_SRA) | (dcache_opcode == CALL)) | (dcache_opcode == CMP))))
    |[OR_u1_u1_630_inst] (OR_u1_u1_606_wire OR_u1_u1_629_wire) (dcache_state_reg_write_631)   $flowthrough 
    $delay OR_u1_u1_630_inst 0
    // 	$volatile dcache_to_ex_rs1_imm := ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs1_imm))
    //  file prog.linked.opt.aa, line 163
    // (dcache_state_reg_write == one_1)
    ==[EQ_u1_u1_635_inst] (dcache_state_reg_write_631 R_one_1_634_wire_constant) (EQ_u1_u1_635_wire)   $flowthrough 
    $delay EQ_u1_u1_635_inst 0
    // (dcache_rd == ex_rs1_imm)
    ==[EQ_u8_u1_638_inst] (dcache_rd_582 ex_rs1_imm_546) (EQ_u8_u1_638_wire)   $flowthrough 
    $delay EQ_u8_u1_638_inst 0
    // ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs1_imm))
    &[AND_u1_u1_639_inst] (EQ_u1_u1_635_wire EQ_u8_u1_638_wire) (dcache_to_ex_rs1_imm_640)   $flowthrough 
    $delay AND_u1_u1_639_inst 0
    // 	$volatile dcache_to_ex_rs2 := ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs2))
    //  file prog.linked.opt.aa, line 164
    // (dcache_state_reg_write == one_1)
    ==[EQ_u1_u1_644_inst] (dcache_state_reg_write_631 R_one_1_643_wire_constant) (EQ_u1_u1_644_wire)   $flowthrough 
    $delay EQ_u1_u1_644_inst 0
    // (dcache_rd == ex_rs2)
    ==[EQ_u8_u1_647_inst] (dcache_rd_582 ex_rs2_550) (EQ_u8_u1_647_wire)   $flowthrough 
    $delay EQ_u8_u1_647_inst 0
    // ((dcache_state_reg_write == one_1) & (dcache_rd == ex_rs2))
    &[AND_u1_u1_648_inst] (EQ_u1_u1_644_wire EQ_u8_u1_647_wire) (dcache_to_ex_rs2_649)   $flowthrough 
    $delay AND_u1_u1_648_inst 0
    // 	$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
    //  file prog.linked.opt.aa, line 165
    // ( $slice iretire_state 138 131 ) 
    [:] [slice_652_inst] (iretire_state 138 131) (iretire_opcode_653)  $flowthrough
    $delay slice_652_inst 0
    // 	$volatile iretire_rs1_imm := ( $slice iretire_state 130 123 ) 
    //  file prog.linked.opt.aa, line 166
    // ( $slice iretire_state 130 123 ) 
    [:] [slice_656_inst] (iretire_state 130 123) (iretire_rs1_imm_657)  $flowthrough
    $delay slice_656_inst 0
    // 	$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
    //  file prog.linked.opt.aa, line 167
    // ( $slice iretire_state 114 107 ) 
    [:] [slice_660_inst] (iretire_state 114 107) (iretire_rd_661)  $flowthrough
    $delay slice_660_inst 0
    // 	$volatile iretire_state_reg_write := (((((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND)) | (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD))) | ((((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL)) | (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP))))
    //  file prog.linked.opt.aa, line 168
    // (iretire_opcode == SBIR)
    ==[EQ_u8_u1_665_inst] (iretire_opcode_653 R_SBIR_664_wire_constant) (EQ_u8_u1_665_wire)   $flowthrough 
    $delay EQ_u8_u1_665_inst 0
    // (iretire_opcode == LOAD)
    ==[EQ_u8_u1_668_inst] (iretire_opcode_653 R_LOAD_667_wire_constant) (EQ_u8_u1_668_wire)   $flowthrough 
    $delay EQ_u8_u1_668_inst 0
    // ((iretire_opcode == SBIR) | (iretire_opcode == LOAD))
    |[OR_u1_u1_669_inst] (EQ_u8_u1_665_wire EQ_u8_u1_668_wire) (OR_u1_u1_669_wire)   $flowthrough 
    $delay OR_u1_u1_669_inst 0
    // (iretire_opcode == L_AND)
    ==[EQ_u8_u1_672_inst] (iretire_opcode_653 R_L_AND_671_wire_constant) (EQ_u8_u1_672_wire)   $flowthrough 
    $delay EQ_u8_u1_672_inst 0
    // (((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND))
    |[OR_u1_u1_673_inst] (OR_u1_u1_669_wire EQ_u8_u1_672_wire) (OR_u1_u1_673_wire)   $flowthrough 
    $delay OR_u1_u1_673_inst 0
    // (iretire_opcode == L_OR)
    ==[EQ_u8_u1_676_inst] (iretire_opcode_653 R_L_OR_675_wire_constant) (EQ_u8_u1_676_wire)   $flowthrough 
    $delay EQ_u8_u1_676_inst 0
    // (iretire_opcode == L_XNOR)
    ==[EQ_u8_u1_679_inst] (iretire_opcode_653 R_L_XNOR_678_wire_constant) (EQ_u8_u1_679_wire)   $flowthrough 
    $delay EQ_u8_u1_679_inst 0
    // ((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR))
    |[OR_u1_u1_680_inst] (EQ_u8_u1_676_wire EQ_u8_u1_679_wire) (OR_u1_u1_680_wire)   $flowthrough 
    $delay OR_u1_u1_680_inst 0
    // (iretire_opcode == ADD)
    ==[EQ_u8_u1_683_inst] (iretire_opcode_653 R_ADD_682_wire_constant) (EQ_u8_u1_683_wire)   $flowthrough 
    $delay EQ_u8_u1_683_inst 0
    // (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD))
    |[OR_u1_u1_684_inst] (OR_u1_u1_680_wire EQ_u8_u1_683_wire) (OR_u1_u1_684_wire)   $flowthrough 
    $delay OR_u1_u1_684_inst 0
    // ((((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND)) | (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD)))
    |[OR_u1_u1_685_inst] (OR_u1_u1_673_wire OR_u1_u1_684_wire) (OR_u1_u1_685_wire)   $flowthrough 
    $delay OR_u1_u1_685_inst 0
    // (iretire_opcode == SUB)
    ==[EQ_u8_u1_688_inst] (iretire_opcode_653 R_SUB_687_wire_constant) (EQ_u8_u1_688_wire)   $flowthrough 
    $delay EQ_u8_u1_688_inst 0
    // (iretire_opcode == L_SLL)
    ==[EQ_u8_u1_691_inst] (iretire_opcode_653 R_L_SLL_690_wire_constant) (EQ_u8_u1_691_wire)   $flowthrough 
    $delay EQ_u8_u1_691_inst 0
    // ((iretire_opcode == SUB) | (iretire_opcode == L_SLL))
    |[OR_u1_u1_692_inst] (EQ_u8_u1_688_wire EQ_u8_u1_691_wire) (OR_u1_u1_692_wire)   $flowthrough 
    $delay OR_u1_u1_692_inst 0
    // (iretire_opcode == L_SRL)
    ==[EQ_u8_u1_695_inst] (iretire_opcode_653 R_L_SRL_694_wire_constant) (EQ_u8_u1_695_wire)   $flowthrough 
    $delay EQ_u8_u1_695_inst 0
    // (((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL))
    |[OR_u1_u1_696_inst] (OR_u1_u1_692_wire EQ_u8_u1_695_wire) (OR_u1_u1_696_wire)   $flowthrough 
    $delay OR_u1_u1_696_inst 0
    // (iretire_opcode == L_SRA)
    ==[EQ_u8_u1_699_inst] (iretire_opcode_653 R_L_SRA_698_wire_constant) (EQ_u8_u1_699_wire)   $flowthrough 
    $delay EQ_u8_u1_699_inst 0
    // (iretire_opcode == CALL)
    ==[EQ_u8_u1_702_inst] (iretire_opcode_653 R_CALL_701_wire_constant) (EQ_u8_u1_702_wire)   $flowthrough 
    $delay EQ_u8_u1_702_inst 0
    // ((iretire_opcode == L_SRA) | (iretire_opcode == CALL))
    |[OR_u1_u1_703_inst] (EQ_u8_u1_699_wire EQ_u8_u1_702_wire) (OR_u1_u1_703_wire)   $flowthrough 
    $delay OR_u1_u1_703_inst 0
    // (iretire_opcode == CMP)
    ==[EQ_u8_u1_706_inst] (iretire_opcode_653 R_CMP_705_wire_constant) (EQ_u8_u1_706_wire)   $flowthrough 
    $delay EQ_u8_u1_706_inst 0
    // (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP))
    |[OR_u1_u1_707_inst] (OR_u1_u1_703_wire EQ_u8_u1_706_wire) (OR_u1_u1_707_wire)   $flowthrough 
    $delay OR_u1_u1_707_inst 0
    // ((((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL)) | (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP)))
    |[OR_u1_u1_708_inst] (OR_u1_u1_696_wire OR_u1_u1_707_wire) (OR_u1_u1_708_wire)   $flowthrough 
    $delay OR_u1_u1_708_inst 0
    // (((((iretire_opcode == SBIR) | (iretire_opcode == LOAD)) | (iretire_opcode == L_AND)) | (((iretire_opcode == L_OR) | (iretire_opcode == L_XNOR)) | (iretire_opcode == ADD))) | ((((iretire_opcode == SUB) | (iretire_opcode == L_SLL)) | (iretire_opcode == L_SRL)) | (((iretire_opcode == L_SRA) | (iretire_opcode == CALL)) | (iretire_opcode == CMP))))
    |[OR_u1_u1_709_inst] (OR_u1_u1_685_wire OR_u1_u1_708_wire) (iretire_state_reg_write_710)   $flowthrough 
    $delay OR_u1_u1_709_inst 0
    // 	$volatile iretire_state_to_ex_rs1_imm := ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs1_imm))
    //  file prog.linked.opt.aa, line 169
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_714_inst] (iretire_state_reg_write_710 R_one_1_713_wire_constant) (EQ_u1_u1_714_wire)   $flowthrough 
    $delay EQ_u1_u1_714_inst 0
    // (iretire_rd == ex_rs1_imm)
    ==[EQ_u8_u1_717_inst] (iretire_rd_661 ex_rs1_imm_546) (EQ_u8_u1_717_wire)   $flowthrough 
    $delay EQ_u8_u1_717_inst 0
    // ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs1_imm))
    &[AND_u1_u1_718_inst] (EQ_u1_u1_714_wire EQ_u8_u1_717_wire) (iretire_state_to_ex_rs1_imm_719)   $flowthrough 
    $delay AND_u1_u1_718_inst 0
    // 	$volatile iretire_state_to_ex_rs2 := ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs2))
    //  file prog.linked.opt.aa, line 170
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_723_inst] (iretire_state_reg_write_710 R_one_1_722_wire_constant) (EQ_u1_u1_723_wire)   $flowthrough 
    $delay EQ_u1_u1_723_inst 0
    // (iretire_rd == ex_rs2)
    ==[EQ_u8_u1_726_inst] (iretire_rd_661 ex_rs2_550) (EQ_u8_u1_726_wire)   $flowthrough 
    $delay EQ_u8_u1_726_inst 0
    // ((iretire_state_reg_write == one_1) & (iretire_rd == ex_rs2))
    &[AND_u1_u1_727_inst] (EQ_u1_u1_723_wire EQ_u8_u1_726_wire) (iretire_state_to_ex_rs2_728)   $flowthrough 
    $delay AND_u1_u1_727_inst 0
    // 	$volatile iretire_state_to_dcache_addr := ((iretire_state_reg_write == one_1) & (dcache_rs1_imm == iretire_rd))
    //  file prog.linked.opt.aa, line 171
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_732_inst] (iretire_state_reg_write_710 R_one_1_731_wire_constant) (EQ_u1_u1_732_wire)   $flowthrough 
    $delay EQ_u1_u1_732_inst 0
    // (dcache_rs1_imm == iretire_rd)
    ==[EQ_u8_u1_735_inst] (dcache_rs1_imm_574 iretire_rd_661) (EQ_u8_u1_735_wire)   $flowthrough 
    $delay EQ_u8_u1_735_inst 0
    // ((iretire_state_reg_write == one_1) & (dcache_rs1_imm == iretire_rd))
    &[AND_u1_u1_736_inst] (EQ_u1_u1_732_wire EQ_u8_u1_735_wire) (iretire_state_to_dcache_addr_737)   $flowthrough 
    $delay AND_u1_u1_736_inst 0
    // 	$volatile iretire_state_to_dcache_memData := ((iretire_state_reg_write == one_1) & (dcache_rs2 == iretire_rd))
    //  file prog.linked.opt.aa, line 172
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_741_inst] (iretire_state_reg_write_710 R_one_1_740_wire_constant) (EQ_u1_u1_741_wire)   $flowthrough 
    $delay EQ_u1_u1_741_inst 0
    // (dcache_rs2 == iretire_rd)
    ==[EQ_u8_u1_744_inst] (dcache_rs2_578 iretire_rd_661) (EQ_u8_u1_744_wire)   $flowthrough 
    $delay EQ_u8_u1_744_inst 0
    // ((iretire_state_reg_write == one_1) & (dcache_rs2 == iretire_rd))
    &[AND_u1_u1_745_inst] (EQ_u1_u1_741_wire EQ_u8_u1_744_wire) (iretire_state_to_dcache_memData_746)   $flowthrough 
    $delay AND_u1_u1_745_inst 0
    // 	$volatile iregfile_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 173
    // ( $slice iregfile_state 41 34 ) 
    [:] [slice_749_inst] (iregfile_state 41 34) (iregfile_opcode_750)  $flowthrough
    $delay slice_749_inst 0
    // 	$volatile iregfile_rs1_imm := ( $slice iregfile_state 33 26 ) 
    //  file prog.linked.opt.aa, line 174
    // ( $slice iregfile_state 33 26 ) 
    [:] [slice_753_inst] (iregfile_state 33 26) (iregfile_rs1_imm_754)  $flowthrough
    $delay slice_753_inst 0
    // 	$volatile iregfile_rs2 := ( $slice iregfile_state 25 18 ) 
    //  file prog.linked.opt.aa, line 175
    // ( $slice iregfile_state 25 18 ) 
    [:] [slice_757_inst] (iregfile_state 25 18) (iregfile_rs2_758)  $flowthrough
    $delay slice_757_inst 0
    // 	$volatile iretire_state_to_rs1_imm := ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs1_imm))
    //  file prog.linked.opt.aa, line 176
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_762_inst] (iretire_state_reg_write_710 R_one_1_761_wire_constant) (EQ_u1_u1_762_wire)   $flowthrough 
    $delay EQ_u1_u1_762_inst 0
    // (iretire_rd == iregfile_rs1_imm)
    ==[EQ_u8_u1_765_inst] (iretire_rd_661 iregfile_rs1_imm_754) (EQ_u8_u1_765_wire)   $flowthrough 
    $delay EQ_u8_u1_765_inst 0
    // ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs1_imm))
    &[AND_u1_u1_766_inst] (EQ_u1_u1_762_wire EQ_u8_u1_765_wire) (iretire_state_to_rs1_imm_767)   $flowthrough 
    $delay AND_u1_u1_766_inst 0
    // 	$volatile iretire_state_to_rs2 := ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs2))
    //  file prog.linked.opt.aa, line 177
    // (iretire_state_reg_write == one_1)
    ==[EQ_u1_u1_771_inst] (iretire_state_reg_write_710 R_one_1_770_wire_constant) (EQ_u1_u1_771_wire)   $flowthrough 
    $delay EQ_u1_u1_771_inst 0
    // (iretire_rd == iregfile_rs2)
    ==[EQ_u8_u1_774_inst] (iretire_rd_661 iregfile_rs2_758) (EQ_u8_u1_774_wire)   $flowthrough 
    $delay EQ_u8_u1_774_inst 0
    // ((iretire_state_reg_write == one_1) & (iretire_rd == iregfile_rs2))
    &[AND_u1_u1_775_inst] (EQ_u1_u1_771_wire EQ_u8_u1_774_wire) (iretire_state_to_rs2_776)   $flowthrough 
    $delay AND_u1_u1_775_inst 0
    // 	$volatile stall_first_4 := (((ex_opcode == LOAD) & ( ~ (iregfile_opcode == zero_8) )) & (( ~ (iregfile_opcode == STORE) ) & ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd))))
    //  file prog.linked.opt.aa, line 178
    // (ex_opcode == LOAD)
    ==[EQ_u8_u1_780_inst] (ex_opcode_542 R_LOAD_779_wire_constant) (EQ_u8_u1_780_wire)   $flowthrough 
    $delay EQ_u8_u1_780_inst 0
    // (iregfile_opcode == zero_8)
    ==[EQ_u8_u1_783_inst] (iregfile_opcode_750 R_zero_8_782_wire_constant) (EQ_u8_u1_783_wire)   $flowthrough 
    $delay EQ_u8_u1_783_inst 0
    // ( ~ (iregfile_opcode == zero_8) )
    ~ [NOT_u1_u1_784_inst] (EQ_u8_u1_783_wire) (NOT_u1_u1_784_wire)   $flowthrough
    $delay NOT_u1_u1_784_inst 0
    // ((ex_opcode == LOAD) & ( ~ (iregfile_opcode == zero_8) ))
    &[AND_u1_u1_785_inst] (EQ_u8_u1_780_wire NOT_u1_u1_784_wire) (AND_u1_u1_785_wire)   $flowthrough 
    $delay AND_u1_u1_785_inst 0
    // (iregfile_opcode == STORE)
    ==[EQ_u8_u1_788_inst] (iregfile_opcode_750 R_STORE_787_wire_constant) (EQ_u8_u1_788_wire)   $flowthrough 
    $delay EQ_u8_u1_788_inst 0
    // ( ~ (iregfile_opcode == STORE) )
    ~ [NOT_u1_u1_789_inst] (EQ_u8_u1_788_wire) (NOT_u1_u1_789_wire)   $flowthrough
    $delay NOT_u1_u1_789_inst 0
    // (iretire_rs1_imm == ex_rd)
    ==[EQ_u8_u1_792_inst] (iretire_rs1_imm_657 ex_rd_554) (EQ_u8_u1_792_wire)   $flowthrough 
    $delay EQ_u8_u1_792_inst 0
    // (iregfile_rs2 == ex_rd)
    ==[EQ_u8_u1_795_inst] (iregfile_rs2_758 ex_rd_554) (EQ_u8_u1_795_wire)   $flowthrough 
    $delay EQ_u8_u1_795_inst 0
    // ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd))
    |[OR_u1_u1_796_inst] (EQ_u8_u1_792_wire EQ_u8_u1_795_wire) (OR_u1_u1_796_wire)   $flowthrough 
    $delay OR_u1_u1_796_inst 0
    // (( ~ (iregfile_opcode == STORE) ) & ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd)))
    &[AND_u1_u1_797_inst] (NOT_u1_u1_789_wire OR_u1_u1_796_wire) (AND_u1_u1_797_wire)   $flowthrough 
    $delay AND_u1_u1_797_inst 0
    // (((ex_opcode == LOAD) & ( ~ (iregfile_opcode == zero_8) )) & (( ~ (iregfile_opcode == STORE) ) & ((iretire_rs1_imm == ex_rd) | (iregfile_rs2 == ex_rd))))
    &[AND_u1_u1_798_inst] (AND_u1_u1_785_wire AND_u1_u1_797_wire) (stall_first_4)   $flowthrough 
    $delay AND_u1_u1_798_inst 0
    // 	$volatile flush_ifetch := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 179
    // (is_Branch == one_1)
    ==[EQ_u1_u1_803_inst] (is_Branch_538 R_one_1_802_wire_constant) (EQ_u1_u1_803_wire)   $flowthrough 
    $delay EQ_u1_u1_803_inst 0
    // (ex_Unconditional_JUMP == one_1)
    ==[EQ_u1_u1_806_inst] (ex_Unconditional_JUMP R_one_1_805_wire_constant) (EQ_u1_u1_806_wire)   $flowthrough 
    $delay EQ_u1_u1_806_inst 0
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    |[OR_u1_u1_807_inst] (EQ_u1_u1_803_wire EQ_u1_u1_806_wire) (flush_ifetch)   $flowthrough 
    $delay OR_u1_u1_807_inst 0
    // 	$volatile flush_icache := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 180
    // (is_Branch == one_1)
    ==[EQ_u1_u1_812_inst] (is_Branch_538 R_one_1_811_wire_constant) (EQ_u1_u1_812_wire)   $flowthrough 
    $delay EQ_u1_u1_812_inst 0
    // (ex_Unconditional_JUMP == one_1)
    ==[EQ_u1_u1_815_inst] (ex_Unconditional_JUMP R_one_1_814_wire_constant) (EQ_u1_u1_815_wire)   $flowthrough 
    $delay EQ_u1_u1_815_inst 0
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    |[OR_u1_u1_816_inst] (EQ_u1_u1_812_wire EQ_u1_u1_815_wire) (flush_icache)   $flowthrough 
    $delay OR_u1_u1_816_inst 0
    // 	$volatile flush_idecode := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 181
    // (is_Branch == one_1)
    ==[EQ_u1_u1_821_inst] (is_Branch_538 R_one_1_820_wire_constant) (EQ_u1_u1_821_wire)   $flowthrough 
    $delay EQ_u1_u1_821_inst 0
    // (ex_Unconditional_JUMP == one_1)
    ==[EQ_u1_u1_824_inst] (ex_Unconditional_JUMP R_one_1_823_wire_constant) (EQ_u1_u1_824_wire)   $flowthrough 
    $delay EQ_u1_u1_824_inst 0
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    |[OR_u1_u1_825_inst] (EQ_u1_u1_821_wire EQ_u1_u1_824_wire) (flush_idecode)   $flowthrough 
    $delay OR_u1_u1_825_inst 0
    // 	$volatile flush_reg := ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    //  file prog.linked.opt.aa, line 182
    // (is_Branch == one_1)
    ==[EQ_u1_u1_830_inst] (is_Branch_538 R_one_1_829_wire_constant) (EQ_u1_u1_830_wire)   $flowthrough 
    $delay EQ_u1_u1_830_inst 0
    // (ex_Unconditional_JUMP == one_1)
    ==[EQ_u1_u1_833_inst] (ex_Unconditional_JUMP R_one_1_832_wire_constant) (EQ_u1_u1_833_wire)   $flowthrough 
    $delay EQ_u1_u1_833_inst 0
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    |[OR_u1_u1_834_inst] (EQ_u1_u1_830_wire EQ_u1_u1_833_wire) (flush_reg)   $flowthrough 
    $delay OR_u1_u1_834_inst 0
    // 	$volatile flush_iexec := (((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1)) | (stall_first_4 == one_1))
    //  file prog.linked.opt.aa, line 183
    // (is_Branch == one_1)
    ==[EQ_u1_u1_839_inst] (is_Branch_538 R_one_1_838_wire_constant) (EQ_u1_u1_839_wire)   $flowthrough 
    $delay EQ_u1_u1_839_inst 0
    // (ex_Unconditional_JUMP == one_1)
    ==[EQ_u1_u1_842_inst] (ex_Unconditional_JUMP R_one_1_841_wire_constant) (EQ_u1_u1_842_wire)   $flowthrough 
    $delay EQ_u1_u1_842_inst 0
    // ((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1))
    |[OR_u1_u1_843_inst] (EQ_u1_u1_839_wire EQ_u1_u1_842_wire) (OR_u1_u1_843_wire)   $flowthrough 
    $delay OR_u1_u1_843_inst 0
    // (stall_first_4 == one_1)
    ==[EQ_u1_u1_846_inst] (stall_first_4 R_one_1_845_wire_constant) (EQ_u1_u1_846_wire)   $flowthrough 
    $delay EQ_u1_u1_846_inst 0
    // (((is_Branch == one_1) | (ex_Unconditional_JUMP == one_1)) | (stall_first_4 == one_1))
    |[OR_u1_u1_847_inst] (OR_u1_u1_843_wire EQ_u1_u1_846_wire) (flush_iexec)   $flowthrough 
    $delay OR_u1_u1_847_inst 0
    // 	$volatile flush_dcache := is_Branch
    //  file prog.linked.opt.aa, line 184
    # := [W_flush_dcache_849_inst] (is_Branch_538) (flush_dcache)   $flowthrough 
    // 	$volatile ifetch_actions := ifetch_state
    //  file prog.linked.opt.aa, line 185
    # := [W_ifetch_actions_852_inst] (ifetch_state) (ifetch_actions)   $flowthrough 
    // 	$volatile icache_actions := icache_state
    //  file prog.linked.opt.aa, line 186
    # := [W_icache_actions_855_inst] (icache_state) (icache_actions)   $flowthrough 
    // 	$volatile idecode_actions := idecode_state
    //  file prog.linked.opt.aa, line 187
    # := [W_idecode_actions_858_inst] (idecode_state) (idecode_actions)   $flowthrough 
    // 	$volatile iregfile_state_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 188
    // ( $slice iregfile_state 41 34 ) 
    [:] [slice_863_inst] (iregfile_state 41 34) (iregfile_state_opcode_864)  $flowthrough
    $delay slice_863_inst 0
    // 	$volatile reg_valid_read1 := ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 189
    // (iregfile_state_opcode == 0 )
    ==[EQ_u8_u1_868_inst] (iregfile_state_opcode_864 konst_867_wire_constant) (EQ_u8_u1_868_wire)   $flowthrough 
    $delay EQ_u8_u1_868_inst 0
    // ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    ? [MUX_871_inst] (EQ_u8_u1_868_wire R_zero_1_869_wire_constant R_one_1_870_wire_constant) (reg_valid_read1_872)  $flowthrough
    // 	$volatile reg_valid_read2 := ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 190
    // (iregfile_state_opcode == 0 )
    ==[EQ_u8_u1_876_inst] (iregfile_state_opcode_864 konst_875_wire_constant) (EQ_u8_u1_876_wire)   $flowthrough 
    $delay EQ_u8_u1_876_inst 0
    // ( $mux (iregfile_state_opcode == 0 ) zero_1  one_1 ) 
    ? [MUX_879_inst] (EQ_u8_u1_876_wire R_zero_1_877_wire_constant R_one_1_878_wire_constant) (reg_valid_read2_880)  $flowthrough
    // 	$volatile reg_valid_write := iretire_state_reg_write
    //  file prog.linked.opt.aa, line 191
    # := [W_reg_valid_write_881_inst] (iretire_state_reg_write_710) (reg_valid_write_883)   $flowthrough 
    // 	$volatile iregfile_actions := (((reg_valid_read1 && reg_valid_read2) && reg_valid_write) && (iretire_state_to_rs1_imm && iretire_state_to_rs2))
    //  file prog.linked.opt.aa, line 192
    // (reg_valid_read1 && reg_valid_read2)
    &&[CONCAT_u1_u2_887_inst] (reg_valid_read1_872 reg_valid_read2_880) (CONCAT_u1_u2_887_wire)   $flowthrough 
    $delay CONCAT_u1_u2_887_inst 0
    // ((reg_valid_read1 && reg_valid_read2) && reg_valid_write)
    &&[CONCAT_u2_u3_889_inst] (CONCAT_u1_u2_887_wire reg_valid_write_883) (CONCAT_u2_u3_889_wire)   $flowthrough 
    $delay CONCAT_u2_u3_889_inst 0
    // (iretire_state_to_rs1_imm && iretire_state_to_rs2)
    &&[CONCAT_u1_u2_892_inst] (iretire_state_to_rs1_imm_767 iretire_state_to_rs2_776) (CONCAT_u1_u2_892_wire)   $flowthrough 
    $delay CONCAT_u1_u2_892_inst 0
    // (((reg_valid_read1 && reg_valid_read2) && reg_valid_write) && (iretire_state_to_rs1_imm && iretire_state_to_rs2))
    &&[CONCAT_u3_u5_893_inst] (CONCAT_u2_u3_889_wire CONCAT_u1_u2_892_wire) (iregfile_actions)   $flowthrough 
    $delay CONCAT_u3_u5_893_inst 0
    // 	$volatile iexec_actions := ((dcache_to_ex_rs1_imm && dcache_to_ex_rs2) && (iretire_state_to_ex_rs1_imm && iretire_state_to_ex_rs2))
    //  file prog.linked.opt.aa, line 193
    // (dcache_to_ex_rs1_imm && dcache_to_ex_rs2)
    &&[CONCAT_u1_u2_898_inst] (dcache_to_ex_rs1_imm_640 dcache_to_ex_rs2_649) (CONCAT_u1_u2_898_wire)   $flowthrough 
    $delay CONCAT_u1_u2_898_inst 0
    // (iretire_state_to_ex_rs1_imm && iretire_state_to_ex_rs2)
    &&[CONCAT_u1_u2_901_inst] (iretire_state_to_ex_rs1_imm_719 iretire_state_to_ex_rs2_728) (CONCAT_u1_u2_901_wire)   $flowthrough 
    $delay CONCAT_u1_u2_901_inst 0
    // ((dcache_to_ex_rs1_imm && dcache_to_ex_rs2) && (iretire_state_to_ex_rs1_imm && iretire_state_to_ex_rs2))
    &&[CONCAT_u2_u4_902_inst] (CONCAT_u1_u2_898_wire CONCAT_u1_u2_901_wire) (iexec_actions)   $flowthrough 
    $delay CONCAT_u2_u4_902_inst 0
    // 	$volatile memWrite := ( $mux (dcache_opcode == STORE) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 194
    // (dcache_opcode == STORE)
    ==[EQ_u8_u1_907_inst] (dcache_opcode_570 R_STORE_906_wire_constant) (EQ_u8_u1_907_wire)   $flowthrough 
    $delay EQ_u8_u1_907_inst 0
    // ( $mux (dcache_opcode == STORE) zero_1  one_1 ) 
    ? [MUX_910_inst] (EQ_u8_u1_907_wire R_zero_1_908_wire_constant R_one_1_909_wire_constant) (memWrite_911)  $flowthrough
    // 	$volatile dcache_actions := ((memWrite && iretire_state_to_dcache_addr) && iretire_state_to_dcache_memData)
    //  file prog.linked.opt.aa, line 195
    // (memWrite && iretire_state_to_dcache_addr)
    &&[CONCAT_u1_u2_915_inst] (memWrite_911 iretire_state_to_dcache_addr_737) (CONCAT_u1_u2_915_wire)   $flowthrough 
    $delay CONCAT_u1_u2_915_inst 0
    // ((memWrite && iretire_state_to_dcache_addr) && iretire_state_to_dcache_memData)
    &&[CONCAT_u2_u3_917_inst] (CONCAT_u1_u2_915_wire iretire_state_to_dcache_memData_746) (dcache_actions)   $flowthrough 
    $delay CONCAT_u2_u3_917_inst 0
  }
  // end data-path
  // Volatile module.. no links.
}
$module [processor_daemon] 
{
  // pipe-declarations for block %processor_daemon
  //  file prog.linked.opt.aa, line 197
  // pipe-declarations for block %processor_daemon%check_start
  //  file prog.linked.opt.aa, line 202
  // pipe-declarations for block %processor_daemon%check_start%
  //  file prog.linked.opt.aa, line 204
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_921] // Branch Block  file prog.linked.opt.aa, line 202
    {
      $P [branch_block_stmt_921__entry__]
      branch_block_stmt_921__entry__ <-| ($entry)
      $P [branch_block_stmt_921__exit__]
      branch_block_stmt_921__exit__ |-> ($exit)
      $P [merge_stmt_922__entry__] 
      $P [merge_stmt_922__exit__] 
      $P [assign_stmt_925__entry__] 
      $P [assign_stmt_925__exit__] 
      $P [if_stmt_926__entry__] 
      $P [if_stmt_926__exit__] 
      ::[assign_stmt_925] 
      {
        // start:  		cmd := start_processor// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 206
        // Source expression
        // start_processor
        $T[RPIPE_start_processor_924_sample_start_] 
        $T[RPIPE_start_processor_924_sample_completed_] 
        $T[RPIPE_start_processor_924_update_start_] 
        $T[RPIPE_start_processor_924_update_completed_] 
        ;;[RPIPE_start_processor_924_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_start_processor_924_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_start_processor_924_sample_start_ &-> (RPIPE_start_processor_924_Sample)
        RPIPE_start_processor_924_sample_completed_ <-& (RPIPE_start_processor_924_Sample)
        RPIPE_start_processor_924_update_start_ <-& (RPIPE_start_processor_924_sample_completed_)
        RPIPE_start_processor_924_update_start_ &-> (RPIPE_start_processor_924_Update)
        RPIPE_start_processor_924_update_completed_ <-& (RPIPE_start_processor_924_Update)
        // Target expression
        // (as target) cmd
        // start: WAR dependencies for cmd
        // done: WAR dependencies for cmd
        // end:  		cmd := start_processor// bits of buffering = 8. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe start_processor
        // read-dependencies for pipe start_processor
        // write-dependencies for pipe start_processor
        // signal dependencies for start_processor
      }
      assign_stmt_925__entry__ |-> (assign_stmt_925)
      assign_stmt_925__exit__ <-| (assign_stmt_925)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_926_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_926__entry__ |-> (if_stmt_926_dead_link)
      if_stmt_926__exit__ <-| (if_stmt_926_dead_link)
      ;;[if_stmt_926_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (cmd == one_8)
        ;;[EQ_u8_u1_929] 
        {
          // binary expression 
          ||[EQ_u8_u1_929_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_926__entry__ |-> (if_stmt_926_eval_test)
      $P [EQ_u8_u1_929_place]
      EQ_u8_u1_929_place <-| (if_stmt_926_eval_test)
      ;;[if_stmt_926_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_926_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_929_place |-> (if_stmt_926_if_link if_stmt_926_else_link)
      $P [branch_block_stmt_930__entry__] 
      $P [branch_block_stmt_930__exit__] 
      $P [check_for_start]
      <>[branch_block_stmt_930] // Branch Block  file prog.linked.opt.aa, line 208
      {
        $P [branch_block_stmt_930__entry__]
        branch_block_stmt_930__entry__ <-| ($entry)
        $P [branch_block_stmt_930__exit__]
        branch_block_stmt_930__exit__ |-> ($exit)
        $P [do_while_stmt_931__entry__] 
        $P [do_while_stmt_931__exit__] 
        // do-while-statement  
        //  file prog.linked.opt.aa, line 210
        <o> [do_while_stmt_931]  $depth 15 $buffering 2 
        {
          $P[do_while_stmt_931__entry__] 
          $P[do_while_stmt_931__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_931_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_933
            // 				$phi ifetch_state := 				  one_10 $on   $entry 				  next_ifetch_state $on   $loopback 
            // type of target is $uint<10>
            $T[phi_stmt_933_sample_start_] 
            $T[phi_stmt_933_sample_completed_] 
            $T[phi_stmt_933_update_start_] 
            $T[phi_stmt_933_update_completed_] 
            $T[phi_stmt_933_sample_start__ps] 
            phi_stmt_933_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_933_sample_completed__ps] 
            phi_stmt_933_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_933_update_start__ps] 
            phi_stmt_933_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_933_update_completed__ps] 
            phi_stmt_933_update_completed_ <-& (phi_stmt_933_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_933_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_933_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_933_update_start_)
            $T[phi_stmt_933_loopback_trigger] 
            phi_stmt_933_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_933_loopback_sample_req] 
            $T[phi_stmt_933_loopback_sample_req_ps] 
            phi_stmt_933_loopback_sample_req <-& (phi_stmt_933_loopback_sample_req_ps)
            phi_stmt_933_loopback_sample_req &-> ($null)
            $T[phi_stmt_933_entry_trigger] 
            phi_stmt_933_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_933_entry_sample_req] 
            $T[phi_stmt_933_entry_sample_req_ps] 
            phi_stmt_933_entry_sample_req <-& (phi_stmt_933_entry_sample_req_ps)
            phi_stmt_933_entry_sample_req &-> ($null)
            phi_stmt_933_update_start_ o<-& (phi_stmt_933_update_completed_ 0)
            phi_stmt_933_sample_start_ o<-& (phi_stmt_933_sample_completed_ 1)
            $T[phi_stmt_933_merged_reqs] 
            $T[phi_stmt_933_phi_mux_ack] 
            $T[phi_stmt_933_phi_mux_ack_ps] 
            phi_stmt_933_phi_mux_ack_ps <-& (phi_stmt_933_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_933_update_completed_)
            $T[R_one_10_935_sample_start__ps] 
            $T[R_one_10_935_sample_completed__ps] 
            $T[R_one_10_935_update_start__ps] 
            $T[R_one_10_935_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[R_one_10_935_sample_start_] 
            $T[R_one_10_935_sample_completed_] 
            R_one_10_935_sample_completed_ <-& (R_one_10_935_sample_start_)
            $T[R_one_10_935_update_start_] 
            $T [R_one_10_935_update_completed_] $delay 
            R_one_10_935_update_completed_ <-& (R_one_10_935_update_start_)
            // Phi start dependency for implicit/constant alternative.
            R_one_10_935_sample_start_ <-& (R_one_10_935_sample_start__ps)
            R_one_10_935_update_start_ <-& (R_one_10_935_update_start__ps)
            // Phi complete dependency.
            R_one_10_935_sample_completed__ps <-& (R_one_10_935_sample_completed_)
            R_one_10_935_update_completed__ps <-& (R_one_10_935_update_completed_)
            $T[R_next_ifetch_state_936_sample_start__ps] 
            $T[R_next_ifetch_state_936_sample_completed__ps] 
            $T[R_next_ifetch_state_936_update_start__ps] 
            $T[R_next_ifetch_state_936_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_next_ifetch_state_936_sample_start_] 
            $T[R_next_ifetch_state_936_sample_completed_] 
            $T[R_next_ifetch_state_936_update_start_] 
            $T[R_next_ifetch_state_936_update_completed_] 
            ;;[R_next_ifetch_state_936_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_next_ifetch_state_936_sample_start_ &-> (R_next_ifetch_state_936_Sample)
            R_next_ifetch_state_936_sample_completed_ <-& (R_next_ifetch_state_936_Sample)
            ;;[R_next_ifetch_state_936_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_next_ifetch_state_936_update_start_ &-> (R_next_ifetch_state_936_Update)
            R_next_ifetch_state_936_update_completed_ <-& (R_next_ifetch_state_936_Update)
            // RAW reenables for next_ifetch_state
            // Phi start dependency for implicit/constant alternative.
            R_next_ifetch_state_936_sample_start_ <-& (R_next_ifetch_state_936_sample_start__ps)
            R_next_ifetch_state_936_update_start_ <-& (R_next_ifetch_state_936_update_start__ps)
            // Phi complete dependency.
            R_next_ifetch_state_936_sample_completed__ps <-& (R_next_ifetch_state_936_sample_completed_)
            R_next_ifetch_state_936_update_completed__ps <-& (R_next_ifetch_state_936_update_completed_)
            $phisequencer [ phi_stmt_933_phi_seq] : 
            phi_stmt_933_entry_trigger R_one_10_935_sample_start__ps R_one_10_935_sample_completed__ps R_one_10_935_update_start__ps R_one_10_935_update_completed__ps phi_stmt_933_loopback_trigger R_next_ifetch_state_936_sample_start__ps R_next_ifetch_state_936_sample_completed__ps R_next_ifetch_state_936_update_start__ps R_next_ifetch_state_936_update_completed__ps :
            phi_stmt_933_sample_start__ps phi_stmt_933_sample_completed__ps phi_stmt_933_update_start__ps phi_stmt_933_update_completed__ps :
            phi_stmt_933_entry_sample_req_ps phi_stmt_933_loopback_sample_req_ps : 
            phi_stmt_933_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_933
            // start:  PHI statement phi_stmt_937
            // 				$phi icache_state := 				  _b0  $on   $entry 				  n_icache_state $on   $loopback 
            // type of target is $uint<10>
            $T[phi_stmt_937_sample_start_] 
            $T[phi_stmt_937_sample_completed_] 
            $T[phi_stmt_937_update_start_] 
            $T[phi_stmt_937_update_completed_] 
            $T[phi_stmt_937_sample_start__ps] 
            phi_stmt_937_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_937_sample_completed__ps] 
            phi_stmt_937_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_937_update_start__ps] 
            phi_stmt_937_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_937_update_completed__ps] 
            phi_stmt_937_update_completed_ <-& (phi_stmt_937_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_937_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_937_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_937_update_start_)
            $T[phi_stmt_937_loopback_trigger] 
            phi_stmt_937_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_937_loopback_sample_req] 
            $T[phi_stmt_937_loopback_sample_req_ps] 
            phi_stmt_937_loopback_sample_req <-& (phi_stmt_937_loopback_sample_req_ps)
            phi_stmt_937_loopback_sample_req &-> ($null)
            $T[phi_stmt_937_entry_trigger] 
            phi_stmt_937_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_937_entry_sample_req] 
            $T[phi_stmt_937_entry_sample_req_ps] 
            phi_stmt_937_entry_sample_req <-& (phi_stmt_937_entry_sample_req_ps)
            phi_stmt_937_entry_sample_req &-> ($null)
            phi_stmt_937_update_start_ o<-& (phi_stmt_937_update_completed_ 0)
            phi_stmt_937_sample_start_ o<-& (phi_stmt_937_sample_completed_ 1)
            $T[phi_stmt_937_merged_reqs] 
            $T[phi_stmt_937_phi_mux_ack] 
            $T[phi_stmt_937_phi_mux_ack_ps] 
            phi_stmt_937_phi_mux_ack_ps <-& (phi_stmt_937_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_937_update_completed_)
            $T[konst_939_sample_start__ps] 
            $T[konst_939_sample_completed__ps] 
            $T[konst_939_update_start__ps] 
            $T[konst_939_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_939_sample_start_] 
            $T[konst_939_sample_completed_] 
            konst_939_sample_completed_ <-& (konst_939_sample_start_)
            $T[konst_939_update_start_] 
            $T [konst_939_update_completed_] $delay 
            konst_939_update_completed_ <-& (konst_939_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_939_sample_start_ <-& (konst_939_sample_start__ps)
            konst_939_update_start_ <-& (konst_939_update_start__ps)
            // Phi complete dependency.
            konst_939_sample_completed__ps <-& (konst_939_sample_completed_)
            konst_939_update_completed__ps <-& (konst_939_update_completed_)
            $T[R_n_icache_state_940_sample_start__ps] 
            $T[R_n_icache_state_940_sample_completed__ps] 
            $T[R_n_icache_state_940_update_start__ps] 
            $T[R_n_icache_state_940_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_icache_state_940_sample_start_] 
            $T[R_n_icache_state_940_sample_completed_] 
            $T[R_n_icache_state_940_update_start_] 
            $T[R_n_icache_state_940_update_completed_] 
            ;;[R_n_icache_state_940_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_icache_state_940_sample_start_ &-> (R_n_icache_state_940_Sample)
            R_n_icache_state_940_sample_completed_ <-& (R_n_icache_state_940_Sample)
            ;;[R_n_icache_state_940_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_icache_state_940_update_start_ &-> (R_n_icache_state_940_Update)
            R_n_icache_state_940_update_completed_ <-& (R_n_icache_state_940_Update)
            // RAW reenables for n_icache_state
            // producer  and  consumer are both determined by PHI statements.
            // Phi start dependency for implicit/constant alternative.
            R_n_icache_state_940_sample_start_ <-& (R_n_icache_state_940_sample_start__ps)
            R_n_icache_state_940_update_start_ <-& (R_n_icache_state_940_update_start__ps)
            // Phi complete dependency.
            R_n_icache_state_940_sample_completed__ps <-& (R_n_icache_state_940_sample_completed_)
            R_n_icache_state_940_update_completed__ps <-& (R_n_icache_state_940_update_completed_)
            $phisequencer [ phi_stmt_937_phi_seq] : 
            phi_stmt_937_entry_trigger konst_939_sample_start__ps konst_939_sample_completed__ps konst_939_update_start__ps konst_939_update_completed__ps phi_stmt_937_loopback_trigger R_n_icache_state_940_sample_start__ps R_n_icache_state_940_sample_completed__ps R_n_icache_state_940_update_start__ps R_n_icache_state_940_update_completed__ps :
            phi_stmt_937_sample_start__ps phi_stmt_937_sample_completed__ps phi_stmt_937_update_start__ps phi_stmt_937_update_completed__ps :
            phi_stmt_937_entry_sample_req_ps phi_stmt_937_loopback_sample_req_ps : 
            phi_stmt_937_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_937
            // start:  PHI statement phi_stmt_941
            // 				$phi idecode_state := 				  _b0  $on   $entry 				  n_idecode_state $on   $loopback 
            // type of target is $uint<42>
            $T[phi_stmt_941_sample_start_] 
            $T[phi_stmt_941_sample_completed_] 
            $T[phi_stmt_941_update_start_] 
            $T[phi_stmt_941_update_completed_] 
            $T[phi_stmt_941_sample_start__ps] 
            phi_stmt_941_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_941_sample_completed__ps] 
            phi_stmt_941_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_941_update_start__ps] 
            phi_stmt_941_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_941_update_completed__ps] 
            phi_stmt_941_update_completed_ <-& (phi_stmt_941_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_941_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_941_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_941_update_start_)
            $T[phi_stmt_941_loopback_trigger] 
            phi_stmt_941_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_941_loopback_sample_req] 
            $T[phi_stmt_941_loopback_sample_req_ps] 
            phi_stmt_941_loopback_sample_req <-& (phi_stmt_941_loopback_sample_req_ps)
            phi_stmt_941_loopback_sample_req &-> ($null)
            $T[phi_stmt_941_entry_trigger] 
            phi_stmt_941_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_941_entry_sample_req] 
            $T[phi_stmt_941_entry_sample_req_ps] 
            phi_stmt_941_entry_sample_req <-& (phi_stmt_941_entry_sample_req_ps)
            phi_stmt_941_entry_sample_req &-> ($null)
            phi_stmt_941_update_start_ o<-& (phi_stmt_941_update_completed_ 0)
            phi_stmt_941_sample_start_ o<-& (phi_stmt_941_sample_completed_ 1)
            $T[phi_stmt_941_merged_reqs] 
            $T[phi_stmt_941_phi_mux_ack] 
            $T[phi_stmt_941_phi_mux_ack_ps] 
            phi_stmt_941_phi_mux_ack_ps <-& (phi_stmt_941_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_941_update_completed_)
            $T[konst_943_sample_start__ps] 
            $T[konst_943_sample_completed__ps] 
            $T[konst_943_update_start__ps] 
            $T[konst_943_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_943_sample_start_] 
            $T[konst_943_sample_completed_] 
            konst_943_sample_completed_ <-& (konst_943_sample_start_)
            $T[konst_943_update_start_] 
            $T [konst_943_update_completed_] $delay 
            konst_943_update_completed_ <-& (konst_943_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_943_sample_start_ <-& (konst_943_sample_start__ps)
            konst_943_update_start_ <-& (konst_943_update_start__ps)
            // Phi complete dependency.
            konst_943_sample_completed__ps <-& (konst_943_sample_completed_)
            konst_943_update_completed__ps <-& (konst_943_update_completed_)
            $T[R_n_idecode_state_944_sample_start__ps] 
            $T[R_n_idecode_state_944_sample_completed__ps] 
            $T[R_n_idecode_state_944_update_start__ps] 
            $T[R_n_idecode_state_944_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_idecode_state_944_sample_start_] 
            $T[R_n_idecode_state_944_sample_completed_] 
            $T[R_n_idecode_state_944_update_start_] 
            $T[R_n_idecode_state_944_update_completed_] 
            ;;[R_n_idecode_state_944_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_idecode_state_944_sample_start_ &-> (R_n_idecode_state_944_Sample)
            R_n_idecode_state_944_sample_completed_ <-& (R_n_idecode_state_944_Sample)
            ;;[R_n_idecode_state_944_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_idecode_state_944_update_start_ &-> (R_n_idecode_state_944_Update)
            R_n_idecode_state_944_update_completed_ <-& (R_n_idecode_state_944_Update)
            // RAW reenables for n_idecode_state
            // Phi start dependency for implicit/constant alternative.
            R_n_idecode_state_944_sample_start_ <-& (R_n_idecode_state_944_sample_start__ps)
            R_n_idecode_state_944_update_start_ <-& (R_n_idecode_state_944_update_start__ps)
            // Phi complete dependency.
            R_n_idecode_state_944_sample_completed__ps <-& (R_n_idecode_state_944_sample_completed_)
            R_n_idecode_state_944_update_completed__ps <-& (R_n_idecode_state_944_update_completed_)
            $phisequencer [ phi_stmt_941_phi_seq] : 
            phi_stmt_941_entry_trigger konst_943_sample_start__ps konst_943_sample_completed__ps konst_943_update_start__ps konst_943_update_completed__ps phi_stmt_941_loopback_trigger R_n_idecode_state_944_sample_start__ps R_n_idecode_state_944_sample_completed__ps R_n_idecode_state_944_update_start__ps R_n_idecode_state_944_update_completed__ps :
            phi_stmt_941_sample_start__ps phi_stmt_941_sample_completed__ps phi_stmt_941_update_start__ps phi_stmt_941_update_completed__ps :
            phi_stmt_941_entry_sample_req_ps phi_stmt_941_loopback_sample_req_ps : 
            phi_stmt_941_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_941
            // start:  PHI statement phi_stmt_945
            // 				$phi iregfile_state := 				  _b0  $on   $entry 				  n_iregfile_state $on   $loopback 
            // type of target is $uint<42>
            $T[phi_stmt_945_sample_start_] 
            $T[phi_stmt_945_sample_completed_] 
            $T[phi_stmt_945_update_start_] 
            $T[phi_stmt_945_update_completed_] 
            $T[phi_stmt_945_sample_start__ps] 
            phi_stmt_945_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_945_sample_completed__ps] 
            phi_stmt_945_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_945_update_start__ps] 
            phi_stmt_945_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_945_update_completed__ps] 
            phi_stmt_945_update_completed_ <-& (phi_stmt_945_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_945_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_945_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_945_update_start_)
            $T[phi_stmt_945_loopback_trigger] 
            phi_stmt_945_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_945_loopback_sample_req] 
            $T[phi_stmt_945_loopback_sample_req_ps] 
            phi_stmt_945_loopback_sample_req <-& (phi_stmt_945_loopback_sample_req_ps)
            phi_stmt_945_loopback_sample_req &-> ($null)
            $T[phi_stmt_945_entry_trigger] 
            phi_stmt_945_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_945_entry_sample_req] 
            $T[phi_stmt_945_entry_sample_req_ps] 
            phi_stmt_945_entry_sample_req <-& (phi_stmt_945_entry_sample_req_ps)
            phi_stmt_945_entry_sample_req &-> ($null)
            phi_stmt_945_update_start_ o<-& (phi_stmt_945_update_completed_ 0)
            phi_stmt_945_sample_start_ o<-& (phi_stmt_945_sample_completed_ 1)
            $T[phi_stmt_945_merged_reqs] 
            $T[phi_stmt_945_phi_mux_ack] 
            $T[phi_stmt_945_phi_mux_ack_ps] 
            phi_stmt_945_phi_mux_ack_ps <-& (phi_stmt_945_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_945_update_completed_)
            $T[konst_947_sample_start__ps] 
            $T[konst_947_sample_completed__ps] 
            $T[konst_947_update_start__ps] 
            $T[konst_947_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_947_sample_start_] 
            $T[konst_947_sample_completed_] 
            konst_947_sample_completed_ <-& (konst_947_sample_start_)
            $T[konst_947_update_start_] 
            $T [konst_947_update_completed_] $delay 
            konst_947_update_completed_ <-& (konst_947_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_947_sample_start_ <-& (konst_947_sample_start__ps)
            konst_947_update_start_ <-& (konst_947_update_start__ps)
            // Phi complete dependency.
            konst_947_sample_completed__ps <-& (konst_947_sample_completed_)
            konst_947_update_completed__ps <-& (konst_947_update_completed_)
            $T[R_n_iregfile_state_948_sample_start__ps] 
            $T[R_n_iregfile_state_948_sample_completed__ps] 
            $T[R_n_iregfile_state_948_update_start__ps] 
            $T[R_n_iregfile_state_948_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_iregfile_state_948_sample_start_] 
            $T[R_n_iregfile_state_948_sample_completed_] 
            $T[R_n_iregfile_state_948_update_start_] 
            $T[R_n_iregfile_state_948_update_completed_] 
            ;;[R_n_iregfile_state_948_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_iregfile_state_948_sample_start_ &-> (R_n_iregfile_state_948_Sample)
            R_n_iregfile_state_948_sample_completed_ <-& (R_n_iregfile_state_948_Sample)
            ;;[R_n_iregfile_state_948_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_iregfile_state_948_update_start_ &-> (R_n_iregfile_state_948_Update)
            R_n_iregfile_state_948_update_completed_ <-& (R_n_iregfile_state_948_Update)
            // RAW reenables for n_iregfile_state
            // producer  and  consumer are both determined by PHI statements.
            // producer  and  consumer are both determined by PHI statements.
            // producer  and  consumer are both determined by PHI statements.
            // Phi start dependency for implicit/constant alternative.
            R_n_iregfile_state_948_sample_start_ <-& (R_n_iregfile_state_948_sample_start__ps)
            R_n_iregfile_state_948_update_start_ <-& (R_n_iregfile_state_948_update_start__ps)
            // Phi complete dependency.
            R_n_iregfile_state_948_sample_completed__ps <-& (R_n_iregfile_state_948_sample_completed_)
            R_n_iregfile_state_948_update_completed__ps <-& (R_n_iregfile_state_948_update_completed_)
            $phisequencer [ phi_stmt_945_phi_seq] : 
            phi_stmt_945_entry_trigger konst_947_sample_start__ps konst_947_sample_completed__ps konst_947_update_start__ps konst_947_update_completed__ps phi_stmt_945_loopback_trigger R_n_iregfile_state_948_sample_start__ps R_n_iregfile_state_948_sample_completed__ps R_n_iregfile_state_948_update_start__ps R_n_iregfile_state_948_update_completed__ps :
            phi_stmt_945_sample_start__ps phi_stmt_945_sample_completed__ps phi_stmt_945_update_start__ps phi_stmt_945_update_completed__ps :
            phi_stmt_945_entry_sample_req_ps phi_stmt_945_loopback_sample_req_ps : 
            phi_stmt_945_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_945
            // start:  PHI statement phi_stmt_949
            // 				$phi iexec_state := 				  _b0  $on   $entry 				  n_iexec_state $on   $loopback 
            // type of target is $uint<106>
            $T[phi_stmt_949_sample_start_] 
            $T[phi_stmt_949_sample_completed_] 
            $T[phi_stmt_949_update_start_] 
            $T[phi_stmt_949_update_completed_] 
            $T[phi_stmt_949_sample_start__ps] 
            phi_stmt_949_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_949_sample_completed__ps] 
            phi_stmt_949_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_949_update_start__ps] 
            phi_stmt_949_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_949_update_completed__ps] 
            phi_stmt_949_update_completed_ <-& (phi_stmt_949_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_949_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_949_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_949_update_start_)
            $T[phi_stmt_949_loopback_trigger] 
            phi_stmt_949_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_949_loopback_sample_req] 
            $T[phi_stmt_949_loopback_sample_req_ps] 
            phi_stmt_949_loopback_sample_req <-& (phi_stmt_949_loopback_sample_req_ps)
            phi_stmt_949_loopback_sample_req &-> ($null)
            $T[phi_stmt_949_entry_trigger] 
            phi_stmt_949_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_949_entry_sample_req] 
            $T[phi_stmt_949_entry_sample_req_ps] 
            phi_stmt_949_entry_sample_req <-& (phi_stmt_949_entry_sample_req_ps)
            phi_stmt_949_entry_sample_req &-> ($null)
            phi_stmt_949_update_start_ o<-& (phi_stmt_949_update_completed_ 0)
            phi_stmt_949_sample_start_ o<-& (phi_stmt_949_sample_completed_ 1)
            $T[phi_stmt_949_merged_reqs] 
            $T[phi_stmt_949_phi_mux_ack] 
            $T[phi_stmt_949_phi_mux_ack_ps] 
            phi_stmt_949_phi_mux_ack_ps <-& (phi_stmt_949_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_949_update_completed_)
            $T[konst_951_sample_start__ps] 
            $T[konst_951_sample_completed__ps] 
            $T[konst_951_update_start__ps] 
            $T[konst_951_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_951_sample_start_] 
            $T[konst_951_sample_completed_] 
            konst_951_sample_completed_ <-& (konst_951_sample_start_)
            $T[konst_951_update_start_] 
            $T [konst_951_update_completed_] $delay 
            konst_951_update_completed_ <-& (konst_951_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_951_sample_start_ <-& (konst_951_sample_start__ps)
            konst_951_update_start_ <-& (konst_951_update_start__ps)
            // Phi complete dependency.
            konst_951_sample_completed__ps <-& (konst_951_sample_completed_)
            konst_951_update_completed__ps <-& (konst_951_update_completed_)
            $T[R_n_iexec_state_952_sample_start__ps] 
            $T[R_n_iexec_state_952_sample_completed__ps] 
            $T[R_n_iexec_state_952_update_start__ps] 
            $T[R_n_iexec_state_952_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_iexec_state_952_sample_start_] 
            $T[R_n_iexec_state_952_sample_completed_] 
            $T[R_n_iexec_state_952_update_start_] 
            $T[R_n_iexec_state_952_update_completed_] 
            ;;[R_n_iexec_state_952_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_iexec_state_952_sample_start_ &-> (R_n_iexec_state_952_Sample)
            R_n_iexec_state_952_sample_completed_ <-& (R_n_iexec_state_952_Sample)
            ;;[R_n_iexec_state_952_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_iexec_state_952_update_start_ &-> (R_n_iexec_state_952_Update)
            R_n_iexec_state_952_update_completed_ <-& (R_n_iexec_state_952_Update)
            // RAW reenables for n_iexec_state
            // Phi start dependency for implicit/constant alternative.
            R_n_iexec_state_952_sample_start_ <-& (R_n_iexec_state_952_sample_start__ps)
            R_n_iexec_state_952_update_start_ <-& (R_n_iexec_state_952_update_start__ps)
            // Phi complete dependency.
            R_n_iexec_state_952_sample_completed__ps <-& (R_n_iexec_state_952_sample_completed_)
            R_n_iexec_state_952_update_completed__ps <-& (R_n_iexec_state_952_update_completed_)
            $phisequencer [ phi_stmt_949_phi_seq] : 
            phi_stmt_949_entry_trigger konst_951_sample_start__ps konst_951_sample_completed__ps konst_951_update_start__ps konst_951_update_completed__ps phi_stmt_949_loopback_trigger R_n_iexec_state_952_sample_start__ps R_n_iexec_state_952_sample_completed__ps R_n_iexec_state_952_update_start__ps R_n_iexec_state_952_update_completed__ps :
            phi_stmt_949_sample_start__ps phi_stmt_949_sample_completed__ps phi_stmt_949_update_start__ps phi_stmt_949_update_completed__ps :
            phi_stmt_949_entry_sample_req_ps phi_stmt_949_loopback_sample_req_ps : 
            phi_stmt_949_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_949
            // start:  PHI statement phi_stmt_953
            // 				$phi dcache_state := 				  _b0  $on   $entry 				  n_dcache_state $on   $loopback 
            // type of target is $uint<139>
            $T[phi_stmt_953_sample_start_] 
            $T[phi_stmt_953_sample_completed_] 
            $T[phi_stmt_953_update_start_] 
            $T[phi_stmt_953_update_completed_] 
            $T[phi_stmt_953_sample_start__ps] 
            phi_stmt_953_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_953_sample_completed__ps] 
            phi_stmt_953_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_953_update_start__ps] 
            phi_stmt_953_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_953_update_completed__ps] 
            phi_stmt_953_update_completed_ <-& (phi_stmt_953_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_953_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_953_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_953_update_start_)
            $T[phi_stmt_953_loopback_trigger] 
            phi_stmt_953_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_953_loopback_sample_req] 
            $T[phi_stmt_953_loopback_sample_req_ps] 
            phi_stmt_953_loopback_sample_req <-& (phi_stmt_953_loopback_sample_req_ps)
            phi_stmt_953_loopback_sample_req &-> ($null)
            $T[phi_stmt_953_entry_trigger] 
            phi_stmt_953_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_953_entry_sample_req] 
            $T[phi_stmt_953_entry_sample_req_ps] 
            phi_stmt_953_entry_sample_req <-& (phi_stmt_953_entry_sample_req_ps)
            phi_stmt_953_entry_sample_req &-> ($null)
            phi_stmt_953_update_start_ o<-& (phi_stmt_953_update_completed_ 0)
            phi_stmt_953_sample_start_ o<-& (phi_stmt_953_sample_completed_ 1)
            $T[phi_stmt_953_merged_reqs] 
            $T[phi_stmt_953_phi_mux_ack] 
            $T[phi_stmt_953_phi_mux_ack_ps] 
            phi_stmt_953_phi_mux_ack_ps <-& (phi_stmt_953_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_953_update_completed_)
            $T[konst_955_sample_start__ps] 
            $T[konst_955_sample_completed__ps] 
            $T[konst_955_update_start__ps] 
            $T[konst_955_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_955_sample_start_] 
            $T[konst_955_sample_completed_] 
            konst_955_sample_completed_ <-& (konst_955_sample_start_)
            $T[konst_955_update_start_] 
            $T [konst_955_update_completed_] $delay 
            konst_955_update_completed_ <-& (konst_955_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_955_sample_start_ <-& (konst_955_sample_start__ps)
            konst_955_update_start_ <-& (konst_955_update_start__ps)
            // Phi complete dependency.
            konst_955_sample_completed__ps <-& (konst_955_sample_completed_)
            konst_955_update_completed__ps <-& (konst_955_update_completed_)
            $T[R_n_dcache_state_956_sample_start__ps] 
            $T[R_n_dcache_state_956_sample_completed__ps] 
            $T[R_n_dcache_state_956_update_start__ps] 
            $T[R_n_dcache_state_956_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_dcache_state_956_sample_start_] 
            $T[R_n_dcache_state_956_sample_completed_] 
            $T[R_n_dcache_state_956_update_start_] 
            $T[R_n_dcache_state_956_update_completed_] 
            ;;[R_n_dcache_state_956_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_dcache_state_956_sample_start_ &-> (R_n_dcache_state_956_Sample)
            R_n_dcache_state_956_sample_completed_ <-& (R_n_dcache_state_956_Sample)
            ;;[R_n_dcache_state_956_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_dcache_state_956_update_start_ &-> (R_n_dcache_state_956_Update)
            R_n_dcache_state_956_update_completed_ <-& (R_n_dcache_state_956_Update)
            // RAW reenables for n_dcache_state
            // Phi start dependency for implicit/constant alternative.
            R_n_dcache_state_956_sample_start_ <-& (R_n_dcache_state_956_sample_start__ps)
            R_n_dcache_state_956_update_start_ <-& (R_n_dcache_state_956_update_start__ps)
            // Phi complete dependency.
            R_n_dcache_state_956_sample_completed__ps <-& (R_n_dcache_state_956_sample_completed_)
            R_n_dcache_state_956_update_completed__ps <-& (R_n_dcache_state_956_update_completed_)
            $phisequencer [ phi_stmt_953_phi_seq] : 
            phi_stmt_953_entry_trigger konst_955_sample_start__ps konst_955_sample_completed__ps konst_955_update_start__ps konst_955_update_completed__ps phi_stmt_953_loopback_trigger R_n_dcache_state_956_sample_start__ps R_n_dcache_state_956_sample_completed__ps R_n_dcache_state_956_update_start__ps R_n_dcache_state_956_update_completed__ps :
            phi_stmt_953_sample_start__ps phi_stmt_953_sample_completed__ps phi_stmt_953_update_start__ps phi_stmt_953_update_completed__ps :
            phi_stmt_953_entry_sample_req_ps phi_stmt_953_loopback_sample_req_ps : 
            phi_stmt_953_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_953
            // start:  PHI statement phi_stmt_957
            // 				$phi iretire_state := 				  _b0  $on   $entry 				  n_iRetire_state $on   $loopback 
            // type of target is $uint<139>
            $T[phi_stmt_957_sample_start_] 
            $T[phi_stmt_957_sample_completed_] 
            $T[phi_stmt_957_update_start_] 
            $T[phi_stmt_957_update_completed_] 
            $T[phi_stmt_957_sample_start__ps] 
            phi_stmt_957_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_957_sample_completed__ps] 
            phi_stmt_957_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_957_update_start__ps] 
            phi_stmt_957_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_957_update_completed__ps] 
            phi_stmt_957_update_completed_ <-& (phi_stmt_957_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_957_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_957_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_957_update_start_)
            $T[phi_stmt_957_loopback_trigger] 
            phi_stmt_957_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_957_loopback_sample_req] 
            $T[phi_stmt_957_loopback_sample_req_ps] 
            phi_stmt_957_loopback_sample_req <-& (phi_stmt_957_loopback_sample_req_ps)
            phi_stmt_957_loopback_sample_req &-> ($null)
            $T[phi_stmt_957_entry_trigger] 
            phi_stmt_957_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_957_entry_sample_req] 
            $T[phi_stmt_957_entry_sample_req_ps] 
            phi_stmt_957_entry_sample_req <-& (phi_stmt_957_entry_sample_req_ps)
            phi_stmt_957_entry_sample_req &-> ($null)
            phi_stmt_957_update_start_ o<-& (phi_stmt_957_update_completed_ 0)
            phi_stmt_957_sample_start_ o<-& (phi_stmt_957_sample_completed_ 1)
            $T[phi_stmt_957_merged_reqs] 
            $T[phi_stmt_957_phi_mux_ack] 
            $T[phi_stmt_957_phi_mux_ack_ps] 
            phi_stmt_957_phi_mux_ack_ps <-& (phi_stmt_957_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_957_update_completed_)
            $T[konst_959_sample_start__ps] 
            $T[konst_959_sample_completed__ps] 
            $T[konst_959_update_start__ps] 
            $T[konst_959_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_959_sample_start_] 
            $T[konst_959_sample_completed_] 
            konst_959_sample_completed_ <-& (konst_959_sample_start_)
            $T[konst_959_update_start_] 
            $T [konst_959_update_completed_] $delay 
            konst_959_update_completed_ <-& (konst_959_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_959_sample_start_ <-& (konst_959_sample_start__ps)
            konst_959_update_start_ <-& (konst_959_update_start__ps)
            // Phi complete dependency.
            konst_959_sample_completed__ps <-& (konst_959_sample_completed_)
            konst_959_update_completed__ps <-& (konst_959_update_completed_)
            $T[R_n_iRetire_state_960_sample_start__ps] 
            $T[R_n_iRetire_state_960_sample_completed__ps] 
            $T[R_n_iRetire_state_960_update_start__ps] 
            $T[R_n_iRetire_state_960_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_iRetire_state_960_sample_start_] 
            $T[R_n_iRetire_state_960_sample_completed_] 
            $T[R_n_iRetire_state_960_update_start_] 
            $T[R_n_iRetire_state_960_update_completed_] 
            ;;[R_n_iRetire_state_960_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_iRetire_state_960_sample_start_ &-> (R_n_iRetire_state_960_Sample)
            R_n_iRetire_state_960_sample_completed_ <-& (R_n_iRetire_state_960_Sample)
            ;;[R_n_iRetire_state_960_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_iRetire_state_960_update_start_ &-> (R_n_iRetire_state_960_Update)
            R_n_iRetire_state_960_update_completed_ <-& (R_n_iRetire_state_960_Update)
            // RAW reenables for n_iRetire_state
            // Phi start dependency for implicit/constant alternative.
            R_n_iRetire_state_960_sample_start_ <-& (R_n_iRetire_state_960_sample_start__ps)
            R_n_iRetire_state_960_update_start_ <-& (R_n_iRetire_state_960_update_start__ps)
            // Phi complete dependency.
            R_n_iRetire_state_960_sample_completed__ps <-& (R_n_iRetire_state_960_sample_completed_)
            R_n_iRetire_state_960_update_completed__ps <-& (R_n_iRetire_state_960_update_completed_)
            $phisequencer [ phi_stmt_957_phi_seq] : 
            phi_stmt_957_entry_trigger konst_959_sample_start__ps konst_959_sample_completed__ps konst_959_update_start__ps konst_959_update_completed__ps phi_stmt_957_loopback_trigger R_n_iRetire_state_960_sample_start__ps R_n_iRetire_state_960_sample_completed__ps R_n_iRetire_state_960_update_start__ps R_n_iRetire_state_960_update_completed__ps :
            phi_stmt_957_sample_start__ps phi_stmt_957_sample_completed__ps phi_stmt_957_update_start__ps phi_stmt_957_update_completed__ps :
            phi_stmt_957_entry_sample_req_ps phi_stmt_957_loopback_sample_req_ps : 
            phi_stmt_957_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_957
            // start: WAR dependencies for ifetch_actions
            // done: WAR dependencies for ifetch_actions
            // start: WAR dependencies for icache_actions
            // done: WAR dependencies for icache_actions
            // start: WAR dependencies for idecode_actions
            // done: WAR dependencies for idecode_actions
            // start: WAR dependencies for iregfile_actions
            // done: WAR dependencies for iregfile_actions
            // start: WAR dependencies for iexec_actions
            // done: WAR dependencies for iexec_actions
            // start: WAR dependencies for dcache_actions
            // done: WAR dependencies for dcache_actions
            // start: WAR dependencies for ex_Unconditional_JUMP
            // done: WAR dependencies for ex_Unconditional_JUMP
            // start: WAR dependencies for is_Branch_Hazard
            // done: WAR dependencies for is_Branch_Hazard
            // start: WAR dependencies for flush_ifetch
            // done: WAR dependencies for flush_ifetch
            // start: WAR dependencies for flush_icache
            // done: WAR dependencies for flush_icache
            // start: WAR dependencies for flush_idecode
            // done: WAR dependencies for flush_idecode
            // start: WAR dependencies for flush_reg
            // done: WAR dependencies for flush_reg
            // start: WAR dependencies for flush_iexec
            // done: WAR dependencies for flush_iexec
            // start: WAR dependencies for flush_dcache
            // done: WAR dependencies for flush_dcache
            // start: WAR dependencies for stall_first_4
            // done: WAR dependencies for stall_first_4
            // start:  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
            //  file prog.linked.opt.aa, line 228
            // volatile! 
            // Call input argument 0
            // ifetch_state
            // Call input argument 1
            // icache_state
            // Call input argument 2
            // idecode_state
            // Call input argument 3
            // iregfile_state
            // Call input argument 4
            // iexec_state
            // Call input argument 5
            // dcache_state
            // Call input argument 6
            // iretire_state
            // Call output argument 0
            // (as target) ifetch_actions
            // Call output argument 1
            // (as target) icache_actions
            // Call output argument 2
            // (as target) idecode_actions
            // Call output argument 3
            // (as target) iregfile_actions
            // Call output argument 4
            // (as target) iexec_actions
            // Call output argument 5
            // (as target) dcache_actions
            // Call output argument 6
            // (as target) ex_Unconditional_JUMP
            // Call output argument 7
            // (as target) is_Branch_Hazard
            // Call output argument 8
            // (as target) flush_ifetch
            // Call output argument 9
            // (as target) flush_icache
            // Call output argument 10
            // (as target) flush_idecode
            // Call output argument 11
            // (as target) flush_reg
            // Call output argument 12
            // (as target) flush_iexec
            // Call output argument 13
            // (as target) flush_dcache
            // Call output argument 14
            // (as target) stall_first_4
            // start: WAR dependencies for ifetch_actions
            // done: WAR dependencies for ifetch_actions
            // start: WAR dependencies for icache_actions
            // done: WAR dependencies for icache_actions
            // start: WAR dependencies for idecode_actions
            // done: WAR dependencies for idecode_actions
            // start: WAR dependencies for iregfile_actions
            // done: WAR dependencies for iregfile_actions
            // start: WAR dependencies for iexec_actions
            // done: WAR dependencies for iexec_actions
            // start: WAR dependencies for dcache_actions
            // done: WAR dependencies for dcache_actions
            // start: WAR dependencies for ex_Unconditional_JUMP
            // done: WAR dependencies for ex_Unconditional_JUMP
            // start: WAR dependencies for is_Branch_Hazard
            // done: WAR dependencies for is_Branch_Hazard
            // start: WAR dependencies for flush_ifetch
            // done: WAR dependencies for flush_ifetch
            // start: WAR dependencies for flush_icache
            // done: WAR dependencies for flush_icache
            // start: WAR dependencies for flush_idecode
            // done: WAR dependencies for flush_idecode
            // start: WAR dependencies for flush_reg
            // done: WAR dependencies for flush_reg
            // start: WAR dependencies for flush_iexec
            // done: WAR dependencies for flush_iexec
            // start: WAR dependencies for flush_dcache
            // done: WAR dependencies for flush_dcache
            // start: WAR dependencies for stall_first_4
            // done: WAR dependencies for stall_first_4
            // end:  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
            // start: 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction ) 
            //  file prog.linked.opt.aa, line 229
            $T[call_stmt_989_sample_start_] 
            $T[call_stmt_989_sample_completed_] 
            $T[call_stmt_989_update_start_] 
            $T[call_stmt_989_update_completed_] 
            // Call input argument 0
            // Call input argument 1
            // icache_state
            // Call input argument 2
            // start: Forward dependencies from icache_state to transition call_stmt_989_sample_start_
            call_stmt_989_sample_start_ <-& (phi_stmt_937_update_completed_)
            // done: Forward dependencies from icache_state to transition call_stmt_989_sample_start_
            // RAW reenables for icache_state
            phi_stmt_937_update_start_ o<-& (call_stmt_989_sample_completed_ 0)
            ;;[call_stmt_989_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_989_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_989_sample_start_ &-> (call_stmt_989_Sample)
            call_stmt_989_sample_completed_ <-& (call_stmt_989_Sample)
            call_stmt_989_sample_completed_ &-> ($null)
            call_stmt_989_update_start_ &-> (call_stmt_989_Update)
            call_stmt_989_update_completed_ <-& (call_stmt_989_Update)
            // Call output argument 0
            // (as target) icache_instruction
            // self-release: 
            call_stmt_989_sample_start_ o<-& (call_stmt_989_sample_completed_ 1)
            $null &-> (call_stmt_989_update_start_)
            call_stmt_989_update_start_ o<-& (call_stmt_989_update_completed_ 0)
            // start: WAR dependencies for icache_instruction
            // done: WAR dependencies for icache_instruction
            // end: 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction ) 
            // start: WAR dependencies for n_icache_state
            // WAR dependency: Read: n_icache_state before Write: 				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for n_icache_state
            // start:  				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
            //  file prog.linked.opt.aa, line 230
            // volatile! 
            // Source expression
            // ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
            // flush_icache
            // ( $mux stall_first_4 icache_state  ifetch_state ) 
            // stall_first_4
            // icache_state
            // ifetch_state
            // Target expression
            // (as target) n_icache_state
            // start: WAR dependencies for n_icache_state
            // WAR dependency: Read: n_icache_state before Write: 				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for n_icache_state
            // end:  				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
            // start:  				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 231
            $T[assign_stmt_1001_sample_start_] 
            $T[assign_stmt_1001_sample_completed_] 
            $T[assign_stmt_1001_update_start_] 
            $T[assign_stmt_1001_update_completed_] 
            // Source expression
            // flush_idecode
            // Target expression
            // (as target) flush_idecode_1058_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1001_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1001_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1001_sample_start_ &-> (assign_stmt_1001_Sample)
            assign_stmt_1001_sample_completed_ <-& (assign_stmt_1001_Sample)
            assign_stmt_1001_sample_completed_ &-> ($null)
            assign_stmt_1001_update_start_ &-> (assign_stmt_1001_Update)
            assign_stmt_1001_update_completed_ <-& (assign_stmt_1001_Update)
            // start: Forward dependencies from flush_idecode to transition assign_stmt_1001_sample_start_
            assign_stmt_1001_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1001_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from flush_idecode to transition assign_stmt_1001_sample_start_
            // RAW reenables for flush_idecode
            phi_stmt_933_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1001_sample_completed_ 0)
            // self-release: 
            assign_stmt_1001_sample_start_ o<-& (assign_stmt_1001_sample_completed_ 1)
            $null &-> (assign_stmt_1001_update_start_)
            assign_stmt_1001_update_start_ o<-& (assign_stmt_1001_update_completed_ 0)
            // start: WAR dependencies for flush_idecode_1058_delayed_7_0
            // done: WAR dependencies for flush_idecode_1058_delayed_7_0
            // end:  				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
            // start:  				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 232
            $T[assign_stmt_1004_sample_start_] 
            $T[assign_stmt_1004_sample_completed_] 
            $T[assign_stmt_1004_update_start_] 
            $T[assign_stmt_1004_update_completed_] 
            // Source expression
            // stall_first_4
            // Target expression
            // (as target) stall_first_4_1060_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1004_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1004_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1004_sample_start_ &-> (assign_stmt_1004_Sample)
            assign_stmt_1004_sample_completed_ <-& (assign_stmt_1004_Sample)
            assign_stmt_1004_sample_completed_ &-> ($null)
            assign_stmt_1004_update_start_ &-> (assign_stmt_1004_Update)
            assign_stmt_1004_update_completed_ <-& (assign_stmt_1004_Update)
            // start: Forward dependencies from stall_first_4 to transition assign_stmt_1004_sample_start_
            assign_stmt_1004_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1004_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from stall_first_4 to transition assign_stmt_1004_sample_start_
            // RAW reenables for stall_first_4
            phi_stmt_933_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1004_sample_completed_ 0)
            // self-release: 
            assign_stmt_1004_sample_start_ o<-& (assign_stmt_1004_sample_completed_ 1)
            $null &-> (assign_stmt_1004_update_start_)
            assign_stmt_1004_update_start_ o<-& (assign_stmt_1004_update_completed_ 0)
            // start: WAR dependencies for stall_first_4_1060_delayed_7_0
            // done: WAR dependencies for stall_first_4_1060_delayed_7_0
            // end:  				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
            // start:  				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
            //  file prog.linked.opt.aa, line 233
            $T[assign_stmt_1007_sample_start_] 
            $T[assign_stmt_1007_sample_completed_] 
            $T[assign_stmt_1007_update_start_] 
            $T[assign_stmt_1007_update_completed_] 
            // Source expression
            // idecode_state
            // Target expression
            // (as target) idecode_state_1061_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1007_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1007_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1007_sample_start_ &-> (assign_stmt_1007_Sample)
            assign_stmt_1007_sample_completed_ <-& (assign_stmt_1007_Sample)
            assign_stmt_1007_sample_completed_ &-> ($null)
            assign_stmt_1007_update_start_ &-> (assign_stmt_1007_Update)
            assign_stmt_1007_update_completed_ <-& (assign_stmt_1007_Update)
            // start: Forward dependencies from idecode_state to transition assign_stmt_1007_sample_start_
            assign_stmt_1007_sample_start_ <-& (phi_stmt_941_update_completed_)
            // done: Forward dependencies from idecode_state to transition assign_stmt_1007_sample_start_
            // RAW reenables for idecode_state
            phi_stmt_941_update_start_ o<-& (assign_stmt_1007_sample_completed_ 0)
            // self-release: 
            assign_stmt_1007_sample_start_ o<-& (assign_stmt_1007_sample_completed_ 1)
            $null &-> (assign_stmt_1007_update_start_)
            assign_stmt_1007_update_start_ o<-& (assign_stmt_1007_update_completed_ 0)
            // start: WAR dependencies for idecode_state_1061_delayed_7_0
            // done: WAR dependencies for idecode_state_1061_delayed_7_0
            // end:  				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
            // start:  				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
            //  file prog.linked.opt.aa, line 234
            $T[assign_stmt_1010_sample_start_] 
            $T[assign_stmt_1010_sample_completed_] 
            $T[assign_stmt_1010_update_start_] 
            $T[assign_stmt_1010_update_completed_] 
            // Source expression
            // icache_state
            // Target expression
            // (as target) icache_state_1063_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1010_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1010_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1010_sample_start_ &-> (assign_stmt_1010_Sample)
            assign_stmt_1010_sample_completed_ <-& (assign_stmt_1010_Sample)
            assign_stmt_1010_sample_completed_ &-> ($null)
            assign_stmt_1010_update_start_ &-> (assign_stmt_1010_Update)
            assign_stmt_1010_update_completed_ <-& (assign_stmt_1010_Update)
            // start: Forward dependencies from icache_state to transition assign_stmt_1010_sample_start_
            assign_stmt_1010_sample_start_ <-& (phi_stmt_937_update_completed_)
            // done: Forward dependencies from icache_state to transition assign_stmt_1010_sample_start_
            // RAW reenables for icache_state
            phi_stmt_937_update_start_ o<-& (assign_stmt_1010_sample_completed_ 0)
            // self-release: 
            assign_stmt_1010_sample_start_ o<-& (assign_stmt_1010_sample_completed_ 1)
            $null &-> (assign_stmt_1010_update_start_)
            assign_stmt_1010_update_start_ o<-& (assign_stmt_1010_update_completed_ 0)
            // start: WAR dependencies for icache_state_1063_delayed_7_0
            // done: WAR dependencies for icache_state_1063_delayed_7_0
            // end:  				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
            // start: WAR dependencies for n_idecode_state
            // WAR dependency: Read: n_idecode_state before Write: 				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
            call_stmt_989_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (call_stmt_989_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction ) 
            assign_stmt_1001_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1001_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
            assign_stmt_1004_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1004_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
            assign_stmt_1007_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1007_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
            assign_stmt_1010_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1010_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
            // done: WAR dependencies for n_idecode_state
            // start:  				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
            //  file prog.linked.opt.aa, line 235
            // volatile! 
            // Source expression
            // ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
            // flush_idecode_1058_delayed_7_0
            // ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) ) 
            // stall_first_4_1060_delayed_7_0
            // idecode_state_1061_delayed_7_0
            // (icache_instruction && icache_state_1063_delayed_7_0)
            // icache_instruction
            // icache_state_1063_delayed_7_0
            // Target expression
            // (as target) n_idecode_state
            // start: WAR dependencies for n_idecode_state
            // WAR dependency: Read: n_idecode_state before Write: 				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
            call_stmt_989_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (call_stmt_989_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction )  $buffering 2
            assign_stmt_1001_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1001_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
            assign_stmt_1004_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1004_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
            assign_stmt_1007_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1007_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
            assign_stmt_1010_update_start_ <-& (phi_stmt_941_sample_completed_)
            phi_stmt_941_sample_start_ o<-& (assign_stmt_1010_update_completed_ 0)
            // WAR dependency: release  Read: n_idecode_state with Write: 				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
            // done: WAR dependencies for n_idecode_state
            // end:  				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
            // start: WAR dependencies for n_iregfile_state
            // WAR dependency: Read: n_iregfile_state before Write: 				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for n_iregfile_state
            // start:  				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
            //  file prog.linked.opt.aa, line 236
            // volatile! 
            // Source expression
            // ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
            // flush_reg
            // ( $mux stall_first_4 iregfile_state  idecode_state ) 
            // stall_first_4
            // iregfile_state
            // idecode_state
            // Target expression
            // (as target) n_iregfile_state
            // start: WAR dependencies for n_iregfile_state
            // WAR dependency: Read: n_iregfile_state before Write: 				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for n_iregfile_state
            // end:  				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
            // start: WAR dependencies for iregfile_pc
            // done: WAR dependencies for iregfile_pc
            // start:  				$volatile iregfile_pc := ( $slice iregfile_state 9 0 ) 
            //  file prog.linked.opt.aa, line 237
            // volatile! 
            // Source expression
            // ( $slice iregfile_state 9 0 ) 
            // iregfile_state
            // Target expression
            // (as target) iregfile_pc
            // start: WAR dependencies for iregfile_pc
            // done: WAR dependencies for iregfile_pc
            // end:  				$volatile iregfile_pc := ( $slice iregfile_state 9 0 ) 
            // start: WAR dependencies for iexec_rs1_imm
            // done: WAR dependencies for iexec_rs1_imm
            // start:  				$volatile iexec_rs1_imm := ( $slice iexec_state 97 90 ) 
            //  file prog.linked.opt.aa, line 238
            // volatile! 
            // Source expression
            // ( $slice iexec_state 97 90 ) 
            // iexec_state
            // Target expression
            // (as target) iexec_rs1_imm
            // start: WAR dependencies for iexec_rs1_imm
            // done: WAR dependencies for iexec_rs1_imm
            // end:  				$volatile iexec_rs1_imm := ( $slice iexec_state 97 90 ) 
            // start: WAR dependencies for iexec_rd1
            // done: WAR dependencies for iexec_rd1
            // start:  				$volatile iexec_rd1 := ( $slice iexec_state 73 42 ) 
            //  file prog.linked.opt.aa, line 239
            // volatile! 
            // Source expression
            // ( $slice iexec_state 73 42 ) 
            // iexec_state
            // Target expression
            // (as target) iexec_rd1
            // start: WAR dependencies for iexec_rd1
            // done: WAR dependencies for iexec_rd1
            // end:  				$volatile iexec_rd1 := ( $slice iexec_state 73 42 ) 
            // start: WAR dependencies for iexec_rd2
            // done: WAR dependencies for iexec_rd2
            // start:  				$volatile iexec_rd2 := ( $slice iexec_state 41 10 ) 
            //  file prog.linked.opt.aa, line 240
            // volatile! 
            // Source expression
            // ( $slice iexec_state 41 10 ) 
            // iexec_state
            // Target expression
            // (as target) iexec_rd2
            // start: WAR dependencies for iexec_rd2
            // done: WAR dependencies for iexec_rd2
            // end:  				$volatile iexec_rd2 := ( $slice iexec_state 41 10 ) 
            // start: WAR dependencies for dcache_opcode
            // done: WAR dependencies for dcache_opcode
            // start:  				$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
            //  file prog.linked.opt.aa, line 241
            // volatile! 
            // Source expression
            // ( $slice dcache_state 138 131 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_opcode
            // start: WAR dependencies for dcache_opcode
            // done: WAR dependencies for dcache_opcode
            // end:  				$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
            // start: WAR dependencies for dcache_rs1_imm
            // done: WAR dependencies for dcache_rs1_imm
            // start:  				$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
            //  file prog.linked.opt.aa, line 242
            // volatile! 
            // Source expression
            // ( $slice dcache_state 130 123 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_rs1_imm
            // start: WAR dependencies for dcache_rs1_imm
            // done: WAR dependencies for dcache_rs1_imm
            // end:  				$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
            // start: WAR dependencies for dcache_rs2
            // done: WAR dependencies for dcache_rs2
            // start:  				$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
            //  file prog.linked.opt.aa, line 243
            // volatile! 
            // Source expression
            // ( $slice dcache_state 122 115 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_rs2
            // start: WAR dependencies for dcache_rs2
            // done: WAR dependencies for dcache_rs2
            // end:  				$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
            // start: WAR dependencies for dcache_rd
            // done: WAR dependencies for dcache_rd
            // start:  				$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
            //  file prog.linked.opt.aa, line 244
            // volatile! 
            // Source expression
            // ( $slice dcache_state 114 107 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_rd
            // start: WAR dependencies for dcache_rd
            // done: WAR dependencies for dcache_rd
            // end:  				$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
            // start: WAR dependencies for dcache_rd1
            // done: WAR dependencies for dcache_rd1
            // start:  				$volatile dcache_rd1 := ( $slice dcache_state 106 75 ) 
            //  file prog.linked.opt.aa, line 245
            // volatile! 
            // Source expression
            // ( $slice dcache_state 106 75 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_rd1
            // start: WAR dependencies for dcache_rd1
            // done: WAR dependencies for dcache_rd1
            // end:  				$volatile dcache_rd1 := ( $slice dcache_state 106 75 ) 
            // start: WAR dependencies for dcache_rd2
            // done: WAR dependencies for dcache_rd2
            // start:  				$volatile dcache_rd2 := ( $slice dcache_state 74 43 ) 
            //  file prog.linked.opt.aa, line 246
            // volatile! 
            // Source expression
            // ( $slice dcache_state 74 43 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_rd2
            // start: WAR dependencies for dcache_rd2
            // done: WAR dependencies for dcache_rd2
            // end:  				$volatile dcache_rd2 := ( $slice dcache_state 74 43 ) 
            // start: WAR dependencies for dcache_exec_result
            // done: WAR dependencies for dcache_exec_result
            // start:  				$volatile dcache_exec_result := ( $slice dcache_state 42 11 ) 
            //  file prog.linked.opt.aa, line 247
            // volatile! 
            // Source expression
            // ( $slice dcache_state 42 11 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_exec_result
            // start: WAR dependencies for dcache_exec_result
            // done: WAR dependencies for dcache_exec_result
            // end:  				$volatile dcache_exec_result := ( $slice dcache_state 42 11 ) 
            // start: WAR dependencies for dcache_isBranch
            // done: WAR dependencies for dcache_isBranch
            // start:  				$volatile dcache_isBranch := ( $slice dcache_state 10 10 ) 
            //  file prog.linked.opt.aa, line 248
            // volatile! 
            // Source expression
            // ( $slice dcache_state 10 10 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_isBranch
            // start: WAR dependencies for dcache_isBranch
            // done: WAR dependencies for dcache_isBranch
            // end:  				$volatile dcache_isBranch := ( $slice dcache_state 10 10 ) 
            // start: WAR dependencies for dcache_pc
            // done: WAR dependencies for dcache_pc
            // start:  				$volatile dcache_pc := ( $slice dcache_state 9 0 ) 
            //  file prog.linked.opt.aa, line 249
            // volatile! 
            // Source expression
            // ( $slice dcache_state 9 0 ) 
            // dcache_state
            // Target expression
            // (as target) dcache_pc
            // start: WAR dependencies for dcache_pc
            // done: WAR dependencies for dcache_pc
            // end:  				$volatile dcache_pc := ( $slice dcache_state 9 0 ) 
            // start: WAR dependencies for iretire_opcode
            // done: WAR dependencies for iretire_opcode
            // start:  				$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
            //  file prog.linked.opt.aa, line 250
            // volatile! 
            // Source expression
            // ( $slice iretire_state 138 131 ) 
            // iretire_state
            // Target expression
            // (as target) iretire_opcode
            // start: WAR dependencies for iretire_opcode
            // done: WAR dependencies for iretire_opcode
            // end:  				$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
            // start: WAR dependencies for iretire_rd
            // done: WAR dependencies for iretire_rd
            // start:  				$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
            //  file prog.linked.opt.aa, line 251
            // volatile! 
            // Source expression
            // ( $slice iretire_state 114 107 ) 
            // iretire_state
            // Target expression
            // (as target) iretire_rd
            // start: WAR dependencies for iretire_rd
            // done: WAR dependencies for iretire_rd
            // end:  				$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
            // start: WAR dependencies for iretire_exec_result_memData
            // done: WAR dependencies for iretire_exec_result_memData
            // start:  				$volatile iretire_exec_result_memData := ( $slice iretire_state 42 11 ) 
            //  file prog.linked.opt.aa, line 252
            // volatile! 
            // Source expression
            // ( $slice iretire_state 42 11 ) 
            // iretire_state
            // Target expression
            // (as target) iretire_exec_result_memData
            // start: WAR dependencies for iretire_exec_result_memData
            // done: WAR dependencies for iretire_exec_result_memData
            // end:  				$volatile iretire_exec_result_memData := ( $slice iretire_state 42 11 ) 
            // start: WAR dependencies for dcache_to_ex_rs1_imm
            // done: WAR dependencies for dcache_to_ex_rs1_imm
            // start:  				$volatile dcache_to_ex_rs1_imm := ( $slice iexec_actions 3 3 ) 
            //  file prog.linked.opt.aa, line 253
            // volatile! 
            // Source expression
            // ( $slice iexec_actions 3 3 ) 
            // iexec_actions
            // Target expression
            // (as target) dcache_to_ex_rs1_imm
            // start: WAR dependencies for dcache_to_ex_rs1_imm
            // done: WAR dependencies for dcache_to_ex_rs1_imm
            // end:  				$volatile dcache_to_ex_rs1_imm := ( $slice iexec_actions 3 3 ) 
            // start: WAR dependencies for dcache_to_ex_rs2
            // done: WAR dependencies for dcache_to_ex_rs2
            // start:  				$volatile dcache_to_ex_rs2 := ( $slice iexec_actions 2 2 ) 
            //  file prog.linked.opt.aa, line 254
            // volatile! 
            // Source expression
            // ( $slice iexec_actions 2 2 ) 
            // iexec_actions
            // Target expression
            // (as target) dcache_to_ex_rs2
            // start: WAR dependencies for dcache_to_ex_rs2
            // done: WAR dependencies for dcache_to_ex_rs2
            // end:  				$volatile dcache_to_ex_rs2 := ( $slice iexec_actions 2 2 ) 
            // start: WAR dependencies for iretire_state_to_ex_rs1_imm
            // done: WAR dependencies for iretire_state_to_ex_rs1_imm
            // start:  				$volatile iretire_state_to_ex_rs1_imm := ( $slice iexec_actions 1 1 ) 
            //  file prog.linked.opt.aa, line 255
            // volatile! 
            // Source expression
            // ( $slice iexec_actions 1 1 ) 
            // iexec_actions
            // Target expression
            // (as target) iretire_state_to_ex_rs1_imm
            // start: WAR dependencies for iretire_state_to_ex_rs1_imm
            // done: WAR dependencies for iretire_state_to_ex_rs1_imm
            // end:  				$volatile iretire_state_to_ex_rs1_imm := ( $slice iexec_actions 1 1 ) 
            // start: WAR dependencies for iretire_state_to_ex_rs2
            // done: WAR dependencies for iretire_state_to_ex_rs2
            // start:  				$volatile iretire_state_to_ex_rs2 := ( $slice iexec_actions 0 0 ) 
            //  file prog.linked.opt.aa, line 256
            // volatile! 
            // Source expression
            // ( $slice iexec_actions 0 0 ) 
            // iexec_actions
            // Target expression
            // (as target) iretire_state_to_ex_rs2
            // start: WAR dependencies for iretire_state_to_ex_rs2
            // done: WAR dependencies for iretire_state_to_ex_rs2
            // end:  				$volatile iretire_state_to_ex_rs2 := ( $slice iexec_actions 0 0 ) 
            // start: WAR dependencies for iexec_rd1_final
            // done: WAR dependencies for iexec_rd1_final
            // start:  				$volatile iexec_rd1_final := ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
            //  file prog.linked.opt.aa, line 257
            // volatile! 
            // Source expression
            // ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
            // dcache_to_ex_rs1_imm
            // dcache_exec_result
            // ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 ) 
            // iretire_state_to_ex_rs1_imm
            // iretire_exec_result_memData
            // iexec_rd1
            // Target expression
            // (as target) iexec_rd1_final
            // start: WAR dependencies for iexec_rd1_final
            // done: WAR dependencies for iexec_rd1_final
            // end:  				$volatile iexec_rd1_final := ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
            // start: WAR dependencies for iexec_rd2_final
            // done: WAR dependencies for iexec_rd2_final
            // start:  				$volatile iexec_rd2_final := ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
            //  file prog.linked.opt.aa, line 258
            // volatile! 
            // Source expression
            // ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
            // dcache_to_ex_rs2
            // dcache_exec_result
            // ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 ) 
            // iretire_state_to_ex_rs2
            // iretire_exec_result_memData
            // iexec_rd2
            // Target expression
            // (as target) iexec_rd2_final
            // start: WAR dependencies for iexec_rd2_final
            // done: WAR dependencies for iexec_rd2_final
            // end:  				$volatile iexec_rd2_final := ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
            // start: 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
            //  file prog.linked.opt.aa, line 259
            $T[call_stmt_1133_sample_start_] 
            $T[call_stmt_1133_sample_completed_] 
            $T[call_stmt_1133_update_start_] 
            $T[call_stmt_1133_update_completed_] 
            // Call input argument 0
            // iexec_state
            // Call input argument 1
            // iexec_rd1_final
            // Call input argument 2
            // iexec_rd2_final
            // start: Forward dependencies from iexec_state to transition call_stmt_1133_sample_start_
            call_stmt_1133_sample_start_ <-& (phi_stmt_949_update_completed_)
            // done: Forward dependencies from iexec_state to transition call_stmt_1133_sample_start_
            // RAW reenables for iexec_state
            phi_stmt_949_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            // start: Forward dependencies from iexec_rd1_final to transition call_stmt_1133_sample_start_
            call_stmt_1133_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from iexec_rd1_final to transition call_stmt_1133_sample_start_
            // RAW reenables for iexec_rd1_final
            phi_stmt_933_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            // start: Forward dependencies from iexec_rd2_final to transition call_stmt_1133_sample_start_
            call_stmt_1133_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1133_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from iexec_rd2_final to transition call_stmt_1133_sample_start_
            // RAW reenables for iexec_rd2_final
            phi_stmt_933_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1133_sample_completed_ 0)
            ;;[call_stmt_1133_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_1133_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_1133_sample_start_ &-> (call_stmt_1133_Sample)
            call_stmt_1133_sample_completed_ <-& (call_stmt_1133_Sample)
            call_stmt_1133_sample_completed_ &-> ($null)
            call_stmt_1133_update_start_ &-> (call_stmt_1133_Update)
            call_stmt_1133_update_completed_ <-& (call_stmt_1133_Update)
            // Call output argument 0
            // (as target) n_dcache_state_from_exec
            // self-release: 
            call_stmt_1133_sample_start_ o<-& (call_stmt_1133_sample_completed_ 1)
            $null &-> (call_stmt_1133_update_start_)
            call_stmt_1133_update_start_ o<-& (call_stmt_1133_update_completed_ 0)
            // start: WAR dependencies for n_dcache_state_from_exec
            // done: WAR dependencies for n_dcache_state_from_exec
            // end: 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
            // start:  				flush_dcache_1221_delayed_4_0 := flush_dcache $buffering 4// bits of buffering = 4. 
            //  file prog.linked.opt.aa, line 260
            $T[assign_stmt_1136_sample_start_] 
            $T[assign_stmt_1136_sample_completed_] 
            $T[assign_stmt_1136_update_start_] 
            $T[assign_stmt_1136_update_completed_] 
            // Source expression
            // flush_dcache
            // Target expression
            // (as target) flush_dcache_1221_delayed_4_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1136_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1136_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1136_sample_start_ &-> (assign_stmt_1136_Sample)
            assign_stmt_1136_sample_completed_ <-& (assign_stmt_1136_Sample)
            assign_stmt_1136_sample_completed_ &-> ($null)
            assign_stmt_1136_update_start_ &-> (assign_stmt_1136_Update)
            assign_stmt_1136_update_completed_ <-& (assign_stmt_1136_Update)
            // start: Forward dependencies from flush_dcache to transition assign_stmt_1136_sample_start_
            assign_stmt_1136_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1136_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from flush_dcache to transition assign_stmt_1136_sample_start_
            // RAW reenables for flush_dcache
            phi_stmt_933_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1136_sample_completed_ 0)
            // self-release: 
            assign_stmt_1136_sample_start_ o<-& (assign_stmt_1136_sample_completed_ 1)
            $null &-> (assign_stmt_1136_update_start_)
            assign_stmt_1136_update_start_ o<-& (assign_stmt_1136_update_completed_ 0)
            // start: WAR dependencies for flush_dcache_1221_delayed_4_0
            // done: WAR dependencies for flush_dcache_1221_delayed_4_0
            // end:  				flush_dcache_1221_delayed_4_0 := flush_dcache $buffering 4// bits of buffering = 4. 
            // start:  				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) // bits of buffering = 139. 
            //  file prog.linked.opt.aa, line 261
            // Source expression
            // ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) 
            $T[MUX_1141_sample_start_] 
            $T[MUX_1141_sample_completed_] 
            $T[MUX_1141_update_start_] 
            $T[MUX_1141_update_completed_] 
            // flush_dcache_1221_delayed_4_0
            // n_dcache_state_from_exec
            // start: Forward dependencies from flush_dcache_1221_delayed_4_0 to transition MUX_1141_sample_start_
            MUX_1141_sample_start_ <-& (assign_stmt_1136_update_completed_)
            // done: Forward dependencies from flush_dcache_1221_delayed_4_0 to transition MUX_1141_sample_start_
            // start: Forward dependencies from n_dcache_state_from_exec to transition MUX_1141_sample_start_
            MUX_1141_sample_start_ <-& (call_stmt_1133_update_completed_)
            // done: Forward dependencies from n_dcache_state_from_exec to transition MUX_1141_sample_start_
            ;;[MUX_1141_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_1141_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_1141_sample_start_ &-> (MUX_1141_start)
            MUX_1141_sample_completed_ <-& (MUX_1141_start)
            MUX_1141_sample_completed_ &-> ($null)
            MUX_1141_update_start_ &-> (MUX_1141_complete)
            MUX_1141_update_completed_ <-& (MUX_1141_complete)
            // RAW reenables for flush_dcache_1221_delayed_4_0
            assign_stmt_1136_update_start_ o<-& (MUX_1141_sample_completed_ 0)
            // RAW reenables for n_dcache_state_from_exec
            call_stmt_1133_update_start_ o<-& (MUX_1141_sample_completed_ 0)
            // self-release: 
            MUX_1141_sample_start_ o<-& (MUX_1141_sample_completed_ 1)
            $null &-> (MUX_1141_update_start_)
            MUX_1141_update_start_ o<-& (MUX_1141_update_completed_ 0)
            // Target expression
            // (as target) n_dcache_state
            // start: WAR dependencies for n_dcache_state
            // WAR dependency: Read: n_dcache_state before Write: 				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) // bits of buffering = 139. 
            MUX_1141_update_start_ <-& (phi_stmt_953_sample_completed_)
            phi_stmt_953_sample_start_ o<-& (MUX_1141_update_completed_ 0)
            // WAR dependency: release  Read: n_dcache_state with Write: 				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) // bits of buffering = 139. 
            // done: WAR dependencies for n_dcache_state
            // end:  				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec )  $buffering 2// bits of buffering = 278. 
            // start: WAR dependencies for memWrite
            // done: WAR dependencies for memWrite
            // start:  				$volatile memWrite := ( $slice dcache_actions 2 2 ) 
            //  file prog.linked.opt.aa, line 262
            // volatile! 
            // Source expression
            // ( $slice dcache_actions 2 2 ) 
            // dcache_actions
            // Target expression
            // (as target) memWrite
            // start: WAR dependencies for memWrite
            // done: WAR dependencies for memWrite
            // end:  				$volatile memWrite := ( $slice dcache_actions 2 2 ) 
            // start: WAR dependencies for iretire_state_to_dcache_addr
            // done: WAR dependencies for iretire_state_to_dcache_addr
            // start:  				$volatile iretire_state_to_dcache_addr := ( $slice dcache_actions 1 1 ) 
            //  file prog.linked.opt.aa, line 263
            // volatile! 
            // Source expression
            // ( $slice dcache_actions 1 1 ) 
            // dcache_actions
            // Target expression
            // (as target) iretire_state_to_dcache_addr
            // start: WAR dependencies for iretire_state_to_dcache_addr
            // done: WAR dependencies for iretire_state_to_dcache_addr
            // end:  				$volatile iretire_state_to_dcache_addr := ( $slice dcache_actions 1 1 ) 
            // start: WAR dependencies for iretire_state_to_dcache_memData
            // done: WAR dependencies for iretire_state_to_dcache_memData
            // start:  				$volatile iretire_state_to_dcache_memData := ( $slice dcache_actions 0 0 ) 
            //  file prog.linked.opt.aa, line 264
            // volatile! 
            // Source expression
            // ( $slice dcache_actions 0 0 ) 
            // dcache_actions
            // Target expression
            // (as target) iretire_state_to_dcache_memData
            // start: WAR dependencies for iretire_state_to_dcache_memData
            // done: WAR dependencies for iretire_state_to_dcache_memData
            // end:  				$volatile iretire_state_to_dcache_memData := ( $slice dcache_actions 0 0 ) 
            // start: WAR dependencies for memWriteData
            // done: WAR dependencies for memWriteData
            // start:  				$volatile memWriteData := ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
            //  file prog.linked.opt.aa, line 265
            // volatile! 
            // Source expression
            // ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
            // iretire_state_to_dcache_memData
            // iretire_exec_result_memData
            // dcache_rd2
            // Target expression
            // (as target) memWriteData
            // start: WAR dependencies for memWriteData
            // done: WAR dependencies for memWriteData
            // end:  				$volatile memWriteData := ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
            // start: WAR dependencies for final_memAddr_32
            // done: WAR dependencies for final_memAddr_32
            // start:  				$volatile final_memAddr_32 := ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
            //  file prog.linked.opt.aa, line 266
            // volatile! 
            // Source expression
            // ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
            // iretire_state_to_dcache_addr
            // iretire_exec_result_memData
            // dcache_rd1
            // Target expression
            // (as target) final_memAddr_32
            // start: WAR dependencies for final_memAddr_32
            // done: WAR dependencies for final_memAddr_32
            // end:  				$volatile final_memAddr_32 := ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
            // start: WAR dependencies for memAddr
            // done: WAR dependencies for memAddr
            // start:  				$volatile memAddr := ( $slice final_memAddr_32 9 0 ) 
            //  file prog.linked.opt.aa, line 267
            // volatile! 
            // Source expression
            // ( $slice final_memAddr_32 9 0 ) 
            // final_memAddr_32
            // Target expression
            // (as target) memAddr
            // start: WAR dependencies for memAddr
            // done: WAR dependencies for memAddr
            // end:  				$volatile memAddr := ( $slice final_memAddr_32 9 0 ) 
            // start: 				$call accessMem (memWrite memAddr memWriteData ) (memReadData ) 
            //  file prog.linked.opt.aa, line 268
            $T[call_stmt_1175_sample_start_] 
            $T[call_stmt_1175_sample_completed_] 
            $T[call_stmt_1175_update_start_] 
            $T[call_stmt_1175_update_completed_] 
            // Call input argument 0
            // memWrite
            // Call input argument 1
            // memAddr
            // Call input argument 2
            // memWriteData
            // start: Forward dependencies from memWrite to transition call_stmt_1175_sample_start_
            call_stmt_1175_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from memWrite to transition call_stmt_1175_sample_start_
            // RAW reenables for memWrite
            phi_stmt_933_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            // start: Forward dependencies from memAddr to transition call_stmt_1175_sample_start_
            call_stmt_1175_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from memAddr to transition call_stmt_1175_sample_start_
            // RAW reenables for memAddr
            phi_stmt_933_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            // start: Forward dependencies from memWriteData to transition call_stmt_1175_sample_start_
            call_stmt_1175_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1175_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from memWriteData to transition call_stmt_1175_sample_start_
            // RAW reenables for memWriteData
            phi_stmt_933_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1175_sample_completed_ 0)
            ;;[call_stmt_1175_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_1175_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_1175_sample_start_ &-> (call_stmt_1175_Sample)
            call_stmt_1175_sample_completed_ <-& (call_stmt_1175_Sample)
            call_stmt_1175_sample_completed_ &-> ($null)
            call_stmt_1175_update_start_ &-> (call_stmt_1175_Update)
            call_stmt_1175_update_completed_ <-& (call_stmt_1175_Update)
            // Call output argument 0
            // (as target) memReadData
            // self-release: 
            call_stmt_1175_sample_start_ o<-& (call_stmt_1175_sample_completed_ 1)
            $null &-> (call_stmt_1175_update_start_)
            call_stmt_1175_update_start_ o<-& (call_stmt_1175_update_completed_ 0)
            // start: WAR dependencies for memReadData
            // done: WAR dependencies for memReadData
            // end: 				$call accessMem (memWrite memAddr memWriteData ) (memReadData ) 
            // start: WAR dependencies for reg_valid_read1
            // done: WAR dependencies for reg_valid_read1
            // start:  				$volatile reg_valid_read1 := ( $slice iregfile_actions 4 4 ) 
            //  file prog.linked.opt.aa, line 269
            // volatile! 
            // Source expression
            // ( $slice iregfile_actions 4 4 ) 
            // iregfile_actions
            // Target expression
            // (as target) reg_valid_read1
            // start: WAR dependencies for reg_valid_read1
            // done: WAR dependencies for reg_valid_read1
            // end:  				$volatile reg_valid_read1 := ( $slice iregfile_actions 4 4 ) 
            // start: WAR dependencies for reg_valid_read2
            // done: WAR dependencies for reg_valid_read2
            // start:  				$volatile reg_valid_read2 := ( $slice iregfile_actions 3 3 ) 
            //  file prog.linked.opt.aa, line 270
            // volatile! 
            // Source expression
            // ( $slice iregfile_actions 3 3 ) 
            // iregfile_actions
            // Target expression
            // (as target) reg_valid_read2
            // start: WAR dependencies for reg_valid_read2
            // done: WAR dependencies for reg_valid_read2
            // end:  				$volatile reg_valid_read2 := ( $slice iregfile_actions 3 3 ) 
            // start: WAR dependencies for reg_valid_write
            // done: WAR dependencies for reg_valid_write
            // start:  				$volatile reg_valid_write := ( $slice iregfile_actions 2 2 ) 
            //  file prog.linked.opt.aa, line 271
            // volatile! 
            // Source expression
            // ( $slice iregfile_actions 2 2 ) 
            // iregfile_actions
            // Target expression
            // (as target) reg_valid_write
            // start: WAR dependencies for reg_valid_write
            // done: WAR dependencies for reg_valid_write
            // end:  				$volatile reg_valid_write := ( $slice iregfile_actions 2 2 ) 
            // start: WAR dependencies for iretire_state_to_rs1_imm
            // done: WAR dependencies for iretire_state_to_rs1_imm
            // start:  				$volatile iretire_state_to_rs1_imm := ( $slice iregfile_actions 1 1 ) 
            //  file prog.linked.opt.aa, line 272
            // volatile! 
            // Source expression
            // ( $slice iregfile_actions 1 1 ) 
            // iregfile_actions
            // Target expression
            // (as target) iretire_state_to_rs1_imm
            // start: WAR dependencies for iretire_state_to_rs1_imm
            // done: WAR dependencies for iretire_state_to_rs1_imm
            // end:  				$volatile iretire_state_to_rs1_imm := ( $slice iregfile_actions 1 1 ) 
            // start: WAR dependencies for iretire_state_to_rs2
            // done: WAR dependencies for iretire_state_to_rs2
            // start:  				$volatile iretire_state_to_rs2 := ( $slice iregfile_actions 0 0 ) 
            //  file prog.linked.opt.aa, line 273
            // volatile! 
            // Source expression
            // ( $slice iregfile_actions 0 0 ) 
            // iregfile_actions
            // Target expression
            // (as target) iretire_state_to_rs2
            // start: WAR dependencies for iretire_state_to_rs2
            // done: WAR dependencies for iretire_state_to_rs2
            // end:  				$volatile iretire_state_to_rs2 := ( $slice iregfile_actions 0 0 ) 
            // start: WAR dependencies for reg_opcode
            // done: WAR dependencies for reg_opcode
            // start:  				$volatile reg_opcode := ( $slice iregfile_state 41 34 ) 
            //  file prog.linked.opt.aa, line 274
            // volatile! 
            // Source expression
            // ( $slice iregfile_state 41 34 ) 
            // iregfile_state
            // Target expression
            // (as target) reg_opcode
            // start: WAR dependencies for reg_opcode
            // done: WAR dependencies for reg_opcode
            // end:  				$volatile reg_opcode := ( $slice iregfile_state 41 34 ) 
            // start: WAR dependencies for reg_rs1_imm
            // done: WAR dependencies for reg_rs1_imm
            // start:  				$volatile reg_rs1_imm := ( $slice iregfile_state 33 26 ) 
            //  file prog.linked.opt.aa, line 275
            // volatile! 
            // Source expression
            // ( $slice iregfile_state 33 26 ) 
            // iregfile_state
            // Target expression
            // (as target) reg_rs1_imm
            // start: WAR dependencies for reg_rs1_imm
            // done: WAR dependencies for reg_rs1_imm
            // end:  				$volatile reg_rs1_imm := ( $slice iregfile_state 33 26 ) 
            // start: WAR dependencies for reg_rs2
            // done: WAR dependencies for reg_rs2
            // start:  				$volatile reg_rs2 := ( $slice iregfile_state 25 18 ) 
            //  file prog.linked.opt.aa, line 276
            // volatile! 
            // Source expression
            // ( $slice iregfile_state 25 18 ) 
            // iregfile_state
            // Target expression
            // (as target) reg_rs2
            // start: WAR dependencies for reg_rs2
            // done: WAR dependencies for reg_rs2
            // end:  				$volatile reg_rs2 := ( $slice iregfile_state 25 18 ) 
            // start: WAR dependencies for reg_rd
            // done: WAR dependencies for reg_rd
            // start:  				$volatile reg_rd := ( $slice iregfile_state 17 10 ) 
            //  file prog.linked.opt.aa, line 277
            // volatile! 
            // Source expression
            // ( $slice iregfile_state 17 10 ) 
            // iregfile_state
            // Target expression
            // (as target) reg_rd
            // start: WAR dependencies for reg_rd
            // done: WAR dependencies for reg_rd
            // end:  				$volatile reg_rd := ( $slice iregfile_state 17 10 ) 
            // start: WAR dependencies for reg_data_to_be_written
            // done: WAR dependencies for reg_data_to_be_written
            // start:  				$volatile reg_data_to_be_written := iretire_exec_result_memData
            //  file prog.linked.opt.aa, line 278
            // volatile! 
            // Source expression
            // iretire_exec_result_memData
            // Target expression
            // (as target) reg_data_to_be_written
            // start: WAR dependencies for reg_data_to_be_written
            // done: WAR dependencies for reg_data_to_be_written
            // end:  				$volatile reg_data_to_be_written := iretire_exec_result_memData
            // start: 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 ) 
            //  file prog.linked.opt.aa, line 279
            $T[call_stmt_1224_sample_start_] 
            $T[call_stmt_1224_sample_completed_] 
            $T[call_stmt_1224_update_start_] 
            $T[call_stmt_1224_update_completed_] 
            // Call input argument 0
            // reg_valid_read1
            // Call input argument 1
            // reg_rs1_imm
            // Call input argument 2
            // reg_valid_read2
            // Call input argument 3
            // reg_rs2
            // Call input argument 4
            // reg_valid_write
            // Call input argument 5
            // iretire_rd
            // Call input argument 6
            // reg_data_to_be_written
            // start: Forward dependencies from reg_valid_read1 to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_valid_read1 to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_valid_read1
            phi_stmt_933_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from reg_rs1_imm to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_945_update_completed_)
            // done: Forward dependencies from reg_rs1_imm to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_rs1_imm
            phi_stmt_945_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from reg_valid_read2 to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_valid_read2 to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_valid_read2
            phi_stmt_933_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from reg_rs2 to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_945_update_completed_)
            // done: Forward dependencies from reg_rs2 to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_rs2
            phi_stmt_945_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from reg_valid_write to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_933_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_937_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_941_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_945_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_949_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_953_update_completed_)
            call_stmt_1224_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_valid_write to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_valid_write
            phi_stmt_933_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from iretire_rd to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from iretire_rd to transition call_stmt_1224_sample_start_
            // RAW reenables for iretire_rd
            phi_stmt_957_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            // start: Forward dependencies from reg_data_to_be_written to transition call_stmt_1224_sample_start_
            call_stmt_1224_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_data_to_be_written to transition call_stmt_1224_sample_start_
            // RAW reenables for reg_data_to_be_written
            phi_stmt_957_update_start_ o<-& (call_stmt_1224_sample_completed_ 0)
            ;;[call_stmt_1224_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_1224_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_1224_sample_start_ &-> (call_stmt_1224_Sample)
            call_stmt_1224_sample_completed_ <-& (call_stmt_1224_Sample)
            call_stmt_1224_sample_completed_ &-> ($null)
            call_stmt_1224_update_start_ &-> (call_stmt_1224_Update)
            call_stmt_1224_update_completed_ <-& (call_stmt_1224_Update)
            // Call output argument 0
            // (as target) reg_d1
            // Call output argument 1
            // (as target) reg_d2
            // self-release: 
            call_stmt_1224_sample_start_ o<-& (call_stmt_1224_sample_completed_ 1)
            $null &-> (call_stmt_1224_update_start_)
            call_stmt_1224_update_start_ o<-& (call_stmt_1224_update_completed_ 0)
            // start: WAR dependencies for reg_d1
            // done: WAR dependencies for reg_d1
            // start: WAR dependencies for reg_d2
            // done: WAR dependencies for reg_d2
            // end: 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 ) 
            // start:  				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 280
            $T[assign_stmt_1227_sample_start_] 
            $T[assign_stmt_1227_sample_completed_] 
            $T[assign_stmt_1227_update_start_] 
            $T[assign_stmt_1227_update_completed_] 
            // Source expression
            // iretire_state_to_rs1_imm
            // Target expression
            // (as target) iretire_state_to_rs1_imm_1318_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1227_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1227_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1227_sample_start_ &-> (assign_stmt_1227_Sample)
            assign_stmt_1227_sample_completed_ <-& (assign_stmt_1227_Sample)
            assign_stmt_1227_sample_completed_ &-> ($null)
            assign_stmt_1227_update_start_ &-> (assign_stmt_1227_Update)
            assign_stmt_1227_update_completed_ <-& (assign_stmt_1227_Update)
            // start: Forward dependencies from iretire_state_to_rs1_imm to transition assign_stmt_1227_sample_start_
            assign_stmt_1227_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1227_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from iretire_state_to_rs1_imm to transition assign_stmt_1227_sample_start_
            // RAW reenables for iretire_state_to_rs1_imm
            phi_stmt_933_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1227_sample_completed_ 0)
            // self-release: 
            assign_stmt_1227_sample_start_ o<-& (assign_stmt_1227_sample_completed_ 1)
            $null &-> (assign_stmt_1227_update_start_)
            assign_stmt_1227_update_start_ o<-& (assign_stmt_1227_update_completed_ 0)
            // start: WAR dependencies for iretire_state_to_rs1_imm_1318_delayed_7_0
            // done: WAR dependencies for iretire_state_to_rs1_imm_1318_delayed_7_0
            // end:  				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
            // start:  				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 281
            $T[assign_stmt_1230_sample_start_] 
            $T[assign_stmt_1230_sample_completed_] 
            $T[assign_stmt_1230_update_start_] 
            $T[assign_stmt_1230_update_completed_] 
            // Source expression
            // reg_data_to_be_written
            // Target expression
            // (as target) reg_data_to_be_written_1319_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1230_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1230_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1230_sample_start_ &-> (assign_stmt_1230_Sample)
            assign_stmt_1230_sample_completed_ <-& (assign_stmt_1230_Sample)
            assign_stmt_1230_sample_completed_ &-> ($null)
            assign_stmt_1230_update_start_ &-> (assign_stmt_1230_Update)
            assign_stmt_1230_update_completed_ <-& (assign_stmt_1230_Update)
            // start: Forward dependencies from reg_data_to_be_written to transition assign_stmt_1230_sample_start_
            assign_stmt_1230_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_data_to_be_written to transition assign_stmt_1230_sample_start_
            // RAW reenables for reg_data_to_be_written
            phi_stmt_957_update_start_ o<-& (assign_stmt_1230_sample_completed_ 0)
            // self-release: 
            assign_stmt_1230_sample_start_ o<-& (assign_stmt_1230_sample_completed_ 1)
            $null &-> (assign_stmt_1230_update_start_)
            assign_stmt_1230_update_start_ o<-& (assign_stmt_1230_update_completed_ 0)
            // start: WAR dependencies for reg_data_to_be_written_1319_delayed_7_0
            // done: WAR dependencies for reg_data_to_be_written_1319_delayed_7_0
            // end:  				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            // start: WAR dependencies for final_rd1
            // done: WAR dependencies for final_rd1
            // start:  				$volatile final_rd1 := ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
            //  file prog.linked.opt.aa, line 282
            // volatile! 
            // Source expression
            // ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
            // iretire_state_to_rs1_imm_1318_delayed_7_0
            // reg_data_to_be_written_1319_delayed_7_0
            // reg_d1
            // Target expression
            // (as target) final_rd1
            // start: WAR dependencies for final_rd1
            // done: WAR dependencies for final_rd1
            // end:  				$volatile final_rd1 := ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
            // start:  				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 283
            $T[assign_stmt_1239_sample_start_] 
            $T[assign_stmt_1239_sample_completed_] 
            $T[assign_stmt_1239_update_start_] 
            $T[assign_stmt_1239_update_completed_] 
            // Source expression
            // iretire_state_to_rs2
            // Target expression
            // (as target) iretire_state_to_rs2_1324_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1239_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1239_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1239_sample_start_ &-> (assign_stmt_1239_Sample)
            assign_stmt_1239_sample_completed_ <-& (assign_stmt_1239_Sample)
            assign_stmt_1239_sample_completed_ &-> ($null)
            assign_stmt_1239_update_start_ &-> (assign_stmt_1239_Update)
            assign_stmt_1239_update_completed_ <-& (assign_stmt_1239_Update)
            // start: Forward dependencies from iretire_state_to_rs2 to transition assign_stmt_1239_sample_start_
            assign_stmt_1239_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1239_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from iretire_state_to_rs2 to transition assign_stmt_1239_sample_start_
            // RAW reenables for iretire_state_to_rs2
            phi_stmt_933_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1239_sample_completed_ 0)
            // self-release: 
            assign_stmt_1239_sample_start_ o<-& (assign_stmt_1239_sample_completed_ 1)
            $null &-> (assign_stmt_1239_update_start_)
            assign_stmt_1239_update_start_ o<-& (assign_stmt_1239_update_completed_ 0)
            // start: WAR dependencies for iretire_state_to_rs2_1324_delayed_7_0
            // done: WAR dependencies for iretire_state_to_rs2_1324_delayed_7_0
            // end:  				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
            // start:  				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 284
            $T[assign_stmt_1242_sample_start_] 
            $T[assign_stmt_1242_sample_completed_] 
            $T[assign_stmt_1242_update_start_] 
            $T[assign_stmt_1242_update_completed_] 
            // Source expression
            // reg_data_to_be_written
            // Target expression
            // (as target) reg_data_to_be_written_1325_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1242_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1242_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1242_sample_start_ &-> (assign_stmt_1242_Sample)
            assign_stmt_1242_sample_completed_ <-& (assign_stmt_1242_Sample)
            assign_stmt_1242_sample_completed_ &-> ($null)
            assign_stmt_1242_update_start_ &-> (assign_stmt_1242_Update)
            assign_stmt_1242_update_completed_ <-& (assign_stmt_1242_Update)
            // start: Forward dependencies from reg_data_to_be_written to transition assign_stmt_1242_sample_start_
            assign_stmt_1242_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_data_to_be_written to transition assign_stmt_1242_sample_start_
            // RAW reenables for reg_data_to_be_written
            phi_stmt_957_update_start_ o<-& (assign_stmt_1242_sample_completed_ 0)
            // self-release: 
            assign_stmt_1242_sample_start_ o<-& (assign_stmt_1242_sample_completed_ 1)
            $null &-> (assign_stmt_1242_update_start_)
            assign_stmt_1242_update_start_ o<-& (assign_stmt_1242_update_completed_ 0)
            // start: WAR dependencies for reg_data_to_be_written_1325_delayed_7_0
            // done: WAR dependencies for reg_data_to_be_written_1325_delayed_7_0
            // end:  				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            // start: WAR dependencies for final_rd2
            // done: WAR dependencies for final_rd2
            // start:  				$volatile final_rd2 := ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
            //  file prog.linked.opt.aa, line 285
            // volatile! 
            // Source expression
            // ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
            // iretire_state_to_rs2_1324_delayed_7_0
            // reg_data_to_be_written_1325_delayed_7_0
            // reg_d2
            // Target expression
            // (as target) final_rd2
            // start: WAR dependencies for final_rd2
            // done: WAR dependencies for final_rd2
            // end:  				$volatile final_rd2 := ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
            // start:  				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 286
            $T[assign_stmt_1251_sample_start_] 
            $T[assign_stmt_1251_sample_completed_] 
            $T[assign_stmt_1251_update_start_] 
            $T[assign_stmt_1251_update_completed_] 
            // Source expression
            // flush_iexec
            // Target expression
            // (as target) flush_iexec_1330_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1251_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1251_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1251_sample_start_ &-> (assign_stmt_1251_Sample)
            assign_stmt_1251_sample_completed_ <-& (assign_stmt_1251_Sample)
            assign_stmt_1251_sample_completed_ &-> ($null)
            assign_stmt_1251_update_start_ &-> (assign_stmt_1251_Update)
            assign_stmt_1251_update_completed_ <-& (assign_stmt_1251_Update)
            // start: Forward dependencies from flush_iexec to transition assign_stmt_1251_sample_start_
            assign_stmt_1251_sample_start_ <-& (phi_stmt_933_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_937_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_941_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_945_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_949_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_953_update_completed_)
            assign_stmt_1251_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from flush_iexec to transition assign_stmt_1251_sample_start_
            // RAW reenables for flush_iexec
            phi_stmt_933_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_937_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_941_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_945_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_949_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_953_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            phi_stmt_957_update_start_ o<-& (assign_stmt_1251_sample_completed_ 0)
            // self-release: 
            assign_stmt_1251_sample_start_ o<-& (assign_stmt_1251_sample_completed_ 1)
            $null &-> (assign_stmt_1251_update_start_)
            assign_stmt_1251_update_start_ o<-& (assign_stmt_1251_update_completed_ 0)
            // start: WAR dependencies for flush_iexec_1330_delayed_7_0
            // done: WAR dependencies for flush_iexec_1330_delayed_7_0
            // end:  				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
            // start:  				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 287
            // Source expression
            // ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd))
            $T[CONCAT_u16_u32_1259_sample_start_] 
            $T[CONCAT_u16_u32_1259_sample_completed_] 
            $T[CONCAT_u16_u32_1259_update_start_] 
            $T[CONCAT_u16_u32_1259_update_completed_] 
            // (reg_opcode && reg_rs1_imm)
            // reg_opcode
            // reg_rs1_imm
            // (reg_rs2 && reg_rd)
            // reg_rs2
            // reg_rd
            // start: Forward dependencies from (reg_opcode && reg_rs1_imm) to transition CONCAT_u16_u32_1259_sample_start_
            CONCAT_u16_u32_1259_sample_start_ <-& (phi_stmt_945_update_completed_)
            // done: Forward dependencies from (reg_opcode && reg_rs1_imm) to transition CONCAT_u16_u32_1259_sample_start_
            // start: Forward dependencies from (reg_rs2 && reg_rd) to transition CONCAT_u16_u32_1259_sample_start_
            CONCAT_u16_u32_1259_sample_start_ <-& (phi_stmt_945_update_completed_)
            // done: Forward dependencies from (reg_rs2 && reg_rd) to transition CONCAT_u16_u32_1259_sample_start_
            ;;[CONCAT_u16_u32_1259_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u16_u32_1259_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u16_u32_1259_sample_start_ &-> (CONCAT_u16_u32_1259_Sample)
            CONCAT_u16_u32_1259_sample_completed_ <-& (CONCAT_u16_u32_1259_Sample)
            CONCAT_u16_u32_1259_sample_completed_ &-> ($null)
            CONCAT_u16_u32_1259_update_start_ &-> (CONCAT_u16_u32_1259_Update)
            CONCAT_u16_u32_1259_update_completed_ <-& (CONCAT_u16_u32_1259_Update)
            // RAW reenables for (reg_opcode && reg_rs1_imm)
            phi_stmt_945_update_start_ o<-& (CONCAT_u16_u32_1259_sample_completed_ 0)
            // RAW reenables for (reg_rs2 && reg_rd)
            phi_stmt_945_update_start_ o<-& (CONCAT_u16_u32_1259_sample_completed_ 0)
            // self-release: 
            CONCAT_u16_u32_1259_sample_start_ o<-& (CONCAT_u16_u32_1259_sample_completed_ 1)
            $null &-> (CONCAT_u16_u32_1259_update_start_)
            CONCAT_u16_u32_1259_update_start_ o<-& (CONCAT_u16_u32_1259_update_completed_ 0)
            // Target expression
            // (as target) CONCAT_u16_u32_1338_1338_delayed_7_0
            // start: WAR dependencies for CONCAT_u16_u32_1338_1338_delayed_7_0
            // done: WAR dependencies for CONCAT_u16_u32_1338_1338_delayed_7_0
            // end:  				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
            // start:  				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
            //  file prog.linked.opt.aa, line 288
            $T[assign_stmt_1263_sample_start_] 
            $T[assign_stmt_1263_sample_completed_] 
            $T[assign_stmt_1263_update_start_] 
            $T[assign_stmt_1263_update_completed_] 
            // Source expression
            // iregfile_pc
            // Target expression
            // (as target) iregfile_pc_1342_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1263_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1263_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1263_sample_start_ &-> (assign_stmt_1263_Sample)
            assign_stmt_1263_sample_completed_ <-& (assign_stmt_1263_Sample)
            assign_stmt_1263_sample_completed_ &-> ($null)
            assign_stmt_1263_update_start_ &-> (assign_stmt_1263_Update)
            assign_stmt_1263_update_completed_ <-& (assign_stmt_1263_Update)
            // start: Forward dependencies from iregfile_pc to transition assign_stmt_1263_sample_start_
            assign_stmt_1263_sample_start_ <-& (phi_stmt_945_update_completed_)
            // done: Forward dependencies from iregfile_pc to transition assign_stmt_1263_sample_start_
            // RAW reenables for iregfile_pc
            phi_stmt_945_update_start_ o<-& (assign_stmt_1263_sample_completed_ 0)
            // self-release: 
            assign_stmt_1263_sample_start_ o<-& (assign_stmt_1263_sample_completed_ 1)
            $null &-> (assign_stmt_1263_update_start_)
            assign_stmt_1263_update_start_ o<-& (assign_stmt_1263_update_completed_ 0)
            // start: WAR dependencies for iregfile_pc_1342_delayed_7_0
            // done: WAR dependencies for iregfile_pc_1342_delayed_7_0
            // end:  				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
            // start: WAR dependencies for n_iexec_state
            // WAR dependency: Read: n_iexec_state before Write: 				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
            call_stmt_1224_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (call_stmt_1224_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 ) 
            assign_stmt_1227_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1227_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
            assign_stmt_1230_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1230_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            assign_stmt_1239_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1239_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
            assign_stmt_1242_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1242_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            assign_stmt_1251_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1251_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
            CONCAT_u16_u32_1259_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (CONCAT_u16_u32_1259_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
            assign_stmt_1263_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1263_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
            // done: WAR dependencies for n_iexec_state
            // start:  				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
            //  file prog.linked.opt.aa, line 289
            // volatile! 
            // Source expression
            // ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
            // flush_iexec_1330_delayed_7_0
            // (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0))
            // CONCAT_u16_u32_1338_1338_delayed_7_0
            // ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)
            // (final_rd1 && final_rd2)
            // final_rd1
            // final_rd2
            // iregfile_pc_1342_delayed_7_0
            // Target expression
            // (as target) n_iexec_state
            // start: WAR dependencies for n_iexec_state
            // WAR dependency: Read: n_iexec_state before Write: 				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
            call_stmt_1224_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (call_stmt_1224_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 )  $buffering 2
            assign_stmt_1227_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1227_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
            assign_stmt_1230_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1230_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            assign_stmt_1239_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1239_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
            assign_stmt_1242_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1242_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
            assign_stmt_1251_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1251_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
            CONCAT_u16_u32_1259_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (CONCAT_u16_u32_1259_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
            assign_stmt_1263_update_start_ <-& (phi_stmt_949_sample_completed_)
            phi_stmt_949_sample_start_ o<-& (assign_stmt_1263_update_completed_ 0)
            // WAR dependency: release  Read: n_iexec_state with Write: 				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
            // done: WAR dependencies for n_iexec_state
            // end:  				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
            // start:  				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 290
            // Source expression
            // (dcache_opcode == LOAD)
            $T[EQ_u8_u1_1279_sample_start_] 
            $T[EQ_u8_u1_1279_sample_completed_] 
            $T[EQ_u8_u1_1279_update_start_] 
            $T[EQ_u8_u1_1279_update_completed_] 
            // dcache_opcode
            // start: Forward dependencies from dcache_opcode to transition EQ_u8_u1_1279_sample_start_
            EQ_u8_u1_1279_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from dcache_opcode to transition EQ_u8_u1_1279_sample_start_
            ;;[EQ_u8_u1_1279_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_1279_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_1279_sample_start_ &-> (EQ_u8_u1_1279_Sample)
            EQ_u8_u1_1279_sample_completed_ <-& (EQ_u8_u1_1279_Sample)
            EQ_u8_u1_1279_sample_completed_ &-> ($null)
            EQ_u8_u1_1279_update_start_ &-> (EQ_u8_u1_1279_Update)
            EQ_u8_u1_1279_update_completed_ <-& (EQ_u8_u1_1279_Update)
            // RAW reenables for dcache_opcode
            phi_stmt_953_update_start_ o<-& (EQ_u8_u1_1279_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_1279_sample_start_ o<-& (EQ_u8_u1_1279_sample_completed_ 1)
            $null &-> (EQ_u8_u1_1279_update_start_)
            EQ_u8_u1_1279_update_start_ o<-& (EQ_u8_u1_1279_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_1350_1350_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_1350_1350_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_1350_1350_delayed_7_0
            // end:  				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
            // start:  				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 291
            $T[assign_stmt_1283_sample_start_] 
            $T[assign_stmt_1283_sample_completed_] 
            $T[assign_stmt_1283_update_start_] 
            $T[assign_stmt_1283_update_completed_] 
            // Source expression
            // dcache_exec_result
            // Target expression
            // (as target) dcache_exec_result_1352_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1283_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1283_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1283_sample_start_ &-> (assign_stmt_1283_Sample)
            assign_stmt_1283_sample_completed_ <-& (assign_stmt_1283_Sample)
            assign_stmt_1283_sample_completed_ &-> ($null)
            assign_stmt_1283_update_start_ &-> (assign_stmt_1283_Update)
            assign_stmt_1283_update_completed_ <-& (assign_stmt_1283_Update)
            // start: Forward dependencies from dcache_exec_result to transition assign_stmt_1283_sample_start_
            assign_stmt_1283_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from dcache_exec_result to transition assign_stmt_1283_sample_start_
            // RAW reenables for dcache_exec_result
            phi_stmt_953_update_start_ o<-& (assign_stmt_1283_sample_completed_ 0)
            // self-release: 
            assign_stmt_1283_sample_start_ o<-& (assign_stmt_1283_sample_completed_ 1)
            $null &-> (assign_stmt_1283_update_start_)
            assign_stmt_1283_update_start_ o<-& (assign_stmt_1283_update_completed_ 0)
            // start: WAR dependencies for dcache_exec_result_1352_delayed_7_0
            // done: WAR dependencies for dcache_exec_result_1352_delayed_7_0
            // end:  				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
            // start: WAR dependencies for dcache_data_to_be_written_to_reg
            // done: WAR dependencies for dcache_data_to_be_written_to_reg
            // start:  				$volatile dcache_data_to_be_written_to_reg := ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
            //  file prog.linked.opt.aa, line 292
            // volatile! 
            // Source expression
            // ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
            // EQ_u8_u1_1350_1350_delayed_7_0
            // memReadData
            // dcache_exec_result_1352_delayed_7_0
            // Target expression
            // (as target) dcache_data_to_be_written_to_reg
            // start: WAR dependencies for dcache_data_to_be_written_to_reg
            // done: WAR dependencies for dcache_data_to_be_written_to_reg
            // end:  				$volatile dcache_data_to_be_written_to_reg := ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
            // start:  				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
            //  file prog.linked.opt.aa, line 293
            // Source expression
            // (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1))
            $T[CONCAT_u24_u64_1299_sample_start_] 
            $T[CONCAT_u24_u64_1299_sample_completed_] 
            $T[CONCAT_u24_u64_1299_update_start_] 
            $T[CONCAT_u24_u64_1299_update_completed_] 
            // ((dcache_opcode && dcache_rs1_imm) && dcache_rs2)
            // (dcache_opcode && dcache_rs1_imm)
            // dcache_opcode
            // dcache_rs1_imm
            // dcache_rs2
            // (dcache_rd && dcache_rd1)
            // dcache_rd
            // dcache_rd1
            // start: Forward dependencies from ((dcache_opcode && dcache_rs1_imm) && dcache_rs2) to transition CONCAT_u24_u64_1299_sample_start_
            CONCAT_u24_u64_1299_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from ((dcache_opcode && dcache_rs1_imm) && dcache_rs2) to transition CONCAT_u24_u64_1299_sample_start_
            // start: Forward dependencies from (dcache_rd && dcache_rd1) to transition CONCAT_u24_u64_1299_sample_start_
            CONCAT_u24_u64_1299_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from (dcache_rd && dcache_rd1) to transition CONCAT_u24_u64_1299_sample_start_
            ;;[CONCAT_u24_u64_1299_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u24_u64_1299_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u24_u64_1299_sample_start_ &-> (CONCAT_u24_u64_1299_Sample)
            CONCAT_u24_u64_1299_sample_completed_ <-& (CONCAT_u24_u64_1299_Sample)
            CONCAT_u24_u64_1299_sample_completed_ &-> ($null)
            CONCAT_u24_u64_1299_update_start_ &-> (CONCAT_u24_u64_1299_Update)
            CONCAT_u24_u64_1299_update_completed_ <-& (CONCAT_u24_u64_1299_Update)
            // RAW reenables for ((dcache_opcode && dcache_rs1_imm) && dcache_rs2)
            phi_stmt_953_update_start_ o<-& (CONCAT_u24_u64_1299_sample_completed_ 0)
            // RAW reenables for (dcache_rd && dcache_rd1)
            phi_stmt_953_update_start_ o<-& (CONCAT_u24_u64_1299_sample_completed_ 0)
            // self-release: 
            CONCAT_u24_u64_1299_sample_start_ o<-& (CONCAT_u24_u64_1299_sample_completed_ 1)
            $null &-> (CONCAT_u24_u64_1299_update_start_)
            CONCAT_u24_u64_1299_update_start_ o<-& (CONCAT_u24_u64_1299_update_completed_ 0)
            // Target expression
            // (as target) CONCAT_u24_u64_1364_1364_delayed_7_0
            // start: WAR dependencies for CONCAT_u24_u64_1364_1364_delayed_7_0
            // done: WAR dependencies for CONCAT_u24_u64_1364_1364_delayed_7_0
            // end:  				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
            // start:  				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 294
            $T[assign_stmt_1303_sample_start_] 
            $T[assign_stmt_1303_sample_completed_] 
            $T[assign_stmt_1303_update_start_] 
            $T[assign_stmt_1303_update_completed_] 
            // Source expression
            // dcache_rd2
            // Target expression
            // (as target) dcache_rd2_1365_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_1303_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_1303_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_1303_sample_start_ &-> (assign_stmt_1303_Sample)
            assign_stmt_1303_sample_completed_ <-& (assign_stmt_1303_Sample)
            assign_stmt_1303_sample_completed_ &-> ($null)
            assign_stmt_1303_update_start_ &-> (assign_stmt_1303_Update)
            assign_stmt_1303_update_completed_ <-& (assign_stmt_1303_Update)
            // start: Forward dependencies from dcache_rd2 to transition assign_stmt_1303_sample_start_
            assign_stmt_1303_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from dcache_rd2 to transition assign_stmt_1303_sample_start_
            // RAW reenables for dcache_rd2
            phi_stmt_953_update_start_ o<-& (assign_stmt_1303_sample_completed_ 0)
            // self-release: 
            assign_stmt_1303_sample_start_ o<-& (assign_stmt_1303_sample_completed_ 1)
            $null &-> (assign_stmt_1303_update_start_)
            assign_stmt_1303_update_start_ o<-& (assign_stmt_1303_update_completed_ 0)
            // start: WAR dependencies for dcache_rd2_1365_delayed_7_0
            // done: WAR dependencies for dcache_rd2_1365_delayed_7_0
            // end:  				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
            // start:  				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
            //  file prog.linked.opt.aa, line 295
            // Source expression
            // (dcache_isBranch && dcache_pc)
            $T[CONCAT_u1_u11_1307_sample_start_] 
            $T[CONCAT_u1_u11_1307_sample_completed_] 
            $T[CONCAT_u1_u11_1307_update_start_] 
            $T[CONCAT_u1_u11_1307_update_completed_] 
            // dcache_isBranch
            // dcache_pc
            // start: Forward dependencies from dcache_isBranch to transition CONCAT_u1_u11_1307_sample_start_
            CONCAT_u1_u11_1307_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from dcache_isBranch to transition CONCAT_u1_u11_1307_sample_start_
            // start: Forward dependencies from dcache_pc to transition CONCAT_u1_u11_1307_sample_start_
            CONCAT_u1_u11_1307_sample_start_ <-& (phi_stmt_953_update_completed_)
            // done: Forward dependencies from dcache_pc to transition CONCAT_u1_u11_1307_sample_start_
            ;;[CONCAT_u1_u11_1307_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u1_u11_1307_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u1_u11_1307_sample_start_ &-> (CONCAT_u1_u11_1307_Sample)
            CONCAT_u1_u11_1307_sample_completed_ <-& (CONCAT_u1_u11_1307_Sample)
            CONCAT_u1_u11_1307_sample_completed_ &-> ($null)
            CONCAT_u1_u11_1307_update_start_ &-> (CONCAT_u1_u11_1307_Update)
            CONCAT_u1_u11_1307_update_completed_ <-& (CONCAT_u1_u11_1307_Update)
            // RAW reenables for dcache_isBranch
            phi_stmt_953_update_start_ o<-& (CONCAT_u1_u11_1307_sample_completed_ 0)
            // RAW reenables for dcache_pc
            phi_stmt_953_update_start_ o<-& (CONCAT_u1_u11_1307_sample_completed_ 0)
            // self-release: 
            CONCAT_u1_u11_1307_sample_start_ o<-& (CONCAT_u1_u11_1307_sample_completed_ 1)
            $null &-> (CONCAT_u1_u11_1307_update_start_)
            CONCAT_u1_u11_1307_update_start_ o<-& (CONCAT_u1_u11_1307_update_completed_ 0)
            // Target expression
            // (as target) CONCAT_u1_u11_1370_1370_delayed_7_0
            // start: WAR dependencies for CONCAT_u1_u11_1370_1370_delayed_7_0
            // done: WAR dependencies for CONCAT_u1_u11_1370_1370_delayed_7_0
            // end:  				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
            // start: WAR dependencies for n_iRetire_state
            // WAR dependency: Read: n_iRetire_state before Write: 				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
            call_stmt_1175_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (call_stmt_1175_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				$call accessMem (memWrite memAddr memWriteData ) (memReadData ) 
            EQ_u8_u1_1279_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (EQ_u8_u1_1279_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
            assign_stmt_1283_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (assign_stmt_1283_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
            CONCAT_u24_u64_1299_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (CONCAT_u24_u64_1299_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
            assign_stmt_1303_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (assign_stmt_1303_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
            CONCAT_u1_u11_1307_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (CONCAT_u1_u11_1307_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
            // done: WAR dependencies for n_iRetire_state
            // start:  				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
            //  file prog.linked.opt.aa, line 296
            // volatile! 
            // Source expression
            // (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
            // CONCAT_u24_u64_1364_1364_delayed_7_0
            // ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0)
            // (dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg)
            // dcache_rd2_1365_delayed_7_0
            // dcache_data_to_be_written_to_reg
            // CONCAT_u1_u11_1370_1370_delayed_7_0
            // Target expression
            // (as target) n_iRetire_state
            // start: WAR dependencies for n_iRetire_state
            // WAR dependency: Read: n_iRetire_state before Write: 				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
            call_stmt_1175_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (call_stmt_1175_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				$call accessMem (memWrite memAddr memWriteData ) (memReadData )  $buffering 2
            EQ_u8_u1_1279_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (EQ_u8_u1_1279_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
            assign_stmt_1283_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (assign_stmt_1283_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
            CONCAT_u24_u64_1299_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (CONCAT_u24_u64_1299_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
            assign_stmt_1303_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (assign_stmt_1303_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
            CONCAT_u1_u11_1307_update_start_ <-& (phi_stmt_957_sample_completed_)
            phi_stmt_957_sample_start_ o<-& (CONCAT_u1_u11_1307_update_completed_ 0)
            // WAR dependency: release  Read: n_iRetire_state with Write: 				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
            // done: WAR dependencies for n_iRetire_state
            // end:  				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
            // start: WAR dependencies for iretire_to_dcache_addr_32
            // done: WAR dependencies for iretire_to_dcache_addr_32
            // start:  				$volatile iretire_to_dcache_addr_32 := ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
            //  file prog.linked.opt.aa, line 297
            // volatile! 
            // Source expression
            // ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
            // (dcache_rs2 == iretire_rd)
            // dcache_rs2
            // iretire_rd
            // iretire_exec_result_memData
            // dcache_rd2
            // Target expression
            // (as target) iretire_to_dcache_addr_32
            // start: WAR dependencies for iretire_to_dcache_addr_32
            // done: WAR dependencies for iretire_to_dcache_addr_32
            // end:  				$volatile iretire_to_dcache_addr_32 := ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
            // start: WAR dependencies for dcache_to_ex_addr_32
            // done: WAR dependencies for dcache_to_ex_addr_32
            // start:  				$volatile dcache_to_ex_addr_32 := ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
            //  file prog.linked.opt.aa, line 298
            // volatile! 
            // Source expression
            // ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
            // (dcache_rd == iexec_rs1_imm)
            // dcache_rd
            // iexec_rs1_imm
            // dcache_exec_result
            // ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 ) 
            // (iretire_rd == iexec_rs1_imm)
            // iretire_rd
            // iexec_rs1_imm
            // iretire_exec_result_memData
            // iexec_rd1
            // Target expression
            // (as target) dcache_to_ex_addr_32
            // start: WAR dependencies for dcache_to_ex_addr_32
            // done: WAR dependencies for dcache_to_ex_addr_32
            // end:  				$volatile dcache_to_ex_addr_32 := ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
            // start: WAR dependencies for next_ifetch_state_32
            // done: WAR dependencies for next_ifetch_state_32
            // start:  				$volatile next_ifetch_state_32 := ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
            //  file prog.linked.opt.aa, line 299
            // volatile! 
            // Source expression
            // ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
            // is_Branch_Hazard
            // iretire_to_dcache_addr_32
            // ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  ) 
            // ex_Unconditional_JUMP
            // dcache_to_ex_addr_32
            // ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) ) 
            // stall_first_4
            // ($bitcast ($uint<32>) ifetch_state )
            // ifetch_state
            // ($bitcast ($uint<32>) (ifetch_state + 1 ) )
            // (ifetch_state + 1 )
            // ifetch_state
            // Target expression
            // (as target) next_ifetch_state_32
            // start: WAR dependencies for next_ifetch_state_32
            // done: WAR dependencies for next_ifetch_state_32
            // end:  				$volatile next_ifetch_state_32 := ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
            // start: WAR dependencies for next_ifetch_state
            // WAR dependency: Read: next_ifetch_state before Write: 				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_ifetch_state
            // start:  				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
            //  file prog.linked.opt.aa, line 300
            // volatile! 
            // Source expression
            // ( $slice next_ifetch_state_32 9 0 ) 
            // next_ifetch_state_32
            // Target expression
            // (as target) next_ifetch_state
            // start: WAR dependencies for next_ifetch_state
            // WAR dependency: Read: next_ifetch_state before Write: 				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            //  WAR  PHI-PHI dependency ignored...
            // done: WAR dependencies for next_ifetch_state
            // end:  				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
            // start:  				processor_result := reg_data_to_be_written// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 302
            // Source expression
            // reg_data_to_be_written
            // Target expression
            // (as target) processor_result
            $T[WPIPE_processor_result_1370_sample_start_] 
            $T[WPIPE_processor_result_1370_sample_completed_] 
            $T[WPIPE_processor_result_1370_update_start_] 
            $T[WPIPE_processor_result_1370_update_completed_] 
            ;;[WPIPE_processor_result_1370_Sample] 
            {
              // pipe write sample-start processor_result
              $T [req] $T [ack] 
            }
            ;;[WPIPE_processor_result_1370_Update] 
            {
              // pipe write update (complete) processor_result
              $T [req] $T [ack] 
            }
            WPIPE_processor_result_1370_sample_start_ &-> (WPIPE_processor_result_1370_Sample)
            WPIPE_processor_result_1370_sample_completed_ <-& (WPIPE_processor_result_1370_Sample)
            WPIPE_processor_result_1370_update_start_ <-& (WPIPE_processor_result_1370_sample_completed_)
            WPIPE_processor_result_1370_update_start_ &-> (WPIPE_processor_result_1370_Update)
            WPIPE_processor_result_1370_update_completed_ <-& (WPIPE_processor_result_1370_Update)
            WPIPE_processor_result_1370_sample_start_ o<-& (WPIPE_processor_result_1370_update_completed_ 0)
            // start: Forward dependencies from reg_data_to_be_written to transition WPIPE_processor_result_1370_sample_start_
            WPIPE_processor_result_1370_sample_start_ <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from reg_data_to_be_written to transition WPIPE_processor_result_1370_sample_start_
            // RAW reenables for reg_data_to_be_written
            phi_stmt_957_update_start_ o<-& (WPIPE_processor_result_1370_sample_completed_ 0)
            // end:  				processor_result := reg_data_to_be_written// bits of buffering = 32. 
            // ( ~ (iretire_opcode == HALT) )
            // (iretire_opcode == HALT)
            // iretire_opcode
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from ( ~ (iretire_opcode == HALT) ) to transition condition_evaluated
            condition_evaluated <-& (phi_stmt_957_update_completed_)
            // done: Forward dependencies from ( ~ (iretire_opcode == HALT) ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_0
            //  call_stmt_989 store
            //  call_stmt_1175 store
            $T [call_stmt_989_call_stmt_1175_delay] $delay
            // call_stmt_989(store) -> call_stmt_1175(store)
            call_stmt_1175_sample_start_ <-& (call_stmt_989_call_stmt_1175_delay)
            call_stmt_989_call_stmt_1175_delay <-& (call_stmt_989_update_completed_)
            // reenable across ring for memory space memory_space_0
            $T[ring_reenable_memory_space_0] 
            ring_reenable_memory_space_0 <-& (call_stmt_1175_update_completed_)
            call_stmt_989_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            // memory-space  memory_space_1
            //  call_stmt_1224 store
            // reenable across ring for memory space memory_space_1
            // leading and trailing sets are the same... no ring dependency
            // pipe read/write dependencies for pipe processor_result
            // read-dependencies for pipe processor_result
            // write-dependencies for pipe processor_result
            // signal dependencies for processor_result
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_931__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_931_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_931__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_931_loop_body : condition_evaluated
          $bind do_while_stmt_931__entry__  => do_while_stmt_931_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_931_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_931__exit__)
        }
        do_while_stmt_931__entry__ |-> (do_while_stmt_931)
        do_while_stmt_931__exit__ <-| (do_while_stmt_931)
        do_while_stmt_931__entry__ <-| (branch_block_stmt_930__entry__)
        do_while_stmt_931__exit__ |-> (branch_block_stmt_930__exit__)
      }
      branch_block_stmt_930__entry__ |-> (branch_block_stmt_930)
      branch_block_stmt_930__exit__ <-| (branch_block_stmt_930)
      branch_block_stmt_930__entry__ <-| (if_stmt_926_if_link)
      check_for_start <-| (branch_block_stmt_930__exit__)
      if_stmt_926__exit__ <-| (if_stmt_926_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 204
      ;;[merge_stmt_922_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_922__entry__ |-> (merge_stmt_922_dead_link)
      merge_stmt_922__exit__ <-| (merge_stmt_922_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 204  --------------------------
      ||[merge_stmt_922__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_922__entry__ |-> (merge_stmt_922__entry___PhiReq)
      ||[check_for_start_PhiReq] 
      {
        // no phi statements in merge..
      }
      check_for_start |-> (check_for_start_PhiReq)
      $P [merge_stmt_922_PhiReqMerge] 
      merge_stmt_922_PhiReqMerge <-| ( merge_stmt_922__entry___PhiReq  check_for_start_PhiReq )
      ||[merge_stmt_922_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_922_PhiReqMerge |-> (merge_stmt_922_PhiAck)
      merge_stmt_922__exit__  <-| (merge_stmt_922_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 204  --------------------------
      merge_stmt_922__entry__ <-| (branch_block_stmt_921__entry__)
      assign_stmt_925__entry__ <-| (merge_stmt_922__exit__)
      if_stmt_926__entry__ <-| (assign_stmt_925__exit__)
      if_stmt_926__exit__ |-> (branch_block_stmt_921__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processor_daemon%check_start%
    //  file prog.linked.opt.aa, line 204
    // constant-object-declarations for block %processor_daemon%check_start%loop%
    //  file prog.linked.opt.aa, line 212
    // constant-object-declarations for block %processor_daemon%check_start%loop
    //  file prog.linked.opt.aa, line 208
    // constant-object-declarations for block %processor_daemon%check_start
    //  file prog.linked.opt.aa, line 202
    // constant-object-declarations for block %processor_daemon
    //  file prog.linked.opt.aa, line 197
    // constant-declarations for block %processor_daemon%check_start
    //  file prog.linked.opt.aa, line 202
    // constant-declarations for block %processor_daemon%check_start%
    //  file prog.linked.opt.aa, line 204
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // one_8
    $constant $W[R_one_8_928_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %processor_daemon%check_start%loop
    //  file prog.linked.opt.aa, line 208
    // do-while statement  
    //  file prog.linked.opt.aa, line 210
    // HALT
    $constant $W[R_HALT_1375_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %processor_daemon%check_start%loop%
    //  file prog.linked.opt.aa, line 212
    // constant-declarations for phi:  				$phi ifetch_state := 				  one_10 $on   $entry 				  next_ifetch_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 213
    // one_10
    $constant $W[R_one_10_935_wire_constant] : $int<10> := _b0000000001// 1
    // constant-declarations for phi:  				$phi icache_state := 				  _b0  $on   $entry 				  n_icache_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 215
    // _b0 
    $constant $W[konst_939_wire_constant] : $int<10> := _b0000000000// 0
    // constant-declarations for phi:  				$phi idecode_state := 				  _b0  $on   $entry 				  n_idecode_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 217
    // _b0 
    $constant $W[konst_943_wire_constant] : $int<42> := _b000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  				$phi iregfile_state := 				  _b0  $on   $entry 				  n_iregfile_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 219
    // _b0 
    $constant $W[konst_947_wire_constant] : $int<42> := _b000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  				$phi iexec_state := 				  _b0  $on   $entry 				  n_iexec_state $on   $loopback 
    // type of target is $uint<106>
    //  file prog.linked.opt.aa, line 221
    // _b0 
    $constant $W[konst_951_wire_constant] : $int<106> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  				$phi dcache_state := 				  _b0  $on   $entry 				  n_dcache_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 223
    // _b0 
    $constant $W[konst_955_wire_constant] : $int<139> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  				$phi iretire_state := 				  _b0  $on   $entry 				  n_iRetire_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 225
    // _b0 
    $constant $W[konst_959_wire_constant] : $int<139> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    //  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
    //  file prog.linked.opt.aa, line 228
    // 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction )  $buffering 2
    //  file prog.linked.opt.aa, line 229
    // read_signal
    $constant $W[R_read_signal_985_wire_constant] : $int<1> := _b1// 1
    // zero_32
    $constant $W[R_zero_32_987_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
    // zero_10
    $constant $W[R_zero_10_992_wire_constant] : $int<10> := _b0000000000// 0
    // ( $mux stall_first_4 icache_state  ifetch_state ) 
    // ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
    // zero_42
    $constant $W[R_zero_42_1013_wire_constant] : $int<42> := _b000000000000000000000000000000000000000000// 0
    // ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) ) 
    // ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
    // zero_42
    $constant $W[R_zero_42_1024_wire_constant] : $int<42> := _b000000000000000000000000000000000000000000// 0
    // ( $mux stall_first_4 iregfile_state  idecode_state ) 
    // ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
    // ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 ) 
    // ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
    // ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 ) 
    // 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
    //  file prog.linked.opt.aa, line 259
    // ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) 
    // zero_139
    $constant $W[R_zero_139_1139_wire_constant] : $int<139> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
    // ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
    // 				$call accessMem (memWrite memAddr memWriteData ) (memReadData )  $buffering 2
    //  file prog.linked.opt.aa, line 268
    // 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 )  $buffering 2
    //  file prog.linked.opt.aa, line 279
    // ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
    // ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
    // ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
    // zero_106
    $constant $W[R_zero_106_1266_wire_constant] : $int<106> := _b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // LOAD
    $constant $W[R_LOAD_1278_wire_constant] : $int<8> := _b00000011// 3
    // ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
    // ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
    // ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
    // ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 ) 
    // ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
    // ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  ) 
    // ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) ) 
    // 1 
    $constant $W[konst_1348_wire_constant] : $int<10> := _b0000000001// 1
    // block %processor_daemon%check_start
    //  file prog.linked.opt.aa, line 202
    // 		cmd := start_processor// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 206
    // cmd
    $W[cmd_925] : $int<8>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (cmd == one_8)
    $intermediate $W[EQ_u8_u1_929_wire] : $int<1>
    // block %processor_daemon%check_start%loop
    //  file prog.linked.opt.aa, line 208
    // do-while statement  
    //  file prog.linked.opt.aa, line 210
    // (iretire_opcode == HALT)
    $intermediate $W[EQ_u8_u1_1376_wire] : $int<1>
    // ( ~ (iretire_opcode == HALT) )
    $intermediate $W[NOT_u1_u1_1377_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 212
    // 				$phi ifetch_state := 				  one_10 $on   $entry 				  next_ifetch_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 213
    $W[next_ifetch_state_1358_936_buffered] : $int<10>
    // ifetch_state
    $W[ifetch_state_933] : $int<10>
    // 				$phi icache_state := 				  _b0  $on   $entry 				  n_icache_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 215
    $W[n_icache_state_998_940_buffered] : $int<10>
    // icache_state
    $W[icache_state_937] : $int<10>
    // 				$phi idecode_state := 				  _b0  $on   $entry 				  n_idecode_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 217
    $W[n_idecode_state_1021_944_buffered] : $int<42>
    // idecode_state
    $W[idecode_state_941] : $int<42>
    // 				$phi iregfile_state := 				  _b0  $on   $entry 				  n_iregfile_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 219
    $W[n_iregfile_state_1030_948_buffered] : $int<42>
    // iregfile_state
    $W[iregfile_state_945] : $int<42>
    // 				$phi iexec_state := 				  _b0  $on   $entry 				  n_iexec_state $on   $loopback 
    // type of target is $uint<106>
    //  file prog.linked.opt.aa, line 221
    $W[n_iexec_state_1275_952_buffered] : $int<106>
    // iexec_state
    $W[iexec_state_949] : $int<106>
    // 				$phi dcache_state := 				  _b0  $on   $entry 				  n_dcache_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 223
    $W[n_dcache_state_1142_956_buffered] : $int<139>
    // dcache_state
    $W[dcache_state_953] : $int<139>
    // 				$phi iretire_state := 				  _b0  $on   $entry 				  n_iRetire_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 225
    $W[n_iRetire_state_1317_960_buffered] : $int<139>
    // iretire_state
    $W[iretire_state_957] : $int<139>
    //  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
    //  file prog.linked.opt.aa, line 228
    // ifetch_actions
    $W[ifetch_actions_984] : $int<10>
    // icache_actions
    $W[icache_actions_984] : $int<10>
    // idecode_actions
    $W[idecode_actions_984] : $int<42>
    // iregfile_actions
    $W[iregfile_actions_984] : $int<5>
    // iexec_actions
    $W[iexec_actions_984] : $int<4>
    // dcache_actions
    $W[dcache_actions_984] : $int<3>
    // ex_Unconditional_JUMP
    $W[ex_Unconditional_JUMP_984] : $int<1>
    // is_Branch_Hazard
    $W[is_Branch_Hazard_984] : $int<1>
    // flush_ifetch
    $W[flush_ifetch_984] : $int<1>
    // flush_icache
    $W[flush_icache_984] : $int<1>
    // flush_idecode
    $W[flush_idecode_984] : $int<1>
    // flush_reg
    $W[flush_reg_984] : $int<1>
    // flush_iexec
    $W[flush_iexec_984] : $int<1>
    // flush_dcache
    $W[flush_dcache_984] : $int<1>
    // stall_first_4
    $W[stall_first_4_984] : $int<1>
    // 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction )  $buffering 2
    //  file prog.linked.opt.aa, line 229
    // icache_instruction
    $W[icache_instruction_989] : $int<32>
    // 				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
    //  file prog.linked.opt.aa, line 230
    // ( $mux stall_first_4 icache_state  ifetch_state ) 
    $intermediate $W[MUX_996_wire] : $int<10>
    // n_icache_state
    $W[n_icache_state_998] : $int<10>
    // 				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 231
    // flush_idecode_1058_delayed_7_0
    $W[flush_idecode_1058_delayed_7_0_1001] : $int<1>
    // 				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 232
    // stall_first_4_1060_delayed_7_0
    $W[stall_first_4_1060_delayed_7_0_1004] : $int<1>
    // 				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
    //  file prog.linked.opt.aa, line 233
    // idecode_state_1061_delayed_7_0
    $W[idecode_state_1061_delayed_7_0_1007] : $int<42>
    // 				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
    //  file prog.linked.opt.aa, line 234
    // icache_state_1063_delayed_7_0
    $W[icache_state_1063_delayed_7_0_1010] : $int<10>
    // 				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
    //  file prog.linked.opt.aa, line 235
    // (icache_instruction && icache_state_1063_delayed_7_0)
    $intermediate $W[CONCAT_u32_u42_1018_wire] : $int<42>
    // ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) ) 
    $intermediate $W[MUX_1019_wire] : $int<42>
    // n_idecode_state
    $W[n_idecode_state_1021] : $int<42>
    // 				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
    //  file prog.linked.opt.aa, line 236
    // ( $mux stall_first_4 iregfile_state  idecode_state ) 
    $intermediate $W[MUX_1028_wire] : $int<42>
    // n_iregfile_state
    $W[n_iregfile_state_1030] : $int<42>
    // 				$volatile iregfile_pc := ( $slice iregfile_state 9 0 ) 
    //  file prog.linked.opt.aa, line 237
    // iregfile_pc
    $W[iregfile_pc_1034] : $int<10>
    // 				$volatile iexec_rs1_imm := ( $slice iexec_state 97 90 ) 
    //  file prog.linked.opt.aa, line 238
    // iexec_rs1_imm
    $W[iexec_rs1_imm_1038] : $int<8>
    // 				$volatile iexec_rd1 := ( $slice iexec_state 73 42 ) 
    //  file prog.linked.opt.aa, line 239
    // iexec_rd1
    $W[iexec_rd1_1042] : $int<32>
    // 				$volatile iexec_rd2 := ( $slice iexec_state 41 10 ) 
    //  file prog.linked.opt.aa, line 240
    // iexec_rd2
    $W[iexec_rd2_1046] : $int<32>
    // 				$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
    //  file prog.linked.opt.aa, line 241
    // dcache_opcode
    $W[dcache_opcode_1050] : $int<8>
    // 				$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
    //  file prog.linked.opt.aa, line 242
    // dcache_rs1_imm
    $W[dcache_rs1_imm_1054] : $int<8>
    // 				$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
    //  file prog.linked.opt.aa, line 243
    // dcache_rs2
    $W[dcache_rs2_1058] : $int<8>
    // 				$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
    //  file prog.linked.opt.aa, line 244
    // dcache_rd
    $W[dcache_rd_1062] : $int<8>
    // 				$volatile dcache_rd1 := ( $slice dcache_state 106 75 ) 
    //  file prog.linked.opt.aa, line 245
    // dcache_rd1
    $W[dcache_rd1_1066] : $int<32>
    // 				$volatile dcache_rd2 := ( $slice dcache_state 74 43 ) 
    //  file prog.linked.opt.aa, line 246
    // dcache_rd2
    $W[dcache_rd2_1070] : $int<32>
    // 				$volatile dcache_exec_result := ( $slice dcache_state 42 11 ) 
    //  file prog.linked.opt.aa, line 247
    // dcache_exec_result
    $W[dcache_exec_result_1074] : $int<32>
    // 				$volatile dcache_isBranch := ( $slice dcache_state 10 10 ) 
    //  file prog.linked.opt.aa, line 248
    // dcache_isBranch
    $W[dcache_isBranch_1078] : $int<1>
    // 				$volatile dcache_pc := ( $slice dcache_state 9 0 ) 
    //  file prog.linked.opt.aa, line 249
    // dcache_pc
    $W[dcache_pc_1082] : $int<10>
    // 				$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
    //  file prog.linked.opt.aa, line 250
    // iretire_opcode
    $W[iretire_opcode_1086] : $int<8>
    // 				$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
    //  file prog.linked.opt.aa, line 251
    // iretire_rd
    $W[iretire_rd_1090] : $int<8>
    // 				$volatile iretire_exec_result_memData := ( $slice iretire_state 42 11 ) 
    //  file prog.linked.opt.aa, line 252
    // iretire_exec_result_memData
    $W[iretire_exec_result_memData_1094] : $int<32>
    // 				$volatile dcache_to_ex_rs1_imm := ( $slice iexec_actions 3 3 ) 
    //  file prog.linked.opt.aa, line 253
    // dcache_to_ex_rs1_imm
    $W[dcache_to_ex_rs1_imm_1098] : $int<1>
    // 				$volatile dcache_to_ex_rs2 := ( $slice iexec_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 254
    // dcache_to_ex_rs2
    $W[dcache_to_ex_rs2_1102] : $int<1>
    // 				$volatile iretire_state_to_ex_rs1_imm := ( $slice iexec_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 255
    // iretire_state_to_ex_rs1_imm
    $W[iretire_state_to_ex_rs1_imm_1106] : $int<1>
    // 				$volatile iretire_state_to_ex_rs2 := ( $slice iexec_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 256
    // iretire_state_to_ex_rs2
    $W[iretire_state_to_ex_rs2_1110] : $int<1>
    // 				$volatile iexec_rd1_final := ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
    //  file prog.linked.opt.aa, line 257
    // ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 ) 
    $intermediate $W[MUX_1117_wire] : $int<32>
    // iexec_rd1_final
    $W[iexec_rd1_final_1119] : $int<32>
    // 				$volatile iexec_rd2_final := ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
    //  file prog.linked.opt.aa, line 258
    // ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 ) 
    $intermediate $W[MUX_1126_wire] : $int<32>
    // iexec_rd2_final
    $W[iexec_rd2_final_1128] : $int<32>
    // 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
    //  file prog.linked.opt.aa, line 259
    // n_dcache_state_from_exec
    $W[n_dcache_state_from_exec_1133] : $int<139>
    // 				flush_dcache_1221_delayed_4_0 := flush_dcache $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 260
    // flush_dcache_1221_delayed_4_0
    $W[flush_dcache_1221_delayed_4_0_1136] : $int<1>
    // 				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec )  $buffering 2// bits of buffering = 278. 
    //  file prog.linked.opt.aa, line 261
    // n_dcache_state
    $W[n_dcache_state_1142] : $int<139>
    // 				$volatile memWrite := ( $slice dcache_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 262
    // memWrite
    $W[memWrite_1146] : $int<1>
    // 				$volatile iretire_state_to_dcache_addr := ( $slice dcache_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 263
    // iretire_state_to_dcache_addr
    $W[iretire_state_to_dcache_addr_1150] : $int<1>
    // 				$volatile iretire_state_to_dcache_memData := ( $slice dcache_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 264
    // iretire_state_to_dcache_memData
    $W[iretire_state_to_dcache_memData_1154] : $int<1>
    // 				$volatile memWriteData := ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
    //  file prog.linked.opt.aa, line 265
    // memWriteData
    $W[memWriteData_1160] : $int<32>
    // 				$volatile final_memAddr_32 := ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
    //  file prog.linked.opt.aa, line 266
    // final_memAddr_32
    $W[final_memAddr_32_1166] : $int<32>
    // 				$volatile memAddr := ( $slice final_memAddr_32 9 0 ) 
    //  file prog.linked.opt.aa, line 267
    // memAddr
    $W[memAddr_1170] : $int<10>
    // 				$call accessMem (memWrite memAddr memWriteData ) (memReadData )  $buffering 2
    //  file prog.linked.opt.aa, line 268
    // memReadData
    $W[memReadData_1175] : $int<32>
    // 				$volatile reg_valid_read1 := ( $slice iregfile_actions 4 4 ) 
    //  file prog.linked.opt.aa, line 269
    // reg_valid_read1
    $W[reg_valid_read1_1179] : $int<1>
    // 				$volatile reg_valid_read2 := ( $slice iregfile_actions 3 3 ) 
    //  file prog.linked.opt.aa, line 270
    // reg_valid_read2
    $W[reg_valid_read2_1183] : $int<1>
    // 				$volatile reg_valid_write := ( $slice iregfile_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 271
    // reg_valid_write
    $W[reg_valid_write_1187] : $int<1>
    // 				$volatile iretire_state_to_rs1_imm := ( $slice iregfile_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 272
    // iretire_state_to_rs1_imm
    $W[iretire_state_to_rs1_imm_1191] : $int<1>
    // 				$volatile iretire_state_to_rs2 := ( $slice iregfile_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 273
    // iretire_state_to_rs2
    $W[iretire_state_to_rs2_1195] : $int<1>
    // 				$volatile reg_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 274
    // reg_opcode
    $W[reg_opcode_1199] : $int<8>
    // 				$volatile reg_rs1_imm := ( $slice iregfile_state 33 26 ) 
    //  file prog.linked.opt.aa, line 275
    // reg_rs1_imm
    $W[reg_rs1_imm_1203] : $int<8>
    // 				$volatile reg_rs2 := ( $slice iregfile_state 25 18 ) 
    //  file prog.linked.opt.aa, line 276
    // reg_rs2
    $W[reg_rs2_1207] : $int<8>
    // 				$volatile reg_rd := ( $slice iregfile_state 17 10 ) 
    //  file prog.linked.opt.aa, line 277
    // reg_rd
    $W[reg_rd_1211] : $int<8>
    // 				$volatile reg_data_to_be_written := iretire_exec_result_memData
    //  file prog.linked.opt.aa, line 278
    // reg_data_to_be_written
    $W[reg_data_to_be_written_1214] : $int<32>
    // 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 )  $buffering 2
    //  file prog.linked.opt.aa, line 279
    // reg_d1
    $W[reg_d1_1224] : $int<32>
    // reg_d2
    $W[reg_d2_1224] : $int<32>
    // 				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 280
    // iretire_state_to_rs1_imm_1318_delayed_7_0
    $W[iretire_state_to_rs1_imm_1318_delayed_7_0_1227] : $int<1>
    // 				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 281
    // reg_data_to_be_written_1319_delayed_7_0
    $W[reg_data_to_be_written_1319_delayed_7_0_1230] : $int<32>
    // 				$volatile final_rd1 := ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
    //  file prog.linked.opt.aa, line 282
    // final_rd1
    $W[final_rd1_1236] : $int<32>
    // 				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 283
    // iretire_state_to_rs2_1324_delayed_7_0
    $W[iretire_state_to_rs2_1324_delayed_7_0_1239] : $int<1>
    // 				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 284
    // reg_data_to_be_written_1325_delayed_7_0
    $W[reg_data_to_be_written_1325_delayed_7_0_1242] : $int<32>
    // 				$volatile final_rd2 := ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
    //  file prog.linked.opt.aa, line 285
    // final_rd2
    $W[final_rd2_1248] : $int<32>
    // 				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 286
    // flush_iexec_1330_delayed_7_0
    $W[flush_iexec_1330_delayed_7_0_1251] : $int<1>
    // 				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 287
    // (reg_opcode && reg_rs1_imm)
    $intermediate $W[CONCAT_u8_u16_1255_wire] : $int<16>
    // (reg_rs2 && reg_rd)
    $intermediate $W[CONCAT_u8_u16_1258_wire] : $int<16>
    // CONCAT_u16_u32_1338_1338_delayed_7_0
    $W[CONCAT_u16_u32_1338_1338_delayed_7_0_1260] : $int<32>
    // 				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
    //  file prog.linked.opt.aa, line 288
    // iregfile_pc_1342_delayed_7_0
    $W[iregfile_pc_1342_delayed_7_0_1263] : $int<10>
    // 				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
    //  file prog.linked.opt.aa, line 289
    // (final_rd1 && final_rd2)
    $intermediate $W[CONCAT_u32_u64_1270_wire] : $int<64>
    // ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)
    $intermediate $W[CONCAT_u64_u74_1272_wire] : $int<74>
    // (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0))
    $intermediate $W[CONCAT_u32_u106_1273_wire] : $int<106>
    // n_iexec_state
    $W[n_iexec_state_1275] : $int<106>
    // 				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 290
    // EQ_u8_u1_1350_1350_delayed_7_0
    $W[EQ_u8_u1_1350_1350_delayed_7_0_1280] : $int<1>
    // 				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 291
    // dcache_exec_result_1352_delayed_7_0
    $W[dcache_exec_result_1352_delayed_7_0_1283] : $int<32>
    // 				$volatile dcache_data_to_be_written_to_reg := ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
    //  file prog.linked.opt.aa, line 292
    // dcache_data_to_be_written_to_reg
    $W[dcache_data_to_be_written_to_reg_1289] : $int<32>
    // 				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
    //  file prog.linked.opt.aa, line 293
    // (dcache_opcode && dcache_rs1_imm)
    $intermediate $W[CONCAT_u8_u16_1293_wire] : $int<16>
    // ((dcache_opcode && dcache_rs1_imm) && dcache_rs2)
    $intermediate $W[CONCAT_u16_u24_1295_wire] : $int<24>
    // (dcache_rd && dcache_rd1)
    $intermediate $W[CONCAT_u8_u40_1298_wire] : $int<40>
    // CONCAT_u24_u64_1364_1364_delayed_7_0
    $W[CONCAT_u24_u64_1364_1364_delayed_7_0_1300] : $int<64>
    // 				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 294
    // dcache_rd2_1365_delayed_7_0
    $W[dcache_rd2_1365_delayed_7_0_1303] : $int<32>
    // 				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
    //  file prog.linked.opt.aa, line 295
    // CONCAT_u1_u11_1370_1370_delayed_7_0
    $W[CONCAT_u1_u11_1370_1370_delayed_7_0_1308] : $int<11>
    // 				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
    //  file prog.linked.opt.aa, line 296
    // (dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg)
    $intermediate $W[CONCAT_u32_u64_1313_wire] : $int<64>
    // ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0)
    $intermediate $W[CONCAT_u64_u75_1315_wire] : $int<75>
    // n_iRetire_state
    $W[n_iRetire_state_1317] : $int<139>
    // 				$volatile iretire_to_dcache_addr_32 := ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
    //  file prog.linked.opt.aa, line 297
    // (dcache_rs2 == iretire_rd)
    $intermediate $W[EQ_u8_u1_1321_wire] : $int<1>
    // iretire_to_dcache_addr_32
    $W[iretire_to_dcache_addr_32_1325] : $int<32>
    // 				$volatile dcache_to_ex_addr_32 := ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
    //  file prog.linked.opt.aa, line 298
    // (dcache_rd == iexec_rs1_imm)
    $intermediate $W[EQ_u8_u1_1329_wire] : $int<1>
    // (iretire_rd == iexec_rs1_imm)
    $intermediate $W[EQ_u8_u1_1333_wire] : $int<1>
    // ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 ) 
    $intermediate $W[MUX_1336_wire] : $int<32>
    // dcache_to_ex_addr_32
    $W[dcache_to_ex_addr_32_1338] : $int<32>
    // 				$volatile next_ifetch_state_32 := ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
    //  file prog.linked.opt.aa, line 299
    // ($bitcast ($uint<32>) ifetch_state )
    $intermediate $W[type_cast_1346_wire] : $int<32>
    // (ifetch_state + 1 )
    $intermediate $W[ADD_u10_u10_1349_wire] : $int<10>
    // ($bitcast ($uint<32>) (ifetch_state + 1 ) )
    $intermediate $W[type_cast_1350_wire] : $int<32>
    // ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) ) 
    $intermediate $W[MUX_1351_wire] : $int<32>
    // ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  ) 
    $intermediate $W[MUX_1352_wire] : $int<32>
    // next_ifetch_state_32
    $W[next_ifetch_state_32_1354] : $int<32>
    // 				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
    //  file prog.linked.opt.aa, line 300
    // next_ifetch_state
    $W[next_ifetch_state_1358] : $int<10>
    // 				processor_result := reg_data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 302
    // processor_result
    // datapath-instances for block %processor_daemon%check_start
    //  file prog.linked.opt.aa, line 202
    // 		cmd := start_processor// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 206
    // start_processor
    $ioport $in [RPIPE_start_processor_924_inst] (start_processor) (cmd_925) 
    $buffering $out RPIPE_start_processor_924_inst cmd_925 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (cmd == one_8)
    ==[EQ_u8_u1_929_inst] (cmd_925 R_one_8_928_wire_constant) (EQ_u8_u1_929_wire)   $flowthrough 
    $delay EQ_u8_u1_929_inst 0
    ==0? [if_stmt_926_branch] (EQ_u8_u1_929_wire)
    // datapath-instances for block %processor_daemon%check_start%loop
    //  file prog.linked.opt.aa, line 208
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 210
    // (iretire_opcode == HALT)
    ==[EQ_u8_u1_1376_inst] (iretire_opcode_1086 R_HALT_1375_wire_constant) (EQ_u8_u1_1376_wire)   $flowthrough 
    $delay EQ_u8_u1_1376_inst 0
    // ( ~ (iretire_opcode == HALT) )
    ~ [NOT_u1_u1_1377_inst] (EQ_u8_u1_1376_wire) (NOT_u1_u1_1377_wire)   $flowthrough
    $delay NOT_u1_u1_1377_inst 0
    ==0? [do_while_stmt_931_branch] (NOT_u1_u1_1377_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 212
    // 				$phi ifetch_state := 				  one_10 $on   $entry 				  next_ifetch_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 213
    # := [next_ifetch_state_1358_936_buf] (next_ifetch_state_1358) (next_ifetch_state_1358_936_buffered)    $fullrate
    $buffering $out next_ifetch_state_1358_936_buf next_ifetch_state_1358_936_buffered  1
    # $phi [phi_stmt_933] (R_one_10_935_wire_constant next_ifetch_state_1358_936_buffered) ( ifetch_state_933 ) $fullrate
    // $buffering  $out phi_stmt_933 ifetch_state_933 2
    // 				$phi icache_state := 				  _b0  $on   $entry 				  n_icache_state $on   $loopback 
    // type of target is $uint<10>
    //  file prog.linked.opt.aa, line 215
    # := [n_icache_state_998_940_buf] (n_icache_state_998) (n_icache_state_998_940_buffered)    $fullrate
    $buffering $out n_icache_state_998_940_buf n_icache_state_998_940_buffered  1
    # $phi [phi_stmt_937] (konst_939_wire_constant n_icache_state_998_940_buffered) ( icache_state_937 ) $fullrate
    // $buffering  $out phi_stmt_937 icache_state_937 2
    // 				$phi idecode_state := 				  _b0  $on   $entry 				  n_idecode_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 217
    # := [n_idecode_state_1021_944_buf] (n_idecode_state_1021) (n_idecode_state_1021_944_buffered)    $fullrate
    $buffering $out n_idecode_state_1021_944_buf n_idecode_state_1021_944_buffered  1
    # $phi [phi_stmt_941] (konst_943_wire_constant n_idecode_state_1021_944_buffered) ( idecode_state_941 ) $fullrate
    // $buffering  $out phi_stmt_941 idecode_state_941 2
    // 				$phi iregfile_state := 				  _b0  $on   $entry 				  n_iregfile_state $on   $loopback 
    // type of target is $uint<42>
    //  file prog.linked.opt.aa, line 219
    # := [n_iregfile_state_1030_948_buf] (n_iregfile_state_1030) (n_iregfile_state_1030_948_buffered)    $fullrate
    $buffering $out n_iregfile_state_1030_948_buf n_iregfile_state_1030_948_buffered  1
    # $phi [phi_stmt_945] (konst_947_wire_constant n_iregfile_state_1030_948_buffered) ( iregfile_state_945 ) $fullrate
    // $buffering  $out phi_stmt_945 iregfile_state_945 2
    // 				$phi iexec_state := 				  _b0  $on   $entry 				  n_iexec_state $on   $loopback 
    // type of target is $uint<106>
    //  file prog.linked.opt.aa, line 221
    # := [n_iexec_state_1275_952_buf] (n_iexec_state_1275) (n_iexec_state_1275_952_buffered)    $fullrate
    $buffering $out n_iexec_state_1275_952_buf n_iexec_state_1275_952_buffered  1
    # $phi [phi_stmt_949] (konst_951_wire_constant n_iexec_state_1275_952_buffered) ( iexec_state_949 ) $fullrate
    // $buffering  $out phi_stmt_949 iexec_state_949 2
    // 				$phi dcache_state := 				  _b0  $on   $entry 				  n_dcache_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 223
    # := [n_dcache_state_1142_956_buf] (n_dcache_state_1142) (n_dcache_state_1142_956_buffered)    $fullrate
    $buffering $out n_dcache_state_1142_956_buf n_dcache_state_1142_956_buffered  1
    # $phi [phi_stmt_953] (konst_955_wire_constant n_dcache_state_1142_956_buffered) ( dcache_state_953 ) $fullrate
    // $buffering  $out phi_stmt_953 dcache_state_953 2
    // 				$phi iretire_state := 				  _b0  $on   $entry 				  n_iRetire_state $on   $loopback 
    // type of target is $uint<139>
    //  file prog.linked.opt.aa, line 225
    # := [n_iRetire_state_1317_960_buf] (n_iRetire_state_1317) (n_iRetire_state_1317_960_buffered)    $fullrate
    $buffering $out n_iRetire_state_1317_960_buf n_iRetire_state_1317_960_buffered  1
    # $phi [phi_stmt_957] (konst_959_wire_constant n_iRetire_state_1317_960_buffered) ( iretire_state_957 ) $fullrate
    // $buffering  $out phi_stmt_957 iretire_state_957 2
    //  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
    //  file prog.linked.opt.aa, line 228
    $call [call_stmt_984_call] $module scoreBoard(ifetch_state_933 icache_state_937 idecode_state_941 iregfile_state_945 iexec_state_949 dcache_state_953 iretire_state_957) (ifetch_actions_984 icache_actions_984 idecode_actions_984 iregfile_actions_984 iexec_actions_984 dcache_actions_984 ex_Unconditional_JUMP_984 is_Branch_Hazard_984 flush_ifetch_984 flush_icache_984 flush_idecode_984 flush_reg_984 flush_iexec_984 flush_dcache_984 stall_first_4_984)   $flowthrough $fullrate
    // 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction )  $buffering 2
    //  file prog.linked.opt.aa, line 229
    $call [call_stmt_989_call] $module accessMem(R_read_signal_985_wire_constant icache_state_937 R_zero_32_987_wire_constant) (icache_instruction_989)   $fullrate
    $delay call_stmt_989_call 7
    $buffering  $in call_stmt_989_call R_read_signal_985_wire_constant 2
    $buffering  $in call_stmt_989_call icache_state_937 2
    $buffering  $in call_stmt_989_call R_zero_32_987_wire_constant 2
    $buffering  $out call_stmt_989_call icache_instruction_989 2
    // 				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
    //  file prog.linked.opt.aa, line 230
    // ( $mux stall_first_4 icache_state  ifetch_state ) 
    ? [MUX_996_inst] (stall_first_4_984 icache_state_937 ifetch_state_933) (MUX_996_wire)  $flowthrough
    // ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
    ? [MUX_997_inst] (flush_icache_984 R_zero_10_992_wire_constant MUX_996_wire) (n_icache_state_998)  $flowthrough
    // 				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 231
    # := [W_flush_idecode_1058_delayed_7_0_999_inst] (flush_idecode_984) (flush_idecode_1058_delayed_7_0_1001)    $fullrate
    $buffering  $out W_flush_idecode_1058_delayed_7_0_999_inst flush_idecode_1058_delayed_7_0_1001 7
    // 				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 232
    # := [W_stall_first_4_1060_delayed_7_0_1002_inst] (stall_first_4_984) (stall_first_4_1060_delayed_7_0_1004)    $fullrate
    $buffering  $out W_stall_first_4_1060_delayed_7_0_1002_inst stall_first_4_1060_delayed_7_0_1004 7
    // 				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
    //  file prog.linked.opt.aa, line 233
    # := [W_idecode_state_1061_delayed_7_0_1005_inst] (idecode_state_941) (idecode_state_1061_delayed_7_0_1007)    $fullrate
    $buffering  $out W_idecode_state_1061_delayed_7_0_1005_inst idecode_state_1061_delayed_7_0_1007 7
    // 				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
    //  file prog.linked.opt.aa, line 234
    # := [W_icache_state_1063_delayed_7_0_1008_inst] (icache_state_937) (icache_state_1063_delayed_7_0_1010)    $fullrate
    $buffering  $out W_icache_state_1063_delayed_7_0_1008_inst icache_state_1063_delayed_7_0_1010 7
    // 				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
    //  file prog.linked.opt.aa, line 235
    // (icache_instruction && icache_state_1063_delayed_7_0)
    &&[CONCAT_u32_u42_1018_inst] (icache_instruction_989 icache_state_1063_delayed_7_0_1010) (CONCAT_u32_u42_1018_wire)   $flowthrough 
    $delay CONCAT_u32_u42_1018_inst 0
    // ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) ) 
    ? [MUX_1019_inst] (stall_first_4_1060_delayed_7_0_1004 idecode_state_1061_delayed_7_0_1007 CONCAT_u32_u42_1018_wire) (MUX_1019_wire)  $flowthrough
    // ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
    ? [MUX_1020_inst] (flush_idecode_1058_delayed_7_0_1001 R_zero_42_1013_wire_constant MUX_1019_wire) (n_idecode_state_1021)  $flowthrough
    // 				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
    //  file prog.linked.opt.aa, line 236
    // ( $mux stall_first_4 iregfile_state  idecode_state ) 
    ? [MUX_1028_inst] (stall_first_4_984 iregfile_state_945 idecode_state_941) (MUX_1028_wire)  $flowthrough
    // ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
    ? [MUX_1029_inst] (flush_reg_984 R_zero_42_1024_wire_constant MUX_1028_wire) (n_iregfile_state_1030)  $flowthrough
    // 				$volatile iregfile_pc := ( $slice iregfile_state 9 0 ) 
    //  file prog.linked.opt.aa, line 237
    // ( $slice iregfile_state 9 0 ) 
    [:] [slice_1033_inst] (iregfile_state_945 9 0) (iregfile_pc_1034)  $flowthrough
    $delay slice_1033_inst 0
    // 				$volatile iexec_rs1_imm := ( $slice iexec_state 97 90 ) 
    //  file prog.linked.opt.aa, line 238
    // ( $slice iexec_state 97 90 ) 
    [:] [slice_1037_inst] (iexec_state_949 97 90) (iexec_rs1_imm_1038)  $flowthrough
    $delay slice_1037_inst 0
    // 				$volatile iexec_rd1 := ( $slice iexec_state 73 42 ) 
    //  file prog.linked.opt.aa, line 239
    // ( $slice iexec_state 73 42 ) 
    [:] [slice_1041_inst] (iexec_state_949 73 42) (iexec_rd1_1042)  $flowthrough
    $delay slice_1041_inst 0
    // 				$volatile iexec_rd2 := ( $slice iexec_state 41 10 ) 
    //  file prog.linked.opt.aa, line 240
    // ( $slice iexec_state 41 10 ) 
    [:] [slice_1045_inst] (iexec_state_949 41 10) (iexec_rd2_1046)  $flowthrough
    $delay slice_1045_inst 0
    // 				$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
    //  file prog.linked.opt.aa, line 241
    // ( $slice dcache_state 138 131 ) 
    [:] [slice_1049_inst] (dcache_state_953 138 131) (dcache_opcode_1050)  $flowthrough
    $delay slice_1049_inst 0
    // 				$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
    //  file prog.linked.opt.aa, line 242
    // ( $slice dcache_state 130 123 ) 
    [:] [slice_1053_inst] (dcache_state_953 130 123) (dcache_rs1_imm_1054)  $flowthrough
    $delay slice_1053_inst 0
    // 				$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
    //  file prog.linked.opt.aa, line 243
    // ( $slice dcache_state 122 115 ) 
    [:] [slice_1057_inst] (dcache_state_953 122 115) (dcache_rs2_1058)  $flowthrough
    $delay slice_1057_inst 0
    // 				$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
    //  file prog.linked.opt.aa, line 244
    // ( $slice dcache_state 114 107 ) 
    [:] [slice_1061_inst] (dcache_state_953 114 107) (dcache_rd_1062)  $flowthrough
    $delay slice_1061_inst 0
    // 				$volatile dcache_rd1 := ( $slice dcache_state 106 75 ) 
    //  file prog.linked.opt.aa, line 245
    // ( $slice dcache_state 106 75 ) 
    [:] [slice_1065_inst] (dcache_state_953 106 75) (dcache_rd1_1066)  $flowthrough
    $delay slice_1065_inst 0
    // 				$volatile dcache_rd2 := ( $slice dcache_state 74 43 ) 
    //  file prog.linked.opt.aa, line 246
    // ( $slice dcache_state 74 43 ) 
    [:] [slice_1069_inst] (dcache_state_953 74 43) (dcache_rd2_1070)  $flowthrough
    $delay slice_1069_inst 0
    // 				$volatile dcache_exec_result := ( $slice dcache_state 42 11 ) 
    //  file prog.linked.opt.aa, line 247
    // ( $slice dcache_state 42 11 ) 
    [:] [slice_1073_inst] (dcache_state_953 42 11) (dcache_exec_result_1074)  $flowthrough
    $delay slice_1073_inst 0
    // 				$volatile dcache_isBranch := ( $slice dcache_state 10 10 ) 
    //  file prog.linked.opt.aa, line 248
    // ( $slice dcache_state 10 10 ) 
    [:] [slice_1077_inst] (dcache_state_953 10 10) (dcache_isBranch_1078)  $flowthrough
    $delay slice_1077_inst 0
    // 				$volatile dcache_pc := ( $slice dcache_state 9 0 ) 
    //  file prog.linked.opt.aa, line 249
    // ( $slice dcache_state 9 0 ) 
    [:] [slice_1081_inst] (dcache_state_953 9 0) (dcache_pc_1082)  $flowthrough
    $delay slice_1081_inst 0
    // 				$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
    //  file prog.linked.opt.aa, line 250
    // ( $slice iretire_state 138 131 ) 
    [:] [slice_1085_inst] (iretire_state_957 138 131) (iretire_opcode_1086)  $flowthrough
    $delay slice_1085_inst 0
    // 				$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
    //  file prog.linked.opt.aa, line 251
    // ( $slice iretire_state 114 107 ) 
    [:] [slice_1089_inst] (iretire_state_957 114 107) (iretire_rd_1090)  $flowthrough
    $delay slice_1089_inst 0
    // 				$volatile iretire_exec_result_memData := ( $slice iretire_state 42 11 ) 
    //  file prog.linked.opt.aa, line 252
    // ( $slice iretire_state 42 11 ) 
    [:] [slice_1093_inst] (iretire_state_957 42 11) (iretire_exec_result_memData_1094)  $flowthrough
    $delay slice_1093_inst 0
    // 				$volatile dcache_to_ex_rs1_imm := ( $slice iexec_actions 3 3 ) 
    //  file prog.linked.opt.aa, line 253
    // ( $slice iexec_actions 3 3 ) 
    [:] [slice_1097_inst] (iexec_actions_984 3 3) (dcache_to_ex_rs1_imm_1098)  $flowthrough
    $delay slice_1097_inst 0
    // 				$volatile dcache_to_ex_rs2 := ( $slice iexec_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 254
    // ( $slice iexec_actions 2 2 ) 
    [:] [slice_1101_inst] (iexec_actions_984 2 2) (dcache_to_ex_rs2_1102)  $flowthrough
    $delay slice_1101_inst 0
    // 				$volatile iretire_state_to_ex_rs1_imm := ( $slice iexec_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 255
    // ( $slice iexec_actions 1 1 ) 
    [:] [slice_1105_inst] (iexec_actions_984 1 1) (iretire_state_to_ex_rs1_imm_1106)  $flowthrough
    $delay slice_1105_inst 0
    // 				$volatile iretire_state_to_ex_rs2 := ( $slice iexec_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 256
    // ( $slice iexec_actions 0 0 ) 
    [:] [slice_1109_inst] (iexec_actions_984 0 0) (iretire_state_to_ex_rs2_1110)  $flowthrough
    $delay slice_1109_inst 0
    // 				$volatile iexec_rd1_final := ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
    //  file prog.linked.opt.aa, line 257
    // ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 ) 
    ? [MUX_1117_inst] (iretire_state_to_ex_rs1_imm_1106 iretire_exec_result_memData_1094 iexec_rd1_1042) (MUX_1117_wire)  $flowthrough
    // ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
    ? [MUX_1118_inst] (dcache_to_ex_rs1_imm_1098 dcache_exec_result_1074 MUX_1117_wire) (iexec_rd1_final_1119)  $flowthrough
    // 				$volatile iexec_rd2_final := ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
    //  file prog.linked.opt.aa, line 258
    // ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 ) 
    ? [MUX_1126_inst] (iretire_state_to_ex_rs2_1110 iretire_exec_result_memData_1094 iexec_rd2_1046) (MUX_1126_wire)  $flowthrough
    // ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
    ? [MUX_1127_inst] (dcache_to_ex_rs2_1102 dcache_exec_result_1074 MUX_1126_wire) (iexec_rd2_final_1128)  $flowthrough
    // 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
    //  file prog.linked.opt.aa, line 259
    $call [call_stmt_1133_call] $module iExecStage(iexec_state_949 iexec_rd1_final_1119 iexec_rd2_final_1128) (n_dcache_state_from_exec_1133)   $fullrate
    $delay call_stmt_1133_call 4
    $buffering  $in call_stmt_1133_call iexec_state_949 1
    $buffering  $in call_stmt_1133_call iexec_rd1_final_1119 1
    $buffering  $in call_stmt_1133_call iexec_rd2_final_1128 1
    $buffering  $out call_stmt_1133_call n_dcache_state_from_exec_1133 1
    // 				flush_dcache_1221_delayed_4_0 := flush_dcache $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 260
    # := [W_flush_dcache_1221_delayed_4_0_1134_inst] (flush_dcache_984) (flush_dcache_1221_delayed_4_0_1136)    $fullrate
    $buffering  $out W_flush_dcache_1221_delayed_4_0_1134_inst flush_dcache_1221_delayed_4_0_1136 4
    // 				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec )  $buffering 2// bits of buffering = 278. 
    //  file prog.linked.opt.aa, line 261
    // ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) 
    ? [MUX_1141_inst] (flush_dcache_1221_delayed_4_0_1136 R_zero_139_1139_wire_constant n_dcache_state_from_exec_1133) (n_dcache_state_1142)  $fullrate
    $buffering  $out MUX_1141_inst n_dcache_state_1142 2
    // 				$volatile memWrite := ( $slice dcache_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 262
    // ( $slice dcache_actions 2 2 ) 
    [:] [slice_1145_inst] (dcache_actions_984 2 2) (memWrite_1146)  $flowthrough
    $delay slice_1145_inst 0
    // 				$volatile iretire_state_to_dcache_addr := ( $slice dcache_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 263
    // ( $slice dcache_actions 1 1 ) 
    [:] [slice_1149_inst] (dcache_actions_984 1 1) (iretire_state_to_dcache_addr_1150)  $flowthrough
    $delay slice_1149_inst 0
    // 				$volatile iretire_state_to_dcache_memData := ( $slice dcache_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 264
    // ( $slice dcache_actions 0 0 ) 
    [:] [slice_1153_inst] (dcache_actions_984 0 0) (iretire_state_to_dcache_memData_1154)  $flowthrough
    $delay slice_1153_inst 0
    // 				$volatile memWriteData := ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
    //  file prog.linked.opt.aa, line 265
    // ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
    ? [MUX_1159_inst] (iretire_state_to_dcache_memData_1154 iretire_exec_result_memData_1094 dcache_rd2_1070) (memWriteData_1160)  $flowthrough
    // 				$volatile final_memAddr_32 := ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
    //  file prog.linked.opt.aa, line 266
    // ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
    ? [MUX_1165_inst] (iretire_state_to_dcache_addr_1150 iretire_exec_result_memData_1094 dcache_rd1_1066) (final_memAddr_32_1166)  $flowthrough
    // 				$volatile memAddr := ( $slice final_memAddr_32 9 0 ) 
    //  file prog.linked.opt.aa, line 267
    // ( $slice final_memAddr_32 9 0 ) 
    [:] [slice_1169_inst] (final_memAddr_32_1166 9 0) (memAddr_1170)  $flowthrough
    $delay slice_1169_inst 0
    // 				$call accessMem (memWrite memAddr memWriteData ) (memReadData )  $buffering 2
    //  file prog.linked.opt.aa, line 268
    $call [call_stmt_1175_call] $module accessMem(memWrite_1146 memAddr_1170 memWriteData_1160) (memReadData_1175)   $fullrate
    $delay call_stmt_1175_call 7
    $buffering  $in call_stmt_1175_call memWrite_1146 2
    $buffering  $in call_stmt_1175_call memAddr_1170 2
    $buffering  $in call_stmt_1175_call memWriteData_1160 2
    $buffering  $out call_stmt_1175_call memReadData_1175 2
    // 				$volatile reg_valid_read1 := ( $slice iregfile_actions 4 4 ) 
    //  file prog.linked.opt.aa, line 269
    // ( $slice iregfile_actions 4 4 ) 
    [:] [slice_1178_inst] (iregfile_actions_984 4 4) (reg_valid_read1_1179)  $flowthrough
    $delay slice_1178_inst 0
    // 				$volatile reg_valid_read2 := ( $slice iregfile_actions 3 3 ) 
    //  file prog.linked.opt.aa, line 270
    // ( $slice iregfile_actions 3 3 ) 
    [:] [slice_1182_inst] (iregfile_actions_984 3 3) (reg_valid_read2_1183)  $flowthrough
    $delay slice_1182_inst 0
    // 				$volatile reg_valid_write := ( $slice iregfile_actions 2 2 ) 
    //  file prog.linked.opt.aa, line 271
    // ( $slice iregfile_actions 2 2 ) 
    [:] [slice_1186_inst] (iregfile_actions_984 2 2) (reg_valid_write_1187)  $flowthrough
    $delay slice_1186_inst 0
    // 				$volatile iretire_state_to_rs1_imm := ( $slice iregfile_actions 1 1 ) 
    //  file prog.linked.opt.aa, line 272
    // ( $slice iregfile_actions 1 1 ) 
    [:] [slice_1190_inst] (iregfile_actions_984 1 1) (iretire_state_to_rs1_imm_1191)  $flowthrough
    $delay slice_1190_inst 0
    // 				$volatile iretire_state_to_rs2 := ( $slice iregfile_actions 0 0 ) 
    //  file prog.linked.opt.aa, line 273
    // ( $slice iregfile_actions 0 0 ) 
    [:] [slice_1194_inst] (iregfile_actions_984 0 0) (iretire_state_to_rs2_1195)  $flowthrough
    $delay slice_1194_inst 0
    // 				$volatile reg_opcode := ( $slice iregfile_state 41 34 ) 
    //  file prog.linked.opt.aa, line 274
    // ( $slice iregfile_state 41 34 ) 
    [:] [slice_1198_inst] (iregfile_state_945 41 34) (reg_opcode_1199)  $flowthrough
    $delay slice_1198_inst 0
    // 				$volatile reg_rs1_imm := ( $slice iregfile_state 33 26 ) 
    //  file prog.linked.opt.aa, line 275
    // ( $slice iregfile_state 33 26 ) 
    [:] [slice_1202_inst] (iregfile_state_945 33 26) (reg_rs1_imm_1203)  $flowthrough
    $delay slice_1202_inst 0
    // 				$volatile reg_rs2 := ( $slice iregfile_state 25 18 ) 
    //  file prog.linked.opt.aa, line 276
    // ( $slice iregfile_state 25 18 ) 
    [:] [slice_1206_inst] (iregfile_state_945 25 18) (reg_rs2_1207)  $flowthrough
    $delay slice_1206_inst 0
    // 				$volatile reg_rd := ( $slice iregfile_state 17 10 ) 
    //  file prog.linked.opt.aa, line 277
    // ( $slice iregfile_state 17 10 ) 
    [:] [slice_1210_inst] (iregfile_state_945 17 10) (reg_rd_1211)  $flowthrough
    $delay slice_1210_inst 0
    // 				$volatile reg_data_to_be_written := iretire_exec_result_memData
    //  file prog.linked.opt.aa, line 278
    # := [W_reg_data_to_be_written_1212_inst] (iretire_exec_result_memData_1094) (reg_data_to_be_written_1214)   $flowthrough 
    // 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 )  $buffering 2
    //  file prog.linked.opt.aa, line 279
    $call [call_stmt_1224_call] $module accessReg(reg_valid_read1_1179 reg_rs1_imm_1203 reg_valid_read2_1183 reg_rs2_1207 reg_valid_write_1187 iretire_rd_1090 reg_data_to_be_written_1214) (reg_d1_1224 reg_d2_1224)   $fullrate
    $delay call_stmt_1224_call 7
    $buffering  $in call_stmt_1224_call reg_valid_read1_1179 2
    $buffering  $in call_stmt_1224_call reg_rs1_imm_1203 2
    $buffering  $in call_stmt_1224_call reg_valid_read2_1183 2
    $buffering  $in call_stmt_1224_call reg_rs2_1207 2
    $buffering  $in call_stmt_1224_call reg_valid_write_1187 2
    $buffering  $in call_stmt_1224_call iretire_rd_1090 2
    $buffering  $in call_stmt_1224_call reg_data_to_be_written_1214 2
    $buffering  $out call_stmt_1224_call reg_d1_1224 2
    $buffering  $out call_stmt_1224_call reg_d2_1224 2
    // 				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 280
    # := [W_iretire_state_to_rs1_imm_1318_delayed_7_0_1225_inst] (iretire_state_to_rs1_imm_1191) (iretire_state_to_rs1_imm_1318_delayed_7_0_1227)    $fullrate
    $buffering  $out W_iretire_state_to_rs1_imm_1318_delayed_7_0_1225_inst iretire_state_to_rs1_imm_1318_delayed_7_0_1227 7
    // 				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 281
    # := [W_reg_data_to_be_written_1319_delayed_7_0_1228_inst] (reg_data_to_be_written_1214) (reg_data_to_be_written_1319_delayed_7_0_1230)    $fullrate
    $buffering  $out W_reg_data_to_be_written_1319_delayed_7_0_1228_inst reg_data_to_be_written_1319_delayed_7_0_1230 7
    // 				$volatile final_rd1 := ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
    //  file prog.linked.opt.aa, line 282
    // ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
    ? [MUX_1235_inst] (iretire_state_to_rs1_imm_1318_delayed_7_0_1227 reg_data_to_be_written_1319_delayed_7_0_1230 reg_d1_1224) (final_rd1_1236)  $flowthrough
    // 				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 283
    # := [W_iretire_state_to_rs2_1324_delayed_7_0_1237_inst] (iretire_state_to_rs2_1195) (iretire_state_to_rs2_1324_delayed_7_0_1239)    $fullrate
    $buffering  $out W_iretire_state_to_rs2_1324_delayed_7_0_1237_inst iretire_state_to_rs2_1324_delayed_7_0_1239 7
    // 				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 284
    # := [W_reg_data_to_be_written_1325_delayed_7_0_1240_inst] (reg_data_to_be_written_1214) (reg_data_to_be_written_1325_delayed_7_0_1242)    $fullrate
    $buffering  $out W_reg_data_to_be_written_1325_delayed_7_0_1240_inst reg_data_to_be_written_1325_delayed_7_0_1242 7
    // 				$volatile final_rd2 := ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
    //  file prog.linked.opt.aa, line 285
    // ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
    ? [MUX_1247_inst] (iretire_state_to_rs2_1324_delayed_7_0_1239 reg_data_to_be_written_1325_delayed_7_0_1242 reg_d2_1224) (final_rd2_1248)  $flowthrough
    // 				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 286
    # := [W_flush_iexec_1330_delayed_7_0_1249_inst] (flush_iexec_984) (flush_iexec_1330_delayed_7_0_1251)    $fullrate
    $buffering  $out W_flush_iexec_1330_delayed_7_0_1249_inst flush_iexec_1330_delayed_7_0_1251 7
    // 				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 287
    // (reg_opcode && reg_rs1_imm)
    &&[CONCAT_u8_u16_1255_inst] (reg_opcode_1199 reg_rs1_imm_1203) (CONCAT_u8_u16_1255_wire)   $flowthrough 
    $delay CONCAT_u8_u16_1255_inst 0
    // (reg_rs2 && reg_rd)
    &&[CONCAT_u8_u16_1258_inst] (reg_rs2_1207 reg_rd_1211) (CONCAT_u8_u16_1258_wire)   $flowthrough 
    $delay CONCAT_u8_u16_1258_inst 0
    // ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd))
    &&[CONCAT_u16_u32_1259_inst] (CONCAT_u8_u16_1255_wire CONCAT_u8_u16_1258_wire) (CONCAT_u16_u32_1338_1338_delayed_7_0_1260)    $fullrate
    $buffering  $out CONCAT_u16_u32_1259_inst CONCAT_u16_u32_1338_1338_delayed_7_0_1260 7
    $delay CONCAT_u16_u32_1259_inst 1
    // 				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
    //  file prog.linked.opt.aa, line 288
    # := [W_iregfile_pc_1342_delayed_7_0_1261_inst] (iregfile_pc_1034) (iregfile_pc_1342_delayed_7_0_1263)    $fullrate
    $buffering  $out W_iregfile_pc_1342_delayed_7_0_1261_inst iregfile_pc_1342_delayed_7_0_1263 7
    // 				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
    //  file prog.linked.opt.aa, line 289
    // (final_rd1 && final_rd2)
    &&[CONCAT_u32_u64_1270_inst] (final_rd1_1236 final_rd2_1248) (CONCAT_u32_u64_1270_wire)   $flowthrough 
    $delay CONCAT_u32_u64_1270_inst 0
    // ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)
    &&[CONCAT_u64_u74_1272_inst] (CONCAT_u32_u64_1270_wire iregfile_pc_1342_delayed_7_0_1263) (CONCAT_u64_u74_1272_wire)   $flowthrough 
    $delay CONCAT_u64_u74_1272_inst 0
    // (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0))
    &&[CONCAT_u32_u106_1273_inst] (CONCAT_u16_u32_1338_1338_delayed_7_0_1260 CONCAT_u64_u74_1272_wire) (CONCAT_u32_u106_1273_wire)   $flowthrough 
    $delay CONCAT_u32_u106_1273_inst 0
    // ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
    ? [MUX_1274_inst] (flush_iexec_1330_delayed_7_0_1251 R_zero_106_1266_wire_constant CONCAT_u32_u106_1273_wire) (n_iexec_state_1275)  $flowthrough
    // 				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 290
    // (dcache_opcode == LOAD)
    ==[EQ_u8_u1_1279_inst] (dcache_opcode_1050 R_LOAD_1278_wire_constant) (EQ_u8_u1_1350_1350_delayed_7_0_1280)    $fullrate
    $buffering  $out EQ_u8_u1_1279_inst EQ_u8_u1_1350_1350_delayed_7_0_1280 7
    $delay EQ_u8_u1_1279_inst 1
    // 				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 291
    # := [W_dcache_exec_result_1352_delayed_7_0_1281_inst] (dcache_exec_result_1074) (dcache_exec_result_1352_delayed_7_0_1283)    $fullrate
    $buffering  $out W_dcache_exec_result_1352_delayed_7_0_1281_inst dcache_exec_result_1352_delayed_7_0_1283 7
    // 				$volatile dcache_data_to_be_written_to_reg := ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
    //  file prog.linked.opt.aa, line 292
    // ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
    ? [MUX_1288_inst] (EQ_u8_u1_1350_1350_delayed_7_0_1280 memReadData_1175 dcache_exec_result_1352_delayed_7_0_1283) (dcache_data_to_be_written_to_reg_1289)  $flowthrough
    // 				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
    //  file prog.linked.opt.aa, line 293
    // (dcache_opcode && dcache_rs1_imm)
    &&[CONCAT_u8_u16_1293_inst] (dcache_opcode_1050 dcache_rs1_imm_1054) (CONCAT_u8_u16_1293_wire)   $flowthrough 
    $delay CONCAT_u8_u16_1293_inst 0
    // ((dcache_opcode && dcache_rs1_imm) && dcache_rs2)
    &&[CONCAT_u16_u24_1295_inst] (CONCAT_u8_u16_1293_wire dcache_rs2_1058) (CONCAT_u16_u24_1295_wire)   $flowthrough 
    $delay CONCAT_u16_u24_1295_inst 0
    // (dcache_rd && dcache_rd1)
    &&[CONCAT_u8_u40_1298_inst] (dcache_rd_1062 dcache_rd1_1066) (CONCAT_u8_u40_1298_wire)   $flowthrough 
    $delay CONCAT_u8_u40_1298_inst 0
    // (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1))
    &&[CONCAT_u24_u64_1299_inst] (CONCAT_u16_u24_1295_wire CONCAT_u8_u40_1298_wire) (CONCAT_u24_u64_1364_1364_delayed_7_0_1300)    $fullrate
    $buffering  $out CONCAT_u24_u64_1299_inst CONCAT_u24_u64_1364_1364_delayed_7_0_1300 7
    $delay CONCAT_u24_u64_1299_inst 1
    // 				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 294
    # := [W_dcache_rd2_1365_delayed_7_0_1301_inst] (dcache_rd2_1070) (dcache_rd2_1365_delayed_7_0_1303)    $fullrate
    $buffering  $out W_dcache_rd2_1365_delayed_7_0_1301_inst dcache_rd2_1365_delayed_7_0_1303 7
    // 				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
    //  file prog.linked.opt.aa, line 295
    // (dcache_isBranch && dcache_pc)
    &&[CONCAT_u1_u11_1307_inst] (dcache_isBranch_1078 dcache_pc_1082) (CONCAT_u1_u11_1370_1370_delayed_7_0_1308)    $fullrate
    $buffering  $out CONCAT_u1_u11_1307_inst CONCAT_u1_u11_1370_1370_delayed_7_0_1308 7
    $delay CONCAT_u1_u11_1307_inst 1
    // 				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
    //  file prog.linked.opt.aa, line 296
    // (dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg)
    &&[CONCAT_u32_u64_1313_inst] (dcache_rd2_1365_delayed_7_0_1303 dcache_data_to_be_written_to_reg_1289) (CONCAT_u32_u64_1313_wire)   $flowthrough 
    $delay CONCAT_u32_u64_1313_inst 0
    // ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0)
    &&[CONCAT_u64_u75_1315_inst] (CONCAT_u32_u64_1313_wire CONCAT_u1_u11_1370_1370_delayed_7_0_1308) (CONCAT_u64_u75_1315_wire)   $flowthrough 
    $delay CONCAT_u64_u75_1315_inst 0
    // (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
    &&[CONCAT_u64_u139_1316_inst] (CONCAT_u24_u64_1364_1364_delayed_7_0_1300 CONCAT_u64_u75_1315_wire) (n_iRetire_state_1317)   $flowthrough 
    $delay CONCAT_u64_u139_1316_inst 0
    // 				$volatile iretire_to_dcache_addr_32 := ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
    //  file prog.linked.opt.aa, line 297
    // (dcache_rs2 == iretire_rd)
    ==[EQ_u8_u1_1321_inst] (dcache_rs2_1058 iretire_rd_1090) (EQ_u8_u1_1321_wire)   $flowthrough 
    $delay EQ_u8_u1_1321_inst 0
    // ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
    ? [MUX_1324_inst] (EQ_u8_u1_1321_wire iretire_exec_result_memData_1094 dcache_rd2_1070) (iretire_to_dcache_addr_32_1325)  $flowthrough
    // 				$volatile dcache_to_ex_addr_32 := ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
    //  file prog.linked.opt.aa, line 298
    // (dcache_rd == iexec_rs1_imm)
    ==[EQ_u8_u1_1329_inst] (dcache_rd_1062 iexec_rs1_imm_1038) (EQ_u8_u1_1329_wire)   $flowthrough 
    $delay EQ_u8_u1_1329_inst 0
    // (iretire_rd == iexec_rs1_imm)
    ==[EQ_u8_u1_1333_inst] (iretire_rd_1090 iexec_rs1_imm_1038) (EQ_u8_u1_1333_wire)   $flowthrough 
    $delay EQ_u8_u1_1333_inst 0
    // ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 ) 
    ? [MUX_1336_inst] (EQ_u8_u1_1333_wire iretire_exec_result_memData_1094 iexec_rd1_1042) (MUX_1336_wire)  $flowthrough
    // ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
    ? [MUX_1337_inst] (EQ_u8_u1_1329_wire dcache_exec_result_1074 MUX_1336_wire) (dcache_to_ex_addr_32_1338)  $flowthrough
    // 				$volatile next_ifetch_state_32 := ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
    //  file prog.linked.opt.aa, line 299
    // ($bitcast ($uint<32>) ifetch_state )
    # := [type_cast_1346_inst] (ifetch_state_933) (type_cast_1346_wire)   $flowthrough
    $delay type_cast_1346_inst 0
    // (ifetch_state + 1 )
    +[ADD_u10_u10_1349_inst] (ifetch_state_933 konst_1348_wire_constant) (ADD_u10_u10_1349_wire)   $flowthrough 
    $delay ADD_u10_u10_1349_inst 0
    // ($bitcast ($uint<32>) (ifetch_state + 1 ) )
    # := [type_cast_1350_inst] (ADD_u10_u10_1349_wire) (type_cast_1350_wire)   $flowthrough
    $delay type_cast_1350_inst 0
    // ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) ) 
    ? [MUX_1351_inst] (stall_first_4_984 type_cast_1346_wire type_cast_1350_wire) (MUX_1351_wire)  $flowthrough
    // ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  ) 
    ? [MUX_1352_inst] (ex_Unconditional_JUMP_984 dcache_to_ex_addr_32_1338 MUX_1351_wire) (MUX_1352_wire)  $flowthrough
    // ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
    ? [MUX_1353_inst] (is_Branch_Hazard_984 iretire_to_dcache_addr_32_1325 MUX_1352_wire) (next_ifetch_state_32_1354)  $flowthrough
    // 				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
    //  file prog.linked.opt.aa, line 300
    // ( $slice next_ifetch_state_32 9 0 ) 
    [:] [slice_1357_inst] (next_ifetch_state_32_1354 9 0) (next_ifetch_state_1358)  $flowthrough
    $delay slice_1357_inst 0
    // 				processor_result := reg_data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 302
    // processor_result
    $ioport $out [WPIPE_processor_result_1370_inst]  (reg_data_to_be_written_1214) (processor_result)  $fullrate 
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 204
  // 		cmd := start_processor// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 206
  // start_processor
  RPIPE_start_processor_924_inst <=> (branch_block_stmt_921/assign_stmt_925/RPIPE_start_processor_924_Sample/rr branch_block_stmt_921/assign_stmt_925/RPIPE_start_processor_924_Update/cr) (branch_block_stmt_921/assign_stmt_925/RPIPE_start_processor_924_Sample/ra branch_block_stmt_921/assign_stmt_925/RPIPE_start_processor_924_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (cmd == one_8)
  if_stmt_926_branch <=> (branch_block_stmt_921/if_stmt_926_eval_test/branch_req) (branch_block_stmt_921/if_stmt_926_else_link/else_choice_transition branch_block_stmt_921/if_stmt_926_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_931
  //  file prog.linked.opt.aa, line 210
  phi_stmt_933 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_933_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_933_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_933_phi_mux_ack)
  next_ifetch_state_1358_936_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_next_ifetch_state_936_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_next_ifetch_state_936_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_next_ifetch_state_936_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_next_ifetch_state_936_Update/ack)
  phi_stmt_937 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_937_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_937_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_937_phi_mux_ack)
  n_icache_state_998_940_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_icache_state_940_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_icache_state_940_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_icache_state_940_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_icache_state_940_Update/ack)
  phi_stmt_941 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_941_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_941_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_941_phi_mux_ack)
  n_idecode_state_1021_944_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_idecode_state_944_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_idecode_state_944_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_idecode_state_944_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_idecode_state_944_Update/ack)
  phi_stmt_945 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_945_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_945_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_945_phi_mux_ack)
  n_iregfile_state_1030_948_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iregfile_state_948_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iregfile_state_948_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iregfile_state_948_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iregfile_state_948_Update/ack)
  phi_stmt_949 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_949_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_949_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_949_phi_mux_ack)
  n_iexec_state_1275_952_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iexec_state_952_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iexec_state_952_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iexec_state_952_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iexec_state_952_Update/ack)
  phi_stmt_953 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_953_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_953_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_953_phi_mux_ack)
  n_dcache_state_1142_956_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_dcache_state_956_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_dcache_state_956_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_dcache_state_956_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_dcache_state_956_Update/ack)
  phi_stmt_957 <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_957_entry_sample_req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_957_loopback_sample_req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/phi_stmt_957_phi_mux_ack)
  n_iRetire_state_1317_960_buf <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iRetire_state_960_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iRetire_state_960_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iRetire_state_960_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/R_n_iRetire_state_960_Update/ack)
  //  $volatile 				$call scoreBoard (ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state ) (ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions dcache_actions ex_Unconditional_JUMP is_Branch_Hazard flush_ifetch flush_icache flush_idecode flush_reg flush_iexec flush_dcache stall_first_4 ) 
  //  file prog.linked.opt.aa, line 228
  // ifetch_state
  // icache_state
  // idecode_state
  // iregfile_state
  // iexec_state
  // dcache_state
  // iretire_state
  // 				$call accessMem (read_signal icache_state zero_32 ) (icache_instruction )  $buffering 2
  //  file prog.linked.opt.aa, line 229
  // icache_state
  call_stmt_989_call <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_989_Sample/crr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_989_Update/ccr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_989_Sample/cra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_989_Update/cca)
  // 				$volatile n_icache_state := ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
  //  file prog.linked.opt.aa, line 230
  // flush_icache
  // stall_first_4
  // icache_state
  // ifetch_state
  // ( $mux stall_first_4 icache_state  ifetch_state ) 
  // ( $mux flush_icache zero_10  ( $mux stall_first_4 icache_state  ifetch_state )  ) 
  // 				flush_idecode_1058_delayed_7_0 := flush_idecode $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 231
  // flush_idecode
  W_flush_idecode_1058_delayed_7_0_999_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1001_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1001_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1001_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1001_Update/ack)
  // 				stall_first_4_1060_delayed_7_0 := stall_first_4 $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 232
  // stall_first_4
  W_stall_first_4_1060_delayed_7_0_1002_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1004_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1004_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1004_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1004_Update/ack)
  // 				idecode_state_1061_delayed_7_0 := idecode_state $buffering 7// bits of buffering = 294. 
  //  file prog.linked.opt.aa, line 233
  // idecode_state
  W_idecode_state_1061_delayed_7_0_1005_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1007_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1007_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1007_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1007_Update/ack)
  // 				icache_state_1063_delayed_7_0 := icache_state $buffering 7// bits of buffering = 70. 
  //  file prog.linked.opt.aa, line 234
  // icache_state
  W_icache_state_1063_delayed_7_0_1008_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1010_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1010_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1010_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1010_Update/ack)
  // 				$volatile n_idecode_state := ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
  //  file prog.linked.opt.aa, line 235
  // flush_idecode_1058_delayed_7_0
  // stall_first_4_1060_delayed_7_0
  // idecode_state_1061_delayed_7_0
  // (icache_instruction && icache_state_1063_delayed_7_0)
  // icache_instruction
  // icache_state_1063_delayed_7_0
  // ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) ) 
  // ( $mux flush_idecode_1058_delayed_7_0 zero_42  ( $mux stall_first_4_1060_delayed_7_0 idecode_state_1061_delayed_7_0  (icache_instruction && icache_state_1063_delayed_7_0) )  ) 
  // 				$volatile n_iregfile_state := ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
  //  file prog.linked.opt.aa, line 236
  // flush_reg
  // stall_first_4
  // iregfile_state
  // idecode_state
  // ( $mux stall_first_4 iregfile_state  idecode_state ) 
  // ( $mux flush_reg zero_42  ( $mux stall_first_4 iregfile_state  idecode_state )  ) 
  // 				$volatile iregfile_pc := ( $slice iregfile_state 9 0 ) 
  //  file prog.linked.opt.aa, line 237
  // iregfile_state
  // 				$volatile iexec_rs1_imm := ( $slice iexec_state 97 90 ) 
  //  file prog.linked.opt.aa, line 238
  // iexec_state
  // 				$volatile iexec_rd1 := ( $slice iexec_state 73 42 ) 
  //  file prog.linked.opt.aa, line 239
  // iexec_state
  // 				$volatile iexec_rd2 := ( $slice iexec_state 41 10 ) 
  //  file prog.linked.opt.aa, line 240
  // iexec_state
  // 				$volatile dcache_opcode := ( $slice dcache_state 138 131 ) 
  //  file prog.linked.opt.aa, line 241
  // dcache_state
  // 				$volatile dcache_rs1_imm := ( $slice dcache_state 130 123 ) 
  //  file prog.linked.opt.aa, line 242
  // dcache_state
  // 				$volatile dcache_rs2 := ( $slice dcache_state 122 115 ) 
  //  file prog.linked.opt.aa, line 243
  // dcache_state
  // 				$volatile dcache_rd := ( $slice dcache_state 114 107 ) 
  //  file prog.linked.opt.aa, line 244
  // dcache_state
  // 				$volatile dcache_rd1 := ( $slice dcache_state 106 75 ) 
  //  file prog.linked.opt.aa, line 245
  // dcache_state
  // 				$volatile dcache_rd2 := ( $slice dcache_state 74 43 ) 
  //  file prog.linked.opt.aa, line 246
  // dcache_state
  // 				$volatile dcache_exec_result := ( $slice dcache_state 42 11 ) 
  //  file prog.linked.opt.aa, line 247
  // dcache_state
  // 				$volatile dcache_isBranch := ( $slice dcache_state 10 10 ) 
  //  file prog.linked.opt.aa, line 248
  // dcache_state
  // 				$volatile dcache_pc := ( $slice dcache_state 9 0 ) 
  //  file prog.linked.opt.aa, line 249
  // dcache_state
  // 				$volatile iretire_opcode := ( $slice iretire_state 138 131 ) 
  //  file prog.linked.opt.aa, line 250
  // iretire_state
  // 				$volatile iretire_rd := ( $slice iretire_state 114 107 ) 
  //  file prog.linked.opt.aa, line 251
  // iretire_state
  // 				$volatile iretire_exec_result_memData := ( $slice iretire_state 42 11 ) 
  //  file prog.linked.opt.aa, line 252
  // iretire_state
  // 				$volatile dcache_to_ex_rs1_imm := ( $slice iexec_actions 3 3 ) 
  //  file prog.linked.opt.aa, line 253
  // iexec_actions
  // 				$volatile dcache_to_ex_rs2 := ( $slice iexec_actions 2 2 ) 
  //  file prog.linked.opt.aa, line 254
  // iexec_actions
  // 				$volatile iretire_state_to_ex_rs1_imm := ( $slice iexec_actions 1 1 ) 
  //  file prog.linked.opt.aa, line 255
  // iexec_actions
  // 				$volatile iretire_state_to_ex_rs2 := ( $slice iexec_actions 0 0 ) 
  //  file prog.linked.opt.aa, line 256
  // iexec_actions
  // 				$volatile iexec_rd1_final := ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
  //  file prog.linked.opt.aa, line 257
  // dcache_to_ex_rs1_imm
  // dcache_exec_result
  // iretire_state_to_ex_rs1_imm
  // iretire_exec_result_memData
  // iexec_rd1
  // ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 ) 
  // ( $mux dcache_to_ex_rs1_imm dcache_exec_result  ( $mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData  iexec_rd1 )  ) 
  // 				$volatile iexec_rd2_final := ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
  //  file prog.linked.opt.aa, line 258
  // dcache_to_ex_rs2
  // dcache_exec_result
  // iretire_state_to_ex_rs2
  // iretire_exec_result_memData
  // iexec_rd2
  // ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 ) 
  // ( $mux dcache_to_ex_rs2 dcache_exec_result  ( $mux iretire_state_to_ex_rs2 iretire_exec_result_memData  iexec_rd2 )  ) 
  // 				$call iExecStage (iexec_state iexec_rd1_final iexec_rd2_final ) (n_dcache_state_from_exec ) 
  //  file prog.linked.opt.aa, line 259
  // iexec_state
  // iexec_rd1_final
  // iexec_rd2_final
  call_stmt_1133_call <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1133_Sample/crr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1133_Update/ccr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1133_Sample/cra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1133_Update/cca)
  // 				flush_dcache_1221_delayed_4_0 := flush_dcache $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 260
  // flush_dcache
  W_flush_dcache_1221_delayed_4_0_1134_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1136_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1136_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1136_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1136_Update/ack)
  // 				n_dcache_state := ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec )  $buffering 2// bits of buffering = 278. 
  //  file prog.linked.opt.aa, line 261
  // flush_dcache_1221_delayed_4_0
  // n_dcache_state_from_exec
  // ( $mux flush_dcache_1221_delayed_4_0 zero_139  n_dcache_state_from_exec ) 
  MUX_1141_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/MUX_1141_start/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/MUX_1141_complete/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/MUX_1141_start/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/MUX_1141_complete/ack)
  // 				$volatile memWrite := ( $slice dcache_actions 2 2 ) 
  //  file prog.linked.opt.aa, line 262
  // dcache_actions
  // 				$volatile iretire_state_to_dcache_addr := ( $slice dcache_actions 1 1 ) 
  //  file prog.linked.opt.aa, line 263
  // dcache_actions
  // 				$volatile iretire_state_to_dcache_memData := ( $slice dcache_actions 0 0 ) 
  //  file prog.linked.opt.aa, line 264
  // dcache_actions
  // 				$volatile memWriteData := ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
  //  file prog.linked.opt.aa, line 265
  // iretire_state_to_dcache_memData
  // iretire_exec_result_memData
  // dcache_rd2
  // ( $mux iretire_state_to_dcache_memData iretire_exec_result_memData  dcache_rd2 ) 
  // 				$volatile final_memAddr_32 := ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
  //  file prog.linked.opt.aa, line 266
  // iretire_state_to_dcache_addr
  // iretire_exec_result_memData
  // dcache_rd1
  // ( $mux iretire_state_to_dcache_addr iretire_exec_result_memData  dcache_rd1 ) 
  // 				$volatile memAddr := ( $slice final_memAddr_32 9 0 ) 
  //  file prog.linked.opt.aa, line 267
  // final_memAddr_32
  // 				$call accessMem (memWrite memAddr memWriteData ) (memReadData )  $buffering 2
  //  file prog.linked.opt.aa, line 268
  // memWrite
  // memAddr
  // memWriteData
  call_stmt_1175_call <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1175_Sample/crr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1175_Update/ccr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1175_Sample/cra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1175_Update/cca)
  // 				$volatile reg_valid_read1 := ( $slice iregfile_actions 4 4 ) 
  //  file prog.linked.opt.aa, line 269
  // iregfile_actions
  // 				$volatile reg_valid_read2 := ( $slice iregfile_actions 3 3 ) 
  //  file prog.linked.opt.aa, line 270
  // iregfile_actions
  // 				$volatile reg_valid_write := ( $slice iregfile_actions 2 2 ) 
  //  file prog.linked.opt.aa, line 271
  // iregfile_actions
  // 				$volatile iretire_state_to_rs1_imm := ( $slice iregfile_actions 1 1 ) 
  //  file prog.linked.opt.aa, line 272
  // iregfile_actions
  // 				$volatile iretire_state_to_rs2 := ( $slice iregfile_actions 0 0 ) 
  //  file prog.linked.opt.aa, line 273
  // iregfile_actions
  // 				$volatile reg_opcode := ( $slice iregfile_state 41 34 ) 
  //  file prog.linked.opt.aa, line 274
  // iregfile_state
  // 				$volatile reg_rs1_imm := ( $slice iregfile_state 33 26 ) 
  //  file prog.linked.opt.aa, line 275
  // iregfile_state
  // 				$volatile reg_rs2 := ( $slice iregfile_state 25 18 ) 
  //  file prog.linked.opt.aa, line 276
  // iregfile_state
  // 				$volatile reg_rd := ( $slice iregfile_state 17 10 ) 
  //  file prog.linked.opt.aa, line 277
  // iregfile_state
  // 				$volatile reg_data_to_be_written := iretire_exec_result_memData
  //  file prog.linked.opt.aa, line 278
  // iretire_exec_result_memData
  // 				$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written ) (reg_d1 reg_d2 )  $buffering 2
  //  file prog.linked.opt.aa, line 279
  // reg_valid_read1
  // reg_rs1_imm
  // reg_valid_read2
  // reg_rs2
  // reg_valid_write
  // iretire_rd
  // reg_data_to_be_written
  call_stmt_1224_call <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1224_Sample/crr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1224_Update/ccr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1224_Sample/cra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/call_stmt_1224_Update/cca)
  // 				iretire_state_to_rs1_imm_1318_delayed_7_0 := iretire_state_to_rs1_imm $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 280
  // iretire_state_to_rs1_imm
  W_iretire_state_to_rs1_imm_1318_delayed_7_0_1225_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1227_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1227_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1227_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1227_Update/ack)
  // 				reg_data_to_be_written_1319_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 281
  // reg_data_to_be_written
  W_reg_data_to_be_written_1319_delayed_7_0_1228_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1230_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1230_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1230_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1230_Update/ack)
  // 				$volatile final_rd1 := ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
  //  file prog.linked.opt.aa, line 282
  // iretire_state_to_rs1_imm_1318_delayed_7_0
  // reg_data_to_be_written_1319_delayed_7_0
  // reg_d1
  // ( $mux iretire_state_to_rs1_imm_1318_delayed_7_0 reg_data_to_be_written_1319_delayed_7_0  reg_d1 ) 
  // 				iretire_state_to_rs2_1324_delayed_7_0 := iretire_state_to_rs2 $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 283
  // iretire_state_to_rs2
  W_iretire_state_to_rs2_1324_delayed_7_0_1237_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1239_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1239_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1239_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1239_Update/ack)
  // 				reg_data_to_be_written_1325_delayed_7_0 := reg_data_to_be_written $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 284
  // reg_data_to_be_written
  W_reg_data_to_be_written_1325_delayed_7_0_1240_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1242_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1242_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1242_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1242_Update/ack)
  // 				$volatile final_rd2 := ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
  //  file prog.linked.opt.aa, line 285
  // iretire_state_to_rs2_1324_delayed_7_0
  // reg_data_to_be_written_1325_delayed_7_0
  // reg_d2
  // ( $mux iretire_state_to_rs2_1324_delayed_7_0 reg_data_to_be_written_1325_delayed_7_0  reg_d2 ) 
  // 				flush_iexec_1330_delayed_7_0 := flush_iexec $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 286
  // flush_iexec
  W_flush_iexec_1330_delayed_7_0_1249_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1251_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1251_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1251_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1251_Update/ack)
  // 				CONCAT_u16_u32_1338_1338_delayed_7_0 := ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd)) $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 287
  // ((reg_opcode && reg_rs1_imm) && (reg_rs2 && reg_rd))
  // (reg_opcode && reg_rs1_imm)
  // reg_opcode
  // reg_rs1_imm
  // (reg_rs2 && reg_rd)
  // reg_rs2
  // reg_rd
  CONCAT_u16_u32_1259_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u16_u32_1259_Sample/rr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u16_u32_1259_Update/cr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u16_u32_1259_Sample/ra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u16_u32_1259_Update/ca)
  // 				iregfile_pc_1342_delayed_7_0 := iregfile_pc $buffering 7// bits of buffering = 70. 
  //  file prog.linked.opt.aa, line 288
  // iregfile_pc
  W_iregfile_pc_1342_delayed_7_0_1261_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1263_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1263_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1263_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1263_Update/ack)
  // 				$volatile n_iexec_state := ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
  //  file prog.linked.opt.aa, line 289
  // flush_iexec_1330_delayed_7_0
  // (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0))
  // CONCAT_u16_u32_1338_1338_delayed_7_0
  // ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)
  // (final_rd1 && final_rd2)
  // final_rd1
  // final_rd2
  // iregfile_pc_1342_delayed_7_0
  // ( $mux flush_iexec_1330_delayed_7_0 zero_106  (CONCAT_u16_u32_1338_1338_delayed_7_0 && ((final_rd1 && final_rd2) && iregfile_pc_1342_delayed_7_0)) ) 
  // 				EQ_u8_u1_1350_1350_delayed_7_0 := (dcache_opcode == LOAD) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 290
  // (dcache_opcode == LOAD)
  // dcache_opcode
  EQ_u8_u1_1279_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/EQ_u8_u1_1279_Sample/rr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/EQ_u8_u1_1279_Update/cr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/EQ_u8_u1_1279_Sample/ra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/EQ_u8_u1_1279_Update/ca)
  // 				dcache_exec_result_1352_delayed_7_0 := dcache_exec_result $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 291
  // dcache_exec_result
  W_dcache_exec_result_1352_delayed_7_0_1281_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1283_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1283_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1283_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1283_Update/ack)
  // 				$volatile dcache_data_to_be_written_to_reg := ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
  //  file prog.linked.opt.aa, line 292
  // EQ_u8_u1_1350_1350_delayed_7_0
  // memReadData
  // dcache_exec_result_1352_delayed_7_0
  // ( $mux EQ_u8_u1_1350_1350_delayed_7_0 memReadData  dcache_exec_result_1352_delayed_7_0 ) 
  // 				CONCAT_u24_u64_1364_1364_delayed_7_0 := (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1)) $buffering 7// bits of buffering = 448. 
  //  file prog.linked.opt.aa, line 293
  // (((dcache_opcode && dcache_rs1_imm) && dcache_rs2) && (dcache_rd && dcache_rd1))
  // ((dcache_opcode && dcache_rs1_imm) && dcache_rs2)
  // (dcache_opcode && dcache_rs1_imm)
  // dcache_opcode
  // dcache_rs1_imm
  // dcache_rs2
  // (dcache_rd && dcache_rd1)
  // dcache_rd
  // dcache_rd1
  CONCAT_u24_u64_1299_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u24_u64_1299_Sample/rr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u24_u64_1299_Update/cr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u24_u64_1299_Sample/ra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u24_u64_1299_Update/ca)
  // 				dcache_rd2_1365_delayed_7_0 := dcache_rd2 $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 294
  // dcache_rd2
  W_dcache_rd2_1365_delayed_7_0_1301_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1303_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1303_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1303_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/assign_stmt_1303_Update/ack)
  // 				CONCAT_u1_u11_1370_1370_delayed_7_0 := (dcache_isBranch && dcache_pc) $buffering 7// bits of buffering = 77. 
  //  file prog.linked.opt.aa, line 295
  // (dcache_isBranch && dcache_pc)
  // dcache_isBranch
  // dcache_pc
  CONCAT_u1_u11_1307_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u1_u11_1307_Sample/rr branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u1_u11_1307_Update/cr) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u1_u11_1307_Sample/ra branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/CONCAT_u1_u11_1307_Update/ca)
  // 				$volatile n_iRetire_state := (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
  //  file prog.linked.opt.aa, line 296
  // (CONCAT_u24_u64_1364_1364_delayed_7_0 && ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0))
  // CONCAT_u24_u64_1364_1364_delayed_7_0
  // ((dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg) && CONCAT_u1_u11_1370_1370_delayed_7_0)
  // (dcache_rd2_1365_delayed_7_0 && dcache_data_to_be_written_to_reg)
  // dcache_rd2_1365_delayed_7_0
  // dcache_data_to_be_written_to_reg
  // CONCAT_u1_u11_1370_1370_delayed_7_0
  // 				$volatile iretire_to_dcache_addr_32 := ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
  //  file prog.linked.opt.aa, line 297
  // (dcache_rs2 == iretire_rd)
  // dcache_rs2
  // iretire_rd
  // iretire_exec_result_memData
  // dcache_rd2
  // ( $mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData  dcache_rd2 ) 
  // 				$volatile dcache_to_ex_addr_32 := ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
  //  file prog.linked.opt.aa, line 298
  // (dcache_rd == iexec_rs1_imm)
  // dcache_rd
  // iexec_rs1_imm
  // dcache_exec_result
  // (iretire_rd == iexec_rs1_imm)
  // iretire_rd
  // iexec_rs1_imm
  // iretire_exec_result_memData
  // iexec_rd1
  // ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 ) 
  // ( $mux (dcache_rd == iexec_rs1_imm) dcache_exec_result  ( $mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData  iexec_rd1 )  ) 
  // 				$volatile next_ifetch_state_32 := ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
  //  file prog.linked.opt.aa, line 299
  // is_Branch_Hazard
  // iretire_to_dcache_addr_32
  // ex_Unconditional_JUMP
  // dcache_to_ex_addr_32
  // stall_first_4
  // ifetch_state
  // (ifetch_state + 1 )
  // ifetch_state
  // ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) ) 
  // ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  ) 
  // ( $mux is_Branch_Hazard iretire_to_dcache_addr_32  ( $mux ex_Unconditional_JUMP dcache_to_ex_addr_32  ( $mux stall_first_4 ($bitcast ($uint<32>) ifetch_state )  ($bitcast ($uint<32>) (ifetch_state + 1 ) ) )  )  ) 
  // 				$volatile next_ifetch_state := ( $slice next_ifetch_state_32 9 0 ) 
  //  file prog.linked.opt.aa, line 300
  // next_ifetch_state_32
  // 				processor_result := reg_data_to_be_written// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 302
  // reg_data_to_be_written
  // processor_result
  WPIPE_processor_result_1370_inst <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/WPIPE_processor_result_1370_Sample/req branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/WPIPE_processor_result_1370_Update/req) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/WPIPE_processor_result_1370_Sample/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/WPIPE_processor_result_1370_Update/ack)
  // (iretire_opcode == HALT)
  // iretire_opcode
  do_while_stmt_931_branch <=> (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/do_while_stmt_931_loop_body/condition_evaluated) (branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/loop_exit/ack branch_block_stmt_921/branch_block_stmt_930/do_while_stmt_931/loop_taken/ack)
}
$module [regAccessDaemon] 
{
  // pipe-declarations for block %regAccessDaemon
  //  file prog.linked.opt.aa, line 309
  // pipe-declarations for block %regAccessDaemon%loop
  //  file prog.linked.opt.aa, line 314
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1384] // Branch Block  file prog.linked.opt.aa, line 314
    {
      $P [branch_block_stmt_1384__entry__]
      branch_block_stmt_1384__entry__ <-| ($entry)
      $P [branch_block_stmt_1384__exit__]
      branch_block_stmt_1384__exit__ |-> ($exit)
      $P [do_while_stmt_1385__entry__] 
      $P [do_while_stmt_1385__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 316
      <o> [do_while_stmt_1385]  $depth 20 $buffering 2 
      {
        $P[do_while_stmt_1385__entry__] 
        $P[do_while_stmt_1385__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1385_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			cmd_1 := accessReg_request// bits of buffering = 64. 
          //  file prog.linked.opt.aa, line 320
          // Source expression
          // accessReg_request
          $T[RPIPE_accessReg_request_1388_sample_start_] 
          $T[RPIPE_accessReg_request_1388_sample_completed_] 
          $T[RPIPE_accessReg_request_1388_update_start_] 
          $T[RPIPE_accessReg_request_1388_update_completed_] 
          ;;[RPIPE_accessReg_request_1388_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_accessReg_request_1388_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_accessReg_request_1388_sample_start_ &-> (RPIPE_accessReg_request_1388_Sample)
          RPIPE_accessReg_request_1388_sample_completed_ <-& (RPIPE_accessReg_request_1388_Sample)
          RPIPE_accessReg_request_1388_update_start_ <-& (RPIPE_accessReg_request_1388_sample_completed_)
          RPIPE_accessReg_request_1388_update_start_ &-> (RPIPE_accessReg_request_1388_Update)
          RPIPE_accessReg_request_1388_update_completed_ <-& (RPIPE_accessReg_request_1388_Update)
          RPIPE_accessReg_request_1388_sample_start_ o<-& (RPIPE_accessReg_request_1388_update_completed_ 0)
          // Target expression
          // (as target) cmd_1
          // start: WAR dependencies for cmd_1
          // done: WAR dependencies for cmd_1
          // end:  			cmd_1 := accessReg_request// bits of buffering = 64. 
          // start: WAR dependencies for valid_1
          // done: WAR dependencies for valid_1
          // start:  			$volatile valid_1 := ( $slice cmd_1 63 63 ) 
          //  file prog.linked.opt.aa, line 321
          // volatile! 
          // Source expression
          // ( $slice cmd_1 63 63 ) 
          // cmd_1
          // Target expression
          // (as target) valid_1
          // start: WAR dependencies for valid_1
          // done: WAR dependencies for valid_1
          // end:  			$volatile valid_1 := ( $slice cmd_1 63 63 ) 
          // start: WAR dependencies for addr1
          // done: WAR dependencies for addr1
          // start:  			$volatile addr1 := ( $slice cmd_1 62 55 ) 
          //  file prog.linked.opt.aa, line 322
          // volatile! 
          // Source expression
          // ( $slice cmd_1 62 55 ) 
          // cmd_1
          // Target expression
          // (as target) addr1
          // start: WAR dependencies for addr1
          // done: WAR dependencies for addr1
          // end:  			$volatile addr1 := ( $slice cmd_1 62 55 ) 
          // start: WAR dependencies for valid_2
          // done: WAR dependencies for valid_2
          // start:  			$volatile valid_2 := ( $slice cmd_1 54 54 ) 
          //  file prog.linked.opt.aa, line 323
          // volatile! 
          // Source expression
          // ( $slice cmd_1 54 54 ) 
          // cmd_1
          // Target expression
          // (as target) valid_2
          // start: WAR dependencies for valid_2
          // done: WAR dependencies for valid_2
          // end:  			$volatile valid_2 := ( $slice cmd_1 54 54 ) 
          // start: WAR dependencies for addr2
          // done: WAR dependencies for addr2
          // start:  			$volatile addr2 := ( $slice cmd_1 53 46 ) 
          //  file prog.linked.opt.aa, line 324
          // volatile! 
          // Source expression
          // ( $slice cmd_1 53 46 ) 
          // cmd_1
          // Target expression
          // (as target) addr2
          // start: WAR dependencies for addr2
          // done: WAR dependencies for addr2
          // end:  			$volatile addr2 := ( $slice cmd_1 53 46 ) 
          // start: WAR dependencies for valid_w
          // done: WAR dependencies for valid_w
          // start:  			$volatile valid_w := ( $slice cmd_1 40 40 ) 
          //  file prog.linked.opt.aa, line 325
          // volatile! 
          // Source expression
          // ( $slice cmd_1 40 40 ) 
          // cmd_1
          // Target expression
          // (as target) valid_w
          // start: WAR dependencies for valid_w
          // done: WAR dependencies for valid_w
          // end:  			$volatile valid_w := ( $slice cmd_1 40 40 ) 
          // start: WAR dependencies for addr_w
          // done: WAR dependencies for addr_w
          // start:  			$volatile addr_w := ( $slice cmd_1 39 32 ) 
          //  file prog.linked.opt.aa, line 326
          // volatile! 
          // Source expression
          // ( $slice cmd_1 39 32 ) 
          // cmd_1
          // Target expression
          // (as target) addr_w
          // start: WAR dependencies for addr_w
          // done: WAR dependencies for addr_w
          // end:  			$volatile addr_w := ( $slice cmd_1 39 32 ) 
          // start: WAR dependencies for data_to_be_written
          // done: WAR dependencies for data_to_be_written
          // start:  			$volatile data_to_be_written := ( $slice cmd_1 31 0 ) 
          //  file prog.linked.opt.aa, line 327
          // volatile! 
          // Source expression
          // ( $slice cmd_1 31 0 ) 
          // cmd_1
          // Target expression
          // (as target) data_to_be_written
          // start: WAR dependencies for data_to_be_written
          // done: WAR dependencies for data_to_be_written
          // end:  			$volatile data_to_be_written := ( $slice cmd_1 31 0 ) 
          // start: 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
          //  file prog.linked.opt.aa, line 328
          $T[call_stmt_1427_sample_start_] 
          $T[call_stmt_1427_sample_completed_] 
          $T[call_stmt_1427_update_start_] 
          $T[call_stmt_1427_update_completed_] 
          // Call input argument 0
          // valid_1
          // Call input argument 1
          // addr1
          // Call input argument 2
          // valid_2
          // Call input argument 3
          // addr2
          // Call input argument 4
          // valid_w
          // Call input argument 5
          // addr_w
          // Call input argument 6
          // data_to_be_written
          // start: Forward dependencies from valid_1 to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from valid_1 to transition call_stmt_1427_sample_start_
          // RAW reenables for valid_1
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from addr1 to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from addr1 to transition call_stmt_1427_sample_start_
          // RAW reenables for addr1
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from valid_2 to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from valid_2 to transition call_stmt_1427_sample_start_
          // RAW reenables for valid_2
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from addr2 to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from addr2 to transition call_stmt_1427_sample_start_
          // RAW reenables for addr2
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from valid_w to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from valid_w to transition call_stmt_1427_sample_start_
          // RAW reenables for valid_w
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from addr_w to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from addr_w to transition call_stmt_1427_sample_start_
          // RAW reenables for addr_w
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          // start: Forward dependencies from data_to_be_written to transition call_stmt_1427_sample_start_
          call_stmt_1427_sample_start_ <-& (RPIPE_accessReg_request_1388_update_completed_)
          // done: Forward dependencies from data_to_be_written to transition call_stmt_1427_sample_start_
          // RAW reenables for data_to_be_written
          RPIPE_accessReg_request_1388_update_start_ o<-& (call_stmt_1427_sample_completed_ 0)
          ;;[call_stmt_1427_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1427_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1427_sample_start_ &-> (call_stmt_1427_Sample)
          call_stmt_1427_sample_completed_ <-& (call_stmt_1427_Sample)
          call_stmt_1427_sample_completed_ &-> ($null)
          call_stmt_1427_update_start_ &-> (call_stmt_1427_Update)
          call_stmt_1427_update_completed_ <-& (call_stmt_1427_Update)
          // Call output argument 0
          // (as target) rdata1
          // Call output argument 1
          // (as target) rdata2
          // self-release: 
          call_stmt_1427_sample_start_ o<-& (call_stmt_1427_sample_completed_ 1)
          $null &-> (call_stmt_1427_update_start_)
          call_stmt_1427_update_start_ o<-& (call_stmt_1427_update_completed_ 0)
          // start: WAR dependencies for rdata1
          // done: WAR dependencies for rdata1
          // start: WAR dependencies for rdata2
          // done: WAR dependencies for rdata2
          // end: 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
          // start:  			accessReg_response1 := rdata1// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 329
          // Source expression
          // rdata1
          // Target expression
          // (as target) accessReg_response1
          $T[WPIPE_accessReg_response1_1428_sample_start_] 
          $T[WPIPE_accessReg_response1_1428_sample_completed_] 
          $T[WPIPE_accessReg_response1_1428_update_start_] 
          $T[WPIPE_accessReg_response1_1428_update_completed_] 
          ;;[WPIPE_accessReg_response1_1428_Sample] 
          {
            // pipe write sample-start accessReg_response1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_accessReg_response1_1428_Update] 
          {
            // pipe write update (complete) accessReg_response1
            $T [req] $T [ack] 
          }
          WPIPE_accessReg_response1_1428_sample_start_ &-> (WPIPE_accessReg_response1_1428_Sample)
          WPIPE_accessReg_response1_1428_sample_completed_ <-& (WPIPE_accessReg_response1_1428_Sample)
          WPIPE_accessReg_response1_1428_update_start_ <-& (WPIPE_accessReg_response1_1428_sample_completed_)
          WPIPE_accessReg_response1_1428_update_start_ &-> (WPIPE_accessReg_response1_1428_Update)
          WPIPE_accessReg_response1_1428_update_completed_ <-& (WPIPE_accessReg_response1_1428_Update)
          WPIPE_accessReg_response1_1428_sample_start_ o<-& (WPIPE_accessReg_response1_1428_update_completed_ 0)
          // start: Forward dependencies from rdata1 to transition WPIPE_accessReg_response1_1428_sample_start_
          WPIPE_accessReg_response1_1428_sample_start_ <-& (call_stmt_1427_update_completed_)
          // done: Forward dependencies from rdata1 to transition WPIPE_accessReg_response1_1428_sample_start_
          // RAW reenables for rdata1
          call_stmt_1427_update_start_ o<-& (WPIPE_accessReg_response1_1428_sample_completed_ 0)
          // end:  			accessReg_response1 := rdata1// bits of buffering = 32. 
          // start:  			accessReg_response2 := rdata2// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 330
          // Source expression
          // rdata2
          // Target expression
          // (as target) accessReg_response2
          $T[WPIPE_accessReg_response2_1431_sample_start_] 
          $T[WPIPE_accessReg_response2_1431_sample_completed_] 
          $T[WPIPE_accessReg_response2_1431_update_start_] 
          $T[WPIPE_accessReg_response2_1431_update_completed_] 
          ;;[WPIPE_accessReg_response2_1431_Sample] 
          {
            // pipe write sample-start accessReg_response2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_accessReg_response2_1431_Update] 
          {
            // pipe write update (complete) accessReg_response2
            $T [req] $T [ack] 
          }
          WPIPE_accessReg_response2_1431_sample_start_ &-> (WPIPE_accessReg_response2_1431_Sample)
          WPIPE_accessReg_response2_1431_sample_completed_ <-& (WPIPE_accessReg_response2_1431_Sample)
          WPIPE_accessReg_response2_1431_update_start_ <-& (WPIPE_accessReg_response2_1431_sample_completed_)
          WPIPE_accessReg_response2_1431_update_start_ &-> (WPIPE_accessReg_response2_1431_Update)
          WPIPE_accessReg_response2_1431_update_completed_ <-& (WPIPE_accessReg_response2_1431_Update)
          WPIPE_accessReg_response2_1431_sample_start_ o<-& (WPIPE_accessReg_response2_1431_update_completed_ 0)
          // start: Forward dependencies from rdata2 to transition WPIPE_accessReg_response2_1431_sample_start_
          WPIPE_accessReg_response2_1431_sample_start_ <-& (call_stmt_1427_update_completed_)
          // done: Forward dependencies from rdata2 to transition WPIPE_accessReg_response2_1431_sample_start_
          // RAW reenables for rdata2
          call_stmt_1427_update_start_ o<-& (WPIPE_accessReg_response2_1431_sample_completed_ 0)
          // end:  			accessReg_response2 := rdata2// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_1
          //  call_stmt_1427 store
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe accessReg_request
          // read-dependencies for pipe accessReg_request
          // write-dependencies for pipe accessReg_request
          // signal dependencies for accessReg_request
          // pipe read/write dependencies for pipe accessReg_response1
          // read-dependencies for pipe accessReg_response1
          // write-dependencies for pipe accessReg_response1
          // signal dependencies for accessReg_response1
          // pipe read/write dependencies for pipe accessReg_response2
          // read-dependencies for pipe accessReg_response2
          // write-dependencies for pipe accessReg_response2
          // signal dependencies for accessReg_response2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1385__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1385_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1385__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1385_loop_body : condition_evaluated
        $bind do_while_stmt_1385__entry__  => do_while_stmt_1385_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1385_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1385__exit__)
      }
      do_while_stmt_1385__entry__ |-> (do_while_stmt_1385)
      do_while_stmt_1385__exit__ <-| (do_while_stmt_1385)
      do_while_stmt_1385__entry__ <-| (branch_block_stmt_1384__entry__)
      do_while_stmt_1385__exit__ |-> (branch_block_stmt_1384__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %regAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 318
    // constant-object-declarations for block %regAccessDaemon%loop
    //  file prog.linked.opt.aa, line 314
    // constant-object-declarations for block %regAccessDaemon
    //  file prog.linked.opt.aa, line 309
    // constant-declarations for block %regAccessDaemon%loop
    //  file prog.linked.opt.aa, line 314
    // do-while statement  
    //  file prog.linked.opt.aa, line 316
    // 1 
    $constant $W[konst_1435_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %regAccessDaemon%loop%
    //  file prog.linked.opt.aa, line 318
    // 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
    //  file prog.linked.opt.aa, line 328
    // block %regAccessDaemon%loop
    //  file prog.linked.opt.aa, line 314
    // do-while statement  
    //  file prog.linked.opt.aa, line 316
    // 			cmd_1 := accessReg_request// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 320
    // cmd_1
    $W[cmd_1_1389] : $int<64>
    // 			$volatile valid_1 := ( $slice cmd_1 63 63 ) 
    //  file prog.linked.opt.aa, line 321
    // valid_1
    $W[valid_1_1393] : $int<1>
    // 			$volatile addr1 := ( $slice cmd_1 62 55 ) 
    //  file prog.linked.opt.aa, line 322
    // addr1
    $W[addr1_1397] : $int<8>
    // 			$volatile valid_2 := ( $slice cmd_1 54 54 ) 
    //  file prog.linked.opt.aa, line 323
    // valid_2
    $W[valid_2_1401] : $int<1>
    // 			$volatile addr2 := ( $slice cmd_1 53 46 ) 
    //  file prog.linked.opt.aa, line 324
    // addr2
    $W[addr2_1405] : $int<8>
    // 			$volatile valid_w := ( $slice cmd_1 40 40 ) 
    //  file prog.linked.opt.aa, line 325
    // valid_w
    $W[valid_w_1409] : $int<1>
    // 			$volatile addr_w := ( $slice cmd_1 39 32 ) 
    //  file prog.linked.opt.aa, line 326
    // addr_w
    $W[addr_w_1413] : $int<8>
    // 			$volatile data_to_be_written := ( $slice cmd_1 31 0 ) 
    //  file prog.linked.opt.aa, line 327
    // data_to_be_written
    $W[data_to_be_written_1417] : $int<32>
    // 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
    //  file prog.linked.opt.aa, line 328
    // rdata1
    $W[rdata1_1427] : $int<32>
    // rdata2
    $W[rdata2_1427] : $int<32>
    // 			accessReg_response1 := rdata1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 329
    // accessReg_response1
    // 			accessReg_response2 := rdata2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 330
    // accessReg_response2
    // datapath-instances for block %regAccessDaemon%loop
    //  file prog.linked.opt.aa, line 314
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 316
    ==0? [do_while_stmt_1385_branch] (konst_1435_wire_constant)
    $flowthrough
    // 			cmd_1 := accessReg_request// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 320
    // accessReg_request
    $ioport $in [RPIPE_accessReg_request_1388_inst] (accessReg_request) (cmd_1_1389)  $fullrate 
    $buffering $out RPIPE_accessReg_request_1388_inst cmd_1_1389 1
    // 			$volatile valid_1 := ( $slice cmd_1 63 63 ) 
    //  file prog.linked.opt.aa, line 321
    // ( $slice cmd_1 63 63 ) 
    [:] [slice_1392_inst] (cmd_1_1389 63 63) (valid_1_1393)  $flowthrough
    $delay slice_1392_inst 0
    // 			$volatile addr1 := ( $slice cmd_1 62 55 ) 
    //  file prog.linked.opt.aa, line 322
    // ( $slice cmd_1 62 55 ) 
    [:] [slice_1396_inst] (cmd_1_1389 62 55) (addr1_1397)  $flowthrough
    $delay slice_1396_inst 0
    // 			$volatile valid_2 := ( $slice cmd_1 54 54 ) 
    //  file prog.linked.opt.aa, line 323
    // ( $slice cmd_1 54 54 ) 
    [:] [slice_1400_inst] (cmd_1_1389 54 54) (valid_2_1401)  $flowthrough
    $delay slice_1400_inst 0
    // 			$volatile addr2 := ( $slice cmd_1 53 46 ) 
    //  file prog.linked.opt.aa, line 324
    // ( $slice cmd_1 53 46 ) 
    [:] [slice_1404_inst] (cmd_1_1389 53 46) (addr2_1405)  $flowthrough
    $delay slice_1404_inst 0
    // 			$volatile valid_w := ( $slice cmd_1 40 40 ) 
    //  file prog.linked.opt.aa, line 325
    // ( $slice cmd_1 40 40 ) 
    [:] [slice_1408_inst] (cmd_1_1389 40 40) (valid_w_1409)  $flowthrough
    $delay slice_1408_inst 0
    // 			$volatile addr_w := ( $slice cmd_1 39 32 ) 
    //  file prog.linked.opt.aa, line 326
    // ( $slice cmd_1 39 32 ) 
    [:] [slice_1412_inst] (cmd_1_1389 39 32) (addr_w_1413)  $flowthrough
    $delay slice_1412_inst 0
    // 			$volatile data_to_be_written := ( $slice cmd_1 31 0 ) 
    //  file prog.linked.opt.aa, line 327
    // ( $slice cmd_1 31 0 ) 
    [:] [slice_1416_inst] (cmd_1_1389 31 0) (data_to_be_written_1417)  $flowthrough
    $delay slice_1416_inst 0
    // 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
    //  file prog.linked.opt.aa, line 328
    $call [call_stmt_1427_call] $module accessReg(valid_1_1393 addr1_1397 valid_2_1401 addr2_1405 valid_w_1409 addr_w_1413 data_to_be_written_1417) (rdata1_1427 rdata2_1427)   $fullrate
    $delay call_stmt_1427_call 7
    $buffering  $in call_stmt_1427_call valid_1_1393 1
    $buffering  $in call_stmt_1427_call addr1_1397 1
    $buffering  $in call_stmt_1427_call valid_2_1401 1
    $buffering  $in call_stmt_1427_call addr2_1405 1
    $buffering  $in call_stmt_1427_call valid_w_1409 1
    $buffering  $in call_stmt_1427_call addr_w_1413 1
    $buffering  $in call_stmt_1427_call data_to_be_written_1417 1
    $buffering  $out call_stmt_1427_call rdata1_1427 1
    $buffering  $out call_stmt_1427_call rdata2_1427 1
    // 			accessReg_response1 := rdata1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 329
    // accessReg_response1
    $ioport $out [WPIPE_accessReg_response1_1428_inst]  (rdata1_1427) (accessReg_response1)  $fullrate 
    // 			accessReg_response2 := rdata2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 330
    // accessReg_response2
    $ioport $out [WPIPE_accessReg_response2_1431_inst]  (rdata2_1427) (accessReg_response2)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1385
  //  file prog.linked.opt.aa, line 316
  // 			cmd_1 := accessReg_request// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 320
  // accessReg_request
  RPIPE_accessReg_request_1388_inst <=> (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/RPIPE_accessReg_request_1388_Sample/rr branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/RPIPE_accessReg_request_1388_Update/cr) (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/RPIPE_accessReg_request_1388_Sample/ra branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/RPIPE_accessReg_request_1388_Update/ca)
  // 			$volatile valid_1 := ( $slice cmd_1 63 63 ) 
  //  file prog.linked.opt.aa, line 321
  // cmd_1
  // 			$volatile addr1 := ( $slice cmd_1 62 55 ) 
  //  file prog.linked.opt.aa, line 322
  // cmd_1
  // 			$volatile valid_2 := ( $slice cmd_1 54 54 ) 
  //  file prog.linked.opt.aa, line 323
  // cmd_1
  // 			$volatile addr2 := ( $slice cmd_1 53 46 ) 
  //  file prog.linked.opt.aa, line 324
  // cmd_1
  // 			$volatile valid_w := ( $slice cmd_1 40 40 ) 
  //  file prog.linked.opt.aa, line 325
  // cmd_1
  // 			$volatile addr_w := ( $slice cmd_1 39 32 ) 
  //  file prog.linked.opt.aa, line 326
  // cmd_1
  // 			$volatile data_to_be_written := ( $slice cmd_1 31 0 ) 
  //  file prog.linked.opt.aa, line 327
  // cmd_1
  // 			$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 ) 
  //  file prog.linked.opt.aa, line 328
  // valid_1
  // addr1
  // valid_2
  // addr2
  // valid_w
  // addr_w
  // data_to_be_written
  call_stmt_1427_call <=> (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/call_stmt_1427_Sample/crr branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/call_stmt_1427_Update/ccr) (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/call_stmt_1427_Sample/cra branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/call_stmt_1427_Update/cca)
  // 			accessReg_response1 := rdata1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 329
  // rdata1
  // accessReg_response1
  WPIPE_accessReg_response1_1428_inst <=> (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response1_1428_Sample/req branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response1_1428_Update/req) (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response1_1428_Sample/ack branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response1_1428_Update/ack)
  // 			accessReg_response2 := rdata2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 330
  // rdata2
  // accessReg_response2
  WPIPE_accessReg_response2_1431_inst <=> (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response2_1431_Sample/req branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response2_1431_Update/req) (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response2_1431_Sample/ack branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/WPIPE_accessReg_response2_1431_Update/ack)
  do_while_stmt_1385_branch <=> (branch_block_stmt_1384/do_while_stmt_1385/do_while_stmt_1385_loop_body/condition_evaluated) (branch_block_stmt_1384/do_while_stmt_1385/loop_exit/ack branch_block_stmt_1384/do_while_stmt_1385/loop_taken/ack)
}
