$constant HALT: $uint<8> := 1
$constant SBIR: $uint<8> := 2
$constant LOAD: $uint<8> := 3
$constant STORE: $uint<8> := 4
$constant L_AND: $uint<8> := 5
$constant L_OR: $uint<8> := 6
$constant L_XNOR: $uint<8> := 7
$constant L_XOR: $uint<8> := 8
$constant ADD: $uint<8> := 9
$constant SUB: $uint<8> := 10
$constant L_SLL: $uint<8> := 11
$constant L_SRL: $uint<8> := 12
$constant L_SRA: $uint<8> := 13
$constant BZ: $uint<8> := 14
$constant BN: $uint<8> := 15
$constant CALL: $uint<8> := 16
$constant JMP: $uint<8> := 17
$constant CMP: $uint<8> := 18 	//assumed

$constant one_1: $uint<1> := 1
$constant zero_1: $uint<1> := 0
$constant zero_10: $uint<10> := 0
$constant zero_42: $uint<42> := 0
$constant zero_106: $uint<106> := 0
$constant zero_139: $uint<139> := 0
$constant zero_171: $uint<171> := 0

$constant thirty_one_32: $uint<32> := 31

$constant thirty_two_32: $uint<32> := 32

$constant one_10: $uint<10> := 1
$constant one_8 : $uint<8> := 1
$constant zero_8 : $uint<8> := 0
$constant byte_mask_3_bytes: $uint<32> := 4294967040
$constant zero_32: $uint<32> := 0
$constant write_signal: $uint<1> := 0
$constant read_signal: $uint<1> := 1

$constant minus_1 : $uint<32> := 4294967295
$constant one_32 :  $uint<32> := 1

$storage reg_array: $array[64] $of $uint<32>	
$storage mem_array: $array[1024] $of $uint<32>			//mem_array[0...511] is instruction and mem_array[512...1023] is data
//$storage instr_mem_addr: $uint<10>
//$storage pc: $uint<10>

$pipe accessMem_request: $uint<64> $depth 2
$pipe accessMem_response: $uint<32> $depth 2

$pipe accessReg_request: $uint<64> $depth 2
$pipe accessReg_response1: $uint<32> $depth 2
$pipe accessReg_response2: $uint<32> $depth 2
$pipe processor_result: $uint<32> $depth 2

$pipe start_processor: $uint<8> $depth 2

$pipeline $depth 7 $module [accessMem]
$in (read_write_bar: $uint<1>  addr: $uint<10> write_data: $uint<32> )
$out (read_data: $uint<32> ) $is
{
	
	$guard (read_write_bar) t_read_data := mem_array[addr]


	$guard (~read_write_bar) mem_array[addr] := write_data 



	//G: if(1) then last parameter is taken
	read_data := ($mux read_write_bar  t_read_data 0)
	

}

$pipeline $depth 7 $module [accessReg]
$in (valid_1: $uint<1>  addr_1: $uint<8> valid_2: $uint<1> addr_2: $uint<8> valid_w: $uint<1> addr_w: $uint<8> data_to_be_written: $uint<32>)
$out (read_data_1: $uint<32> read_data_2: $uint<32> ) $is
{
	
	
	$guard (valid_1) t_read_data_1 := reg_array[addr_1]
	$guard (valid_2) t_read_data_2 := reg_array[addr_2]

	read_data_1 := ($mux valid_1 t_read_data_1 0)
	read_data_2 := ($mux valid_2 t_read_data_2 0)

	$guard (valid_w) reg_array[addr_w] := data_to_be_written

}

$module [memAccessDaemon] $in () $out () $is
{
	

	$branchblock[loop] {
		$dopipeline $depth 20 $buffering 2 $fullrate

		$merge $entry $loopback $endmerge

		cmd_1 := accessMem_request

		
		$volatile $split (cmd_1 32 10 21 1) (wdata addr unused rwbar)
		

		$call accessMem (rwbar  addr wdata ) (rdata )
		
		accessMem_response := rdata
		
	$while 1
	}
}

$module [regAccessDaemon] $in () $out () $is
{
	

	$branchblock[loop] {
		$dopipeline $depth 20 $buffering 2 $fullrate

		$merge $entry $loopback $endmerge

		cmd_1 := accessReg_request

		
		$volatile $split (cmd_1 1 8 1 8 5 1 8 32) (valid_1 addr1 valid_2 addr2 unused valid_w addr_w data_to_be_written) 

		

		$call accessReg (valid_1 addr1 valid_2 addr2 valid_w addr_w data_to_be_written ) (rdata1 rdata2 )
		
		accessReg_response1 := rdata1
		accessReg_response2 := rdata2
		
	$while 1
	}
}


//  $module [cal_Next_program_cnt] $in (opcode: $uint<8> rd1: $uint<32> rd2: $uint<32> program_cnt: $uint<10> is_rs1_neg: $uint<1>) $out (n_program_cnt: $uint<10>) $is
// {
// 	//$volatile is_BZ := ($mux (opcode == BZ) one_1 zero_1)
// 	//$volatile is_BN := ($mux (opcode == BN) one_1 zero_1)
// 	//$volatile is_CALL := ($mux (opcode == CALL) one_1 zero_1)
// 	//$volatile is_JMP := ($mux (opcode == JMP) one_1 zero_1)

// 	$volatile is_Branch := ($reduce | ($reduce & (opcode == BZ)  (~is_rs1_neg)) ($reduce & (opcode == BN)  is_rs1_neg))

// 	$volatile normalFlow := (~($reduce | is_Branch (opcode == CALL) (opcode == JMP)))
// 	$volatile $split (rd1 22 10) (unused1 addr1)
// 	$volatile $split (rd2 22 10) (unused2 addr2)

// 	$volatile n_program_cnt := ($excmux 
// 											(opcode == CALL) addr1
// 											(opcode == JMP) addr1
// 											(is_Branch == one_1) addr2
// 											(normalFlow == one_1) (program_cnt + 1)
// 											)
// 	$rreport(cal_Next_program_cnt status program_cnt n_program_cnt opcode is_Branch normalFlow addr1 addr2 is_rs1_neg)

// }

/////////////////////////////////////////////////////////////////////////////////////////////

$module [processor_daemon] $in () $out () $is
{
	$branchblock [check_start] {
		$merge $entry check_for_start $endmerge

		cmd := start_processor     
		$if (cmd == one_8) $then

	$branchblock[loop] {

		$dopipeline $depth 15 $buffering 2 $fullrate 

			$merge $entry $loopback 
				$phi ifetch_state    := one_10 $on $entry next_ifetch_state $on $loopback
				$phi icache_state     := _b0 $on $entry  n_icache_state $on $loopback

				$phi idecode_state   := _b0 $on $entry n_idecode_state $on $loopback
								//($call iDecodeStage (icache_actions idecode_state)) $on $loopback
				$phi iregfile_state  := _b0 $on $entry n_iregfile_state $on $loopback
				$phi iexec_state     := _b0 $on $entry  n_iexec_state $on $loopback
				$phi dcache_state     := _b0 $on $entry n_dcache_state $on $loopback

				$phi iretire_state     := _b0 $on $entry n_iRetire_state $on $loopback
			$endmerge
			
			

			//$volatile extractSendToIcache  (ifetch_actions) (send_to_icache message_to_icache)
			//$guard (send_to_icache)
				//IFETCH_TO_ICACHE := message_to_icache

			//$volatile extractSendToDcache  (iexec_actions) (send_to_dcache message_to_dcache)
			//$guard (send_to_dcache)
				//IFETCH_TO_ICACHE := message_to_dcache

			//$volatile extractGetFromIcache (icache_actions) (get_from_icache)
			//$volatile extractGetFromDcache (dcache_actions) (get_from_dcache)

			$volatile $call scoreBoard   
				(ifetch_state icache_state idecode_state 
						iregfile_state iexec_state dcache_state iretire_state ) 
							(ifetch_actions icache_actions idecode_actions iregfile_actions iexec_actions  dcache_actions   	ex_Unconditional_JUMP 	 is_Branch_Hazard	flush_ifetch flush_icache flush_idecode	 flush_reg	 flush_iexec	 flush_dcache	stall_first_4)



			$call accessMem (read_signal icache_state zero_32 ) (icache_instruction)





			$volatile n_icache_state := ($mux flush_icache zero_10 ($mux stall_first_4 icache_state ifetch_state))

			$volatile n_idecode_state := ($mux flush_idecode zero_42 ($mux stall_first_4 idecode_state ($concat icache_instruction icache_state)))

			$volatile n_iregfile_state := ($mux flush_reg zero_42 ($mux stall_first_4 iregfile_state idecode_state) )

			$volatile $split (iregfile_state 32 10) (iregfile_instruction iregfile_pc)

			//------------------------- forwarding to execute stage ---------------------------------------------------
			$volatile $split (iexec_state 8 8 8 8 32 32 10) (iexec_opcode iexec_rs1_imm iexec_rs2 iexec_rd iexec_rd1 iexec_rd2 iexec_pc)
			$volatile $split (dcache_state 8 8 8 8 32 32 32 1 10 ) (dcache_opcode dcache_rs1_imm dcache_rs2 dcache_rd dcache_rd1 dcache_rd2 dcache_exec_result dcache_isBranch dcache_pc)
			$volatile $split (iretire_state 8 8 8 8 64 32 1  10) (iretire_opcode iretire_rs1_imm iretire_rs2 iretire_rd iretire_data iretire_exec_result_memData iretire_branch  iretire_pc)

			$volatile $split  (iexec_actions 1 1 1 1) ( dcache_to_ex_rs1_imm dcache_to_ex_rs2 iretire_state_to_ex_rs1_imm iretire_state_to_ex_rs2)

			$volatile iexec_rd1_final := ($mux dcache_to_ex_rs1_imm dcache_exec_result ($mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData iexec_rd1))
			$volatile iexec_rd2_final := ($mux dcache_to_ex_rs2 dcache_exec_result ($mux iretire_state_to_ex_rs2 iretire_exec_result_memData iexec_rd2))

			//$rreport (processor_daemon iexec_inputs iexec_rd1 iexec_rd2)

			//---------------------------------------------------------------------------------------------------------

			$call iExecStage (iexec_state  iexec_rd1_final iexec_rd2_final) (n_dcache_state_from_exec)

			n_dcache_state := ($mux flush_dcache  zero_139 n_dcache_state_from_exec)

			//--------------------------- forwarding to mem stage --------------------
			$volatile $split (dcache_actions 1 1 1) (memWrite 	iretire_state_to_dcache_addr iretire_state_to_dcache_memData)
			$volatile memWriteData :=  ($mux iretire_state_to_dcache_memData 	iretire_exec_result_memData		 dcache_rd2)


			//---------------------------- accessing data memory -------------------------
			$volatile final_memAddr_32 := ($mux iretire_state_to_dcache_addr iretire_exec_result_memData dcache_rd1)
			$volatile $split (final_memAddr_32 22 10 ) (unused memAddr)

			$call accessMem (memWrite memAddr memWriteData)( memReadData)


			//-------------------------------reg_file access ---------------------

			$volatile $split (iregfile_actions 1 1 1 1 1) (reg_valid_read1 reg_valid_read2 reg_valid_write iretire_state_to_rs1_imm iretire_state_to_rs2)



			$volatile $split (iregfile_state 8 8 8 8  10) (reg_opcode reg_rs1_imm reg_rs2 reg_rd reg_pc) 

			$volatile reg_data_to_be_written := iretire_exec_result_memData 


			$call accessReg (reg_valid_read1 reg_rs1_imm reg_valid_read2 reg_rs2 reg_valid_write iretire_rd reg_data_to_be_written) (reg_d1 reg_d2)

			//$rreport (processor_daemon reg_state reg_opcode reg_rs1_imm reg_rs2 reg_rd reg_d1 reg_d2 iregfile_pc)

			//--------------------------------------Forwarding to the register file from iretire ----------------------------
			$volatile final_rd1 := ($mux iretire_state_to_rs1_imm reg_data_to_be_written reg_d1) 
			$volatile final_rd2 := ($mux iretire_state_to_rs2 reg_data_to_be_written reg_d2)

			$volatile n_iexec_state := ($mux flush_iexec  zero_106 ($concat reg_opcode reg_rs1_imm reg_rs2 reg_rd final_rd1 final_rd2 iregfile_pc))

			$volatile dcache_data_to_be_written_to_reg := ($mux (dcache_opcode == LOAD) memReadData dcache_exec_result)
			$volatile n_iRetire_state := ($concat dcache_opcode dcache_rs1_imm dcache_rs2 dcache_rd dcache_rd1 dcache_rd2 dcache_data_to_be_written_to_reg dcache_isBranch dcache_pc)
			//$call DCacheStage (dcache_actions dcache_state) ()

			//----------------------------------------calculating next ifetch_state ---------------------
			$volatile iretire_to_dcache_addr_32 := ($mux (dcache_rs2 == iretire_rd) iretire_exec_result_memData dcache_rd2)
			$volatile dcache_to_ex_addr_32 :=  ($mux (dcache_rd == iexec_rs1_imm) dcache_exec_result ($mux (iretire_rd == iexec_rs1_imm) iretire_exec_result_memData iexec_rd1))// only for rs1 because jump/call is found out here
			$volatile next_ifetch_state_32 := ($mux  is_Branch_Hazard 	iretire_to_dcache_addr_32 ($mux ex_Unconditional_JUMP  dcache_to_ex_addr_32  ($mux stall_first_4 ($bitcast ($uint<32>) ifetch_state) ($bitcast ($uint<32>) (ifetch_state + 1))	)))
			$volatile $split (next_ifetch_state_32 22 10) ( next_ifetch_state_22 	 next_ifetch_state )
			//$volatile next_ifetch_state_10 := ($mux (dcache_to_ex_rs1_imm iexec_rd1_final ($mux iexec_rd2_final iexec_rd2_final ($mux iretire_state_to_ex_rs1_imm iretire_exec_result_memData))))

			//--------------------------------------------------------------------

			//$rreport (processor ifetch_states iretire_to_dcache_addr_32 dcache_to_ex_addr_32 ifetch_state )
			//$rreport (processor_daemon processor iexec_rd1_final iexec_rd2_final icache_instruction dcache_to_ex_rs1_imm 	iretire_state_to_ex_rs1_imm 	dcache_to_ex_rs2 	iretire_state_to_ex_rs2)
			$rreport (processor_daemon processor ifetch_state icache_state idecode_state iregfile_state iexec_state dcache_state iretire_state reg_data_to_be_written iretire_opcode icache_instruction)//iretire_to_dcache_addr_32 dcache_to_ex_addr_32 next_ifetch_state_32)
			//$rreport (processor_daemon processor_opcode iretire_opcode icache_instruction)

			//$rreport (processor_daemon processor_flush_States flush_ifetch flush_icache flush_idecode	 flush_reg	 flush_iexec	 flush_dcache	)
			//$rreport (processor_daemon processor_memory_related memWrite memAddr memWriteData)
			processor_result := reg_data_to_be_written

		$while (~(iretire_opcode == HALT))
	}
	$place [check_for_start]
		$endif
	}
}
		
$volatile 
$module [scoreBoard]
	$in (ifetch_state: $uint<10> icache_state: $uint<10> idecode_state: $uint<42> iregfile_state: $uint<42> iexec_state: $uint<106> dcache_state: $uint<139> iretire_state: $uint<139> ) 
	$out (ifetch_actions: $uint<10> icache_actions: $uint<10> idecode_actions: $uint<42> iregfile_actions: $uint<5> iexec_actions: $uint<4>  dcache_actions: $uint<3>   ex_Unconditional_JUMP: $uint<1> is_Branch_Hazard: $uint<1> flush_ifetch: $uint<1> flush_icache: $uint<1> flush_idecode: $uint<1> flush_reg: $uint<1> flush_iexec: $uint<1> flush_dcache: $uint<1> stall_first_4: $uint<1>)
$is
{
	//Branch Hazard conditions
	$volatile $split (dcache_state 128 1 10) (dcache_state_first is_Branch dcache_state_second)
	$volatile $split (iexec_state 8 8 8 8 32 32 10) (ex_opcode ex_rs1_imm ex_rs2 ex_rd ex_rd1 ex_rd2 ex_pc)
	$volatile ex_Unconditional_JUMP := ($reduce | (ex_opcode == CALL) (ex_opcode == JMP))
	$volatile is_Branch_Hazard := is_Branch//($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1))

	



	//Forwarding logic
	$volatile $split (dcache_state 8 8 8 8 32 32 43) (dcache_opcode dcache_rs1_imm dcache_rs2 dcache_rd dcache_rd1 dcache_rd2 dcache_second)
	$volatile dcache_state_reg_write := ($reduce | (dcache_opcode == SBIR) (dcache_opcode == LOAD) (dcache_opcode == L_AND) (dcache_opcode == L_OR) (dcache_opcode == L_XNOR) (dcache_opcode == ADD) (dcache_opcode == SUB) (dcache_opcode == L_SLL) (dcache_opcode == L_SRL) (dcache_opcode == L_SRA) (dcache_opcode == CALL) (dcache_opcode == CMP))
	$volatile dcache_to_ex_rs1_imm := ($reduce & (dcache_state_reg_write == one_1) (dcache_rd == ex_rs1_imm))
	$volatile dcache_to_ex_rs2 := ($reduce & (dcache_state_reg_write == one_1) (dcache_rd == ex_rs2))

	$volatile $split (iretire_state 8 8 8 8 107) (iretire_opcode iretire_rs1_imm iretire_rs2 iretire_rd iretire_state_second)
	$volatile iretire_state_reg_write := ($reduce | (iretire_opcode == SBIR) (iretire_opcode == LOAD) (iretire_opcode == L_AND) (iretire_opcode == L_OR) (iretire_opcode == L_XNOR) (iretire_opcode == ADD) (iretire_opcode == SUB) (iretire_opcode == L_SLL) (iretire_opcode == L_SRL) (iretire_opcode == L_SRA) (iretire_opcode == CALL) (iretire_opcode == CMP))
	$volatile iretire_state_to_ex_rs1_imm := ($reduce & (iretire_state_reg_write == one_1) (iretire_rd == ex_rs1_imm))
	$volatile iretire_state_to_ex_rs2 := ($reduce & (iretire_state_reg_write == one_1) (iretire_rd == ex_rs2))

	$volatile iretire_state_to_dcache_addr := ($reduce & (iretire_state_reg_write == one_1) (dcache_rs1_imm == iretire_rd))
	$volatile iretire_state_to_dcache_memData := ($reduce & (iretire_state_reg_write == one_1) (dcache_rs2 == iretire_rd))

	$volatile $split (iregfile_state 8 8 8 8 10) (iregfile_opcode iregfile_rs1_imm iregfile_rs2 iregfile_rd iregfile_pc)
	$volatile iretire_state_to_rs1_imm := ($reduce & (iretire_state_reg_write == one_1) (iretire_rd == iregfile_rs1_imm))
	$volatile iretire_state_to_rs2 := ($reduce & (iretire_state_reg_write == one_1) (iretire_rd == iregfile_rs2))


	//Stalling logic for following instructions LOAD rs1 rs2 rd and some instruction that reads from rd

	$volatile stall_first_4 := ($reduce  & (ex_opcode == LOAD) (~(iregfile_opcode == zero_8)) (~(iregfile_opcode == STORE)) ($reduce | (iretire_rs1_imm == ex_rd) (iregfile_rs2 == ex_rd) ))
	//$volatile stall_ifetch :=  stall_first_4
	//$volatile stall_icache :=  stall_first_4
	//$volatile stall_idecode := stall_first_4
	//$volatile stall_regFile := stall_first_4	

	//flushing next state of respective registers signals
	$volatile flush_ifetch := ($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1))
	$volatile flush_icache := ($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1))
	$volatile flush_idecode := ($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1))
	$volatile flush_reg := ($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1))
	$volatile flush_iexec := ($reduce | (is_Branch == one_1) (ex_Unconditional_JUMP == one_1) (stall_first_4 == one_1))
	$volatile flush_dcache := is_Branch


	//-------------------------- next ifetch calculation ------------------

	//$volatile next_possible_ifetch_state := ($mux (d_isBranch == one_1) dcache_rd2 ($mux (ex_Unconditional_JUMP == one_1) ex_rd1 (ifetch_state + 1)))
	$volatile ifetch_actions := ifetch_state
	//------------------------------- icache stage  ---------------------------------
	$volatile icache_actions := icache_state

	//------------------------------- idecode stage ---------------------------------
	$volatile idecode_actions := idecode_state //idecode_actions must contain pc in it
	//----------------------------- reg_file stage-------------------------
	//finds out valid_read1 valid_read2 valid_write signal
	$volatile $split (iregfile_state 8 8 8 8 10) (iregfile_state_opcode iregfile_state_rs1_imm iregfile_state_rs2 iregfile_state_rd iregfile_state_pc)
	$volatile reg_valid_read1 := ($mux (iregfile_state_opcode == 0) zero_1 one_1) 
	$volatile reg_valid_read2 := ($mux (iregfile_state_opcode == 0) zero_1 one_1)
	$volatile reg_valid_write := iretire_state_reg_write

	//------------------------------ iretire_state ---------------------------------
	$volatile $split (iretire_state 8 8 8 8 32 32 32 1 10) (ret_opcode ret_rs1_imm ret_rs2 ret_rd ret_rd1 ret_rd2 ret_exec_result_memData ret_isBrach ret_pc)

	$volatile iregfile_actions := ($concat reg_valid_read1 reg_valid_read2 reg_valid_write iretire_state_to_rs1_imm iretire_state_to_rs2) //--check it

	//------------------------exec stage --------------------------
	//Assuming first 32 bits are for instruction in execute stage

	$volatile iexec_actions := ($concat dcache_to_ex_rs1_imm dcache_to_ex_rs2 iretire_state_to_ex_rs1_imm iretire_state_to_ex_rs2)
	

	//------------------------------------------ dcache stage -------------------
	$volatile memWrite := ($mux (dcache_opcode == STORE)  zero_1 one_1)
	$volatile dcache_actions := ($concat memWrite iretire_state_to_dcache_addr iretire_state_to_dcache_memData)


	//-------------------------------------------- retire stage -------------------------------
	
	//$volatile MESSAGE_TO_RFILE := //should be concatenated with reg_file_actions

}


//$pipeline $depth 7 $module [iFetchStage] $in (ifetch_actions: $uint<> ifetch_state: $uint<>)
//	$out (next_ifetch_state: $uint<>) $is
//{
//}

//$pipeline $depth 7 $module [ICacheStage] $in (icache_actions: $uint<> icache_state: $uint<>)
	//$out (next_idecode_state: $uint<>) $is
//{
//}

//$pipeline $depth 7 $module [iDecodeStage] $in (icache_actions: $uint<> idecode_state: $uint<>)
	//$out (next_idecode_state: $uint<>) $is
//{
	//$volatile next_idecode_state := icache_actions
//}

//$pipeline $depth 7 $module [iRegfileStage] $in (idecode_actions: $uint<> iregfile_state: $uint<>)
//	$out (next_iregfile_state: $uint<>) $is
//{
//	$volatile next_iregfile_state := idecode_actions
//}

$pipeline $depth 7 $module [iExecStage] $in (iexec_state: $uint<106> iexec_rd1_final: $uint<32> iexec_rd2_final: $uint<32>)
	$out (next_dcache_state: $uint<139>) $is
{
	$split (iexec_state 8 8 8 8 32 32 10) (opcode rs1_imm rs2 rd rd1 rd2 program_cnt)



	$volatile exec_result_initial := ($excmux 
											(opcode == SBIR) ((iexec_rd2_final & byte_mask_3_bytes) | ($bitcast ($uint<32>) rs1_imm ))
											(opcode == L_AND) (iexec_rd1_final & iexec_rd2_final)
											(opcode == L_OR) (iexec_rd1_final | iexec_rd2_final)
											(opcode == L_XNOR) (iexec_rd1_final ~^ iexec_rd2_final)
											(opcode == L_XOR) (iexec_rd1_final ^ iexec_rd2_final)
											(opcode == ADD) (iexec_rd1_final + iexec_rd2_final)
											(opcode == SUB) (iexec_rd1_final - iexec_rd2_final)
											(opcode == L_SLL) ($bitcast ($uint<32>) (iexec_rd1_final << iexec_rd2_final))
											(opcode == L_SRL ) ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final))
											//(opcode == L_SRA) ($bitcast ($uint<32>) (iexec_rd1_final >> iexec_rd2_final)) //check for arithmetic right shift
											(opcode == CMP) ($excmux (iexec_rd1_final == iexec_rd2_final) zero_32 
																	(iexec_rd1_final < iexec_rd2_final) minus_1
																	 (iexec_rd1_final >iexec_rd2_final) one_32)
											(opcode == CALL) ($bitcast ($uint<32>) (program_cnt + 1)) //check it

					)

	$volatile is_SRA := ($mux (opcode == L_SRA) one_1 zero_1)

	$guard (is_SRA) $volatile bottom_bits := (iexec_rd1_final >> iexec_rd2_final)
	$guard (is_SRA) $volatile top_bits := ((zero_32 - (iexec_rd1_final >> thirty_one_32)) << (thirty_two_32 - iexec_rd2_final))

	$guard (is_SRA) $volatile result_for_SRA := ( top_bits | bottom_bits)

	$volatile exec_result := ($mux is_SRA result_for_SRA exec_result_initial)

	$volatile $split(iexec_rd1_final 1 31) (is_rs1_neg unused_bits)

	$volatile is_Branch := ($reduce | ($reduce & (opcode == BZ)  (~is_rs1_neg)) ($reduce & (opcode == BN)  is_rs1_neg))

	 next_dcache_state := ($concat opcode rs1_imm rs2 rd iexec_rd1_final iexec_rd2_final exec_result is_Branch program_cnt)

}

//$pipeline $depth 7 $module [DCacheStage] $in (dcache_actions: $uint<> dcache_state: $uint<>)
//	$out (next_iRetire_state: $uint<>) $is
//{
	
//}

