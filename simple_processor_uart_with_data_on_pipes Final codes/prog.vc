// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_pipe : $uint<8>  $depth 32 
// can point into 
// in scope  top-level
$pipe [in_pipe] 8 $depth 32 
// $pipe  mem_in : $uint<64>  $depth 8 
// can point into 
// in scope  top-level
$pipe [mem_in] 64 $depth 8 
// $pipe  mem_out : $uint<32>  $depth 8 
// can point into 
// in scope  top-level
$pipe [mem_out] 32 $depth 8 
// $pipe  out_pipe : $uint<8>  $depth 8 
// can point into 
// in scope  top-level
$pipe [out_pipe] 8 $depth 8 
// $pipe  processor_result : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [processor_result] 32 $depth 2 
// $pipe  request_to_bridge : $uint<64>  $depth 8 
// can point into 
// in scope  top-level
$pipe [request_to_bridge] 64 $depth 8 
// $pipe  response_from_bridge : $uint<32>  $depth 8 
// can point into 
// in scope  top-level
$pipe [response_from_bridge] 32 $depth 8 
// $pipe  start_processor : $uint<8>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [start_processor] 8 $depth 1 $signal 
$constant $W[ADD] : $int<8> := _b00001001// 9
$constant $W[BN] : $int<8> := _b00001111// 15
$constant $W[BZ] : $int<8> := _b00001110// 14
$constant $W[CALL] : $int<8> := _b00010000// 16
$constant $W[CMP] : $int<8> := _b00010010// 18
$constant $W[HALT] : $int<8> := _b00000001// 1
$constant $W[JMP] : $int<8> := _b00010001// 17
$constant $W[LOAD] : $int<8> := _b00000011// 3
$constant $W[L_AND] : $int<8> := _b00000101// 5
$constant $W[L_OR] : $int<8> := _b00000110// 6
$constant $W[L_SLL] : $int<8> := _b00001011// 11
$constant $W[L_SRA] : $int<8> := _b00001101// 13
$constant $W[L_SRL] : $int<8> := _b00001100// 12
$constant $W[L_XNOR] : $int<8> := _b00000111// 7
$constant $W[L_XOR] : $int<8> := _b00001000// 8
$constant $W[SBIR] : $int<8> := _b00000010// 2
$constant $W[STORE] : $int<8> := _b00000100// 4
$constant $W[SUB] : $int<8> := _b00001010// 10
$constant $W[byte_mask_3_bytes] : $int<32> := _b11111111111111111111111100000000// -256
$constant $W[minus_1] : $int<32> := _b11111111111111111111111111111111// -1
$constant $W[one_1] : $int<1> := _b1// 1
$constant $W[one_10] : $int<10> := _b0000000001// 1
$constant $W[one_32] : $int<32> := _b00000000000000000000000000000001// 1
$constant $W[one_8] : $int<8> := _b00000001// 1
$constant $W[read_signal] : $int<1> := _b1// 1
// load store constants for object reg_array
$constant $W[reg_array_base_address] : $int<6> := _b000000
$constant $W[seven_8] : $int<8> := _b00000111// 7
$constant $W[uart_addr] : $int<8> := _b11111110// 254
$constant $W[write_signal] : $int<1> := _b0// 0
$constant $W[zero_1] : $int<1> := _b0// 0
$constant $W[zero_10] : $int<10> := _b0000000000// 0
$constant $W[zero_23] : $int<23> := _b00000000000000000000000// 0
$constant $W[zero_24] : $int<24> := _b000000000000000000000000// 0
$constant $W[zero_32] : $int<32> := _b00000000000000000000000000000000// 0
$constant $W[zero_33] : $int<33> := _b000000000000000000000000000000000// 0
$memoryspace [memory_space_0] 
{
  $capacity 64
  $datawidth 32
  $addrwidth 6
  $maxaccesswidth 32
  // $storage  reg_array : $array[64] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [reg_array] : $array[64] $of $int<32>
}
$module [cal_Next_program_cnt] 
{
  $in opcode:$int<8>
  // can point into 
  rd1:$int<32>
  // can point into 
  rd2:$int<32>
  // can point into 
  program_cnt:$int<8>
  // can point into 
  is_rs1_neg:$int<1>
  // can point into 
  $out n_program_cnt:$int<8>
  // can point into 
  // pipe-declarations for block %cal_Next_program_cnt
  //  file prog.linked.opt.aa, line 53
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_140_to_assign_stmt_191] 
    {
      // start: WAR dependencies for is_Branch
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for is_Branch
      // start:  	$volatile is_Branch := (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
      //  file prog.linked.opt.aa, line 58
      // volatile! 
      // Source expression
      // (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
      // ((opcode == BZ) & ( ~ is_rs1_neg ))
      // (opcode == BZ)
      // opcode
      // ( ~ is_rs1_neg )
      // is_rs1_neg
      // ((opcode == BN) & is_rs1_neg)
      // (opcode == BN)
      // opcode
      // is_rs1_neg
      // Target expression
      // (as target) is_Branch
      // start: WAR dependencies for is_Branch
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for is_Branch
      // end:  	$volatile is_Branch := (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
      // start: WAR dependencies for normalFlow
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for normalFlow
      // start:  	$volatile normalFlow := ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
      //  file prog.linked.opt.aa, line 59
      // volatile! 
      // Source expression
      // ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
      // ((is_Branch | (opcode == CALL)) | (opcode == JMP))
      // (is_Branch | (opcode == CALL))
      // is_Branch
      // (opcode == CALL)
      // opcode
      // (opcode == JMP)
      // opcode
      // Target expression
      // (as target) normalFlow
      // start: WAR dependencies for normalFlow
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for normalFlow
      // end:  	$volatile normalFlow := ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
      // start: WAR dependencies for addr1
      // ignored out-of-scope w_root  rd1 : $uint<32> 
      // done: WAR dependencies for addr1
      // start:  	$volatile addr1 := ( $slice rd1 7 0 ) 
      //  file prog.linked.opt.aa, line 60
      // volatile! 
      // Source expression
      // ( $slice rd1 7 0 ) 
      // rd1
      // Target expression
      // (as target) addr1
      // start: WAR dependencies for addr1
      // ignored out-of-scope w_root  rd1 : $uint<32> 
      // done: WAR dependencies for addr1
      // end:  	$volatile addr1 := ( $slice rd1 7 0 ) 
      // start: WAR dependencies for addr2
      // ignored out-of-scope w_root  rd2 : $uint<32> 
      // done: WAR dependencies for addr2
      // start:  	$volatile addr2 := ( $slice rd2 7 0 ) 
      //  file prog.linked.opt.aa, line 61
      // volatile! 
      // Source expression
      // ( $slice rd2 7 0 ) 
      // rd2
      // Target expression
      // (as target) addr2
      // start: WAR dependencies for addr2
      // ignored out-of-scope w_root  rd2 : $uint<32> 
      // done: WAR dependencies for addr2
      // end:  	$volatile addr2 := ( $slice rd2 7 0 ) 
      // start: WAR dependencies for n_program_cnt
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  rd1 : $uint<32> 
      // ignored out-of-scope w_root  rd2 : $uint<32> 
      // ignored out-of-scope w_root  program_cnt : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for n_program_cnt
      // start:  	$volatile n_program_cnt := ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
      //  file prog.linked.opt.aa, line 62
      // volatile! 
      // Source expression
      // ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
      // (( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) )
      // ( $mux (opcode == CALL) addr1  _b0  ) 
      // (opcode == CALL)
      // opcode
      // addr1
      // ( $mux (opcode == JMP) addr1  _b0  ) 
      // (opcode == JMP)
      // opcode
      // addr1
      // (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) )
      // ( $mux (is_Branch == one_1) addr2  _b0  ) 
      // (is_Branch == one_1)
      // is_Branch
      // addr2
      // ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) 
      // (normalFlow == one_1)
      // normalFlow
      // (program_cnt + 1 )
      // program_cnt
      // Target expression
      // (as target) n_program_cnt
      // n_program_cnt
      // write to interface object
      // start: WAR dependencies for n_program_cnt
      // ignored out-of-scope w_root  opcode : $uint<8> 
      // ignored out-of-scope w_root  rd1 : $uint<32> 
      // ignored out-of-scope w_root  rd2 : $uint<32> 
      // ignored out-of-scope w_root  program_cnt : $uint<8> 
      // ignored out-of-scope w_root  is_rs1_neg : $uint<1> 
      // done: WAR dependencies for n_program_cnt
      // n_program_cnt
      // write to interface object
      // end:  	$volatile n_program_cnt := ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %cal_Next_program_cnt
    //  file prog.linked.opt.aa, line 53
    // BZ
    $constant $W[R_BZ_129_wire_constant] : $int<8> := _b00001110// 14
    // BN
    $constant $W[R_BN_135_wire_constant] : $int<8> := _b00001111// 15
    // CALL
    $constant $W[R_CALL_144_wire_constant] : $int<8> := _b00010000// 16
    // JMP
    $constant $W[R_JMP_148_wire_constant] : $int<8> := _b00010001// 17
    // ( $mux (opcode == CALL) addr1  _b0  ) 
    // CALL
    $constant $W[R_CALL_163_wire_constant] : $int<8> := _b00010000// 16
    // _b0 
    $constant $W[konst_166_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (opcode == JMP) addr1  _b0  ) 
    // JMP
    $constant $W[R_JMP_169_wire_constant] : $int<8> := _b00010001// 17
    // _b0 
    $constant $W[konst_172_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (is_Branch == one_1) addr2  _b0  ) 
    // one_1
    $constant $W[R_one_1_176_wire_constant] : $int<1> := _b1// 1
    // _b0 
    $constant $W[konst_179_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) 
    // one_1
    $constant $W[R_one_1_182_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_185_wire_constant] : $int<8> := _b00000001// 1
    // _b0 
    $constant $W[konst_187_wire_constant] : $int<8> := _b00000000// 0
    // 	$volatile is_Branch := (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
    //  file prog.linked.opt.aa, line 58
    // (opcode == BZ)
    $intermediate $W[EQ_u8_u1_130_wire] : $int<1>
    // ( ~ is_rs1_neg )
    $intermediate $W[NOT_u1_u1_132_wire] : $int<1>
    // ((opcode == BZ) & ( ~ is_rs1_neg ))
    $intermediate $W[AND_u1_u1_133_wire] : $int<1>
    // (opcode == BN)
    $intermediate $W[EQ_u8_u1_136_wire] : $int<1>
    // ((opcode == BN) & is_rs1_neg)
    $intermediate $W[AND_u1_u1_138_wire] : $int<1>
    // is_Branch
    $W[is_Branch_140] : $int<1>
    // 	$volatile normalFlow := ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
    //  file prog.linked.opt.aa, line 59
    // (opcode == CALL)
    $intermediate $W[EQ_u8_u1_145_wire] : $int<1>
    // (is_Branch | (opcode == CALL))
    $intermediate $W[OR_u1_u1_146_wire] : $int<1>
    // (opcode == JMP)
    $intermediate $W[EQ_u8_u1_149_wire] : $int<1>
    // ((is_Branch | (opcode == CALL)) | (opcode == JMP))
    $intermediate $W[OR_u1_u1_150_wire] : $int<1>
    // normalFlow
    $W[normalFlow_152] : $int<1>
    // 	$volatile addr1 := ( $slice rd1 7 0 ) 
    //  file prog.linked.opt.aa, line 60
    // addr1
    $W[addr1_156] : $int<8>
    // 	$volatile addr2 := ( $slice rd2 7 0 ) 
    //  file prog.linked.opt.aa, line 61
    // addr2
    $W[addr2_160] : $int<8>
    // 	$volatile n_program_cnt := ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
    //  file prog.linked.opt.aa, line 62
    // (opcode == CALL)
    $intermediate $W[EQ_u8_u1_164_wire] : $int<1>
    // ( $mux (opcode == CALL) addr1  _b0  ) 
    $intermediate $W[MUX_167_wire] : $int<8>
    // (opcode == JMP)
    $intermediate $W[EQ_u8_u1_170_wire] : $int<1>
    // ( $mux (opcode == JMP) addr1  _b0  ) 
    $intermediate $W[MUX_173_wire] : $int<8>
    // (( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) )
    $intermediate $W[OR_u8_u8_174_wire] : $int<8>
    // (is_Branch == one_1)
    $intermediate $W[EQ_u1_u1_177_wire] : $int<1>
    // ( $mux (is_Branch == one_1) addr2  _b0  ) 
    $intermediate $W[MUX_180_wire] : $int<8>
    // (normalFlow == one_1)
    $intermediate $W[EQ_u1_u1_183_wire] : $int<1>
    // (program_cnt + 1 )
    $intermediate $W[ADD_u8_u8_186_wire] : $int<8>
    // ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) 
    $intermediate $W[MUX_188_wire] : $int<8>
    // (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) )
    $intermediate $W[OR_u8_u8_189_wire] : $int<8>
    // n_program_cnt
    // 	$volatile is_Branch := (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
    //  file prog.linked.opt.aa, line 58
    // (opcode == BZ)
    ==[EQ_u8_u1_130_inst] (opcode R_BZ_129_wire_constant) (EQ_u8_u1_130_wire)   $flowthrough 
    $delay EQ_u8_u1_130_inst 0
    // ( ~ is_rs1_neg )
    ~ [NOT_u1_u1_132_inst] (is_rs1_neg) (NOT_u1_u1_132_wire)   $flowthrough
    $delay NOT_u1_u1_132_inst 0
    // ((opcode == BZ) & ( ~ is_rs1_neg ))
    &[AND_u1_u1_133_inst] (EQ_u8_u1_130_wire NOT_u1_u1_132_wire) (AND_u1_u1_133_wire)   $flowthrough 
    $delay AND_u1_u1_133_inst 0
    // (opcode == BN)
    ==[EQ_u8_u1_136_inst] (opcode R_BN_135_wire_constant) (EQ_u8_u1_136_wire)   $flowthrough 
    $delay EQ_u8_u1_136_inst 0
    // ((opcode == BN) & is_rs1_neg)
    &[AND_u1_u1_138_inst] (EQ_u8_u1_136_wire is_rs1_neg) (AND_u1_u1_138_wire)   $flowthrough 
    $delay AND_u1_u1_138_inst 0
    // (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
    |[OR_u1_u1_139_inst] (AND_u1_u1_133_wire AND_u1_u1_138_wire) (is_Branch_140)   $flowthrough 
    $delay OR_u1_u1_139_inst 0
    // 	$volatile normalFlow := ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
    //  file prog.linked.opt.aa, line 59
    // (opcode == CALL)
    ==[EQ_u8_u1_145_inst] (opcode R_CALL_144_wire_constant) (EQ_u8_u1_145_wire)   $flowthrough 
    $delay EQ_u8_u1_145_inst 0
    // (is_Branch | (opcode == CALL))
    |[OR_u1_u1_146_inst] (is_Branch_140 EQ_u8_u1_145_wire) (OR_u1_u1_146_wire)   $flowthrough 
    $delay OR_u1_u1_146_inst 0
    // (opcode == JMP)
    ==[EQ_u8_u1_149_inst] (opcode R_JMP_148_wire_constant) (EQ_u8_u1_149_wire)   $flowthrough 
    $delay EQ_u8_u1_149_inst 0
    // ((is_Branch | (opcode == CALL)) | (opcode == JMP))
    |[OR_u1_u1_150_inst] (OR_u1_u1_146_wire EQ_u8_u1_149_wire) (OR_u1_u1_150_wire)   $flowthrough 
    $delay OR_u1_u1_150_inst 0
    // ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
    ~ [NOT_u1_u1_151_inst] (OR_u1_u1_150_wire) (normalFlow_152)   $flowthrough
    $delay NOT_u1_u1_151_inst 0
    // 	$volatile addr1 := ( $slice rd1 7 0 ) 
    //  file prog.linked.opt.aa, line 60
    // ( $slice rd1 7 0 ) 
    [:] [slice_155_inst] (rd1 7 0) (addr1_156)  $flowthrough
    $delay slice_155_inst 0
    // 	$volatile addr2 := ( $slice rd2 7 0 ) 
    //  file prog.linked.opt.aa, line 61
    // ( $slice rd2 7 0 ) 
    [:] [slice_159_inst] (rd2 7 0) (addr2_160)  $flowthrough
    $delay slice_159_inst 0
    // 	$volatile n_program_cnt := ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
    //  file prog.linked.opt.aa, line 62
    // (opcode == CALL)
    ==[EQ_u8_u1_164_inst] (opcode R_CALL_163_wire_constant) (EQ_u8_u1_164_wire)   $flowthrough 
    $delay EQ_u8_u1_164_inst 0
    // ( $mux (opcode == CALL) addr1  _b0  ) 
    ? [MUX_167_inst] (EQ_u8_u1_164_wire addr1_156 konst_166_wire_constant) (MUX_167_wire)  $flowthrough
    // (opcode == JMP)
    ==[EQ_u8_u1_170_inst] (opcode R_JMP_169_wire_constant) (EQ_u8_u1_170_wire)   $flowthrough 
    $delay EQ_u8_u1_170_inst 0
    // ( $mux (opcode == JMP) addr1  _b0  ) 
    ? [MUX_173_inst] (EQ_u8_u1_170_wire addr1_156 konst_172_wire_constant) (MUX_173_wire)  $flowthrough
    // (( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) )
    |[OR_u8_u8_174_inst] (MUX_167_wire MUX_173_wire) (OR_u8_u8_174_wire)   $flowthrough 
    $delay OR_u8_u8_174_inst 0
    // (is_Branch == one_1)
    ==[EQ_u1_u1_177_inst] (is_Branch_140 R_one_1_176_wire_constant) (EQ_u1_u1_177_wire)   $flowthrough 
    $delay EQ_u1_u1_177_inst 0
    // ( $mux (is_Branch == one_1) addr2  _b0  ) 
    ? [MUX_180_inst] (EQ_u1_u1_177_wire addr2_160 konst_179_wire_constant) (MUX_180_wire)  $flowthrough
    // (normalFlow == one_1)
    ==[EQ_u1_u1_183_inst] (normalFlow_152 R_one_1_182_wire_constant) (EQ_u1_u1_183_wire)   $flowthrough 
    $delay EQ_u1_u1_183_inst 0
    // (program_cnt + 1 )
    +[ADD_u8_u8_186_inst] (program_cnt konst_185_wire_constant) (ADD_u8_u8_186_wire)   $flowthrough 
    $delay ADD_u8_u8_186_inst 0
    // ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) 
    ? [MUX_188_inst] (EQ_u1_u1_183_wire ADD_u8_u8_186_wire konst_187_wire_constant) (MUX_188_wire)  $flowthrough
    // (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) )
    |[OR_u8_u8_189_inst] (MUX_180_wire MUX_188_wire) (OR_u8_u8_189_wire)   $flowthrough 
    $delay OR_u8_u8_189_inst 0
    // ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
    |[OR_u8_u8_190_inst] (OR_u8_u8_174_wire OR_u8_u8_189_wire) (n_program_cnt)   $flowthrough 
    $delay OR_u8_u8_190_inst 0
  }
  // end data-path
  // 	$volatile is_Branch := (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
  //  file prog.linked.opt.aa, line 58
  // (((opcode == BZ) & ( ~ is_rs1_neg )) | ((opcode == BN) & is_rs1_neg))
  // ((opcode == BZ) & ( ~ is_rs1_neg ))
  // (opcode == BZ)
  // opcode
  // is_rs1_neg
  // ((opcode == BN) & is_rs1_neg)
  // (opcode == BN)
  // opcode
  // is_rs1_neg
  // 	$volatile normalFlow := ( ~ ((is_Branch | (opcode == CALL)) | (opcode == JMP)) )
  //  file prog.linked.opt.aa, line 59
  // ((is_Branch | (opcode == CALL)) | (opcode == JMP))
  // (is_Branch | (opcode == CALL))
  // is_Branch
  // (opcode == CALL)
  // opcode
  // (opcode == JMP)
  // opcode
  // 	$volatile addr1 := ( $slice rd1 7 0 ) 
  //  file prog.linked.opt.aa, line 60
  // rd1
  // 	$volatile addr2 := ( $slice rd2 7 0 ) 
  //  file prog.linked.opt.aa, line 61
  // rd2
  // 	$volatile n_program_cnt := ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
  //  file prog.linked.opt.aa, line 62
  // ((( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) ) | (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) ))
  // (( $mux (opcode == CALL) addr1  _b0  )  | ( $mux (opcode == JMP) addr1  _b0  ) )
  // (opcode == CALL)
  // opcode
  // addr1
  // ( $mux (opcode == CALL) addr1  _b0  ) 
  // (opcode == JMP)
  // opcode
  // addr1
  // ( $mux (opcode == JMP) addr1  _b0  ) 
  // (( $mux (is_Branch == one_1) addr2  _b0  )  | ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) )
  // (is_Branch == one_1)
  // is_Branch
  // addr2
  // ( $mux (is_Branch == one_1) addr2  _b0  ) 
  // (normalFlow == one_1)
  // normalFlow
  // (program_cnt + 1 )
  // program_cnt
  // ( $mux (normalFlow == one_1) (program_cnt + 1 )  _b0  ) 
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 64
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 64
  }
  // end data-path
}
$module [memory_daemon] 
{
  // pipe-declarations for block %memory_daemon
  //  file prog.linked.opt.aa, line 71
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_199_to_assign_stmt_208] 
    {
      // start:  	data_in_mem := mem_in// bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 76
      // Source expression
      // mem_in
      $T[RPIPE_mem_in_198_sample_start_] 
      $T[RPIPE_mem_in_198_sample_completed_] 
      $T[RPIPE_mem_in_198_update_start_] 
      $T[RPIPE_mem_in_198_update_completed_] 
      ;;[RPIPE_mem_in_198_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_mem_in_198_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_mem_in_198_sample_start_ &-> (RPIPE_mem_in_198_Sample)
      RPIPE_mem_in_198_sample_completed_ <-& (RPIPE_mem_in_198_Sample)
      RPIPE_mem_in_198_update_start_ <-& (RPIPE_mem_in_198_sample_completed_)
      RPIPE_mem_in_198_update_start_ &-> (RPIPE_mem_in_198_Update)
      RPIPE_mem_in_198_update_completed_ <-& (RPIPE_mem_in_198_Update)
      // Target expression
      // (as target) data_in_mem
      // start: WAR dependencies for data_in_mem
      // done: WAR dependencies for data_in_mem
      // end:  	data_in_mem := mem_in// bits of buffering = 64. 
      // start:  	data_in := ( $slice data_in_mem 31 0 ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 77
      // Source expression
      // ( $slice data_in_mem 31 0 ) 
      $T[slice_202_sample_start_] 
      $T[slice_202_sample_completed_] 
      $T[slice_202_update_start_] 
      $T[slice_202_update_completed_] 
      // data_in_mem
      // start: Forward dependencies from data_in_mem to transition slice_202_sample_start_
      slice_202_sample_start_ <-& (RPIPE_mem_in_198_update_completed_)
      // done: Forward dependencies from data_in_mem to transition slice_202_sample_start_
      ;;[slice_202_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_202_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_202_sample_start_ &-> (slice_202_Sample)
      slice_202_sample_completed_ <-& (slice_202_Sample)
      slice_202_sample_completed_ &-> ($null)
      slice_202_update_start_ &-> (slice_202_Update)
      slice_202_update_completed_ <-& (slice_202_Update)
      // Target expression
      // (as target) data_in
      // start: WAR dependencies for data_in
      // done: WAR dependencies for data_in
      // end:  	data_in := ( $slice data_in_mem 31 0 ) // bits of buffering = 32. 
      // start:  	mem_out := (data_in + 1 )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 78
      // Source expression
      // (data_in + 1 )
      $T[ADD_u32_u32_207_sample_start_] 
      $T[ADD_u32_u32_207_sample_completed_] 
      $T[ADD_u32_u32_207_update_start_] 
      $T[ADD_u32_u32_207_update_completed_] 
      // data_in
      // start: Forward dependencies from data_in to transition ADD_u32_u32_207_sample_start_
      ADD_u32_u32_207_sample_start_ <-& (slice_202_update_completed_)
      // done: Forward dependencies from data_in to transition ADD_u32_u32_207_sample_start_
      ;;[ADD_u32_u32_207_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_207_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_207_sample_start_ &-> (ADD_u32_u32_207_Sample)
      ADD_u32_u32_207_sample_completed_ <-& (ADD_u32_u32_207_Sample)
      ADD_u32_u32_207_sample_completed_ &-> ($null)
      ADD_u32_u32_207_update_start_ &-> (ADD_u32_u32_207_Update)
      ADD_u32_u32_207_update_completed_ <-& (ADD_u32_u32_207_Update)
      // Target expression
      // (as target) mem_out
      $T[WPIPE_mem_out_204_sample_start_] 
      $T[WPIPE_mem_out_204_sample_completed_] 
      $T[WPIPE_mem_out_204_update_start_] 
      $T[WPIPE_mem_out_204_update_completed_] 
      ;;[WPIPE_mem_out_204_Sample] 
      {
        // pipe write sample-start mem_out
        $T [req] $T [ack] 
      }
      ;;[WPIPE_mem_out_204_Update] 
      {
        // pipe write update (complete) mem_out
        $T [req] $T [ack] 
      }
      WPIPE_mem_out_204_sample_start_ &-> (WPIPE_mem_out_204_Sample)
      WPIPE_mem_out_204_sample_completed_ <-& (WPIPE_mem_out_204_Sample)
      WPIPE_mem_out_204_update_start_ <-& (WPIPE_mem_out_204_sample_completed_)
      WPIPE_mem_out_204_update_start_ &-> (WPIPE_mem_out_204_Update)
      WPIPE_mem_out_204_update_completed_ <-& (WPIPE_mem_out_204_Update)
      // start: Forward dependencies from (data_in + 1 ) to transition WPIPE_mem_out_204_sample_start_
      WPIPE_mem_out_204_sample_start_ <-& (ADD_u32_u32_207_update_completed_)
      // done: Forward dependencies from (data_in + 1 ) to transition WPIPE_mem_out_204_sample_start_
      // end:  	mem_out := (data_in + 1 )// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe mem_in
      // read-dependencies for pipe mem_in
      // write-dependencies for pipe mem_in
      // signal dependencies for mem_in
      // pipe read/write dependencies for pipe mem_out
      // read-dependencies for pipe mem_out
      // write-dependencies for pipe mem_out
      // signal dependencies for mem_out
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memory_daemon
    //  file prog.linked.opt.aa, line 71
    // 1 
    $constant $W[konst_206_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 	data_in_mem := mem_in// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 76
    // data_in_mem
    $W[data_in_mem_199] : $int<64>
    // 	data_in := ( $slice data_in_mem 31 0 ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // data_in
    $W[data_in_203] : $int<32>
    // 	mem_out := (data_in + 1 )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 78
    // (data_in + 1 )
    $intermediate $W[ADD_u32_u32_207_wire] : $int<32>
    // mem_out
    // 	data_in_mem := mem_in// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 76
    // mem_in
    $ioport $in [RPIPE_mem_in_198_inst] (mem_in) (data_in_mem_199) 
    $buffering $out RPIPE_mem_in_198_inst data_in_mem_199 1
    // 	data_in := ( $slice data_in_mem 31 0 ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // ( $slice data_in_mem 31 0 ) 
    [:] [slice_202_inst] (data_in_mem_199 31 0) (data_in_203) 
    $buffering  $out slice_202_inst data_in_203 1
    $delay slice_202_inst 1
    // 	mem_out := (data_in + 1 )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 78
    // (data_in + 1 )
    +[ADD_u32_u32_207_inst] (data_in_203 konst_206_wire_constant) (ADD_u32_u32_207_wire)   
    $buffering  $out ADD_u32_u32_207_inst ADD_u32_u32_207_wire 1
    $delay ADD_u32_u32_207_inst 1
    // mem_out
    $ioport $out [WPIPE_mem_out_204_inst]  (ADD_u32_u32_207_wire) (mem_out) 
  }
  // end data-path
  // 	data_in_mem := mem_in// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 76
  // mem_in
  RPIPE_mem_in_198_inst <=> (assign_stmt_199_to_assign_stmt_208/RPIPE_mem_in_198_Sample/rr assign_stmt_199_to_assign_stmt_208/RPIPE_mem_in_198_Update/cr) (assign_stmt_199_to_assign_stmt_208/RPIPE_mem_in_198_Sample/ra assign_stmt_199_to_assign_stmt_208/RPIPE_mem_in_198_Update/ca)
  // 	data_in := ( $slice data_in_mem 31 0 ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 77
  // data_in_mem
  // ( $slice data_in_mem 31 0 ) 
  slice_202_inst <=> (assign_stmt_199_to_assign_stmt_208/slice_202_Sample/rr assign_stmt_199_to_assign_stmt_208/slice_202_Update/cr) (assign_stmt_199_to_assign_stmt_208/slice_202_Sample/ra assign_stmt_199_to_assign_stmt_208/slice_202_Update/ca)
  // 	mem_out := (data_in + 1 )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 78
  // (data_in + 1 )
  // data_in
  ADD_u32_u32_207_inst <=> (assign_stmt_199_to_assign_stmt_208/ADD_u32_u32_207_Sample/rr assign_stmt_199_to_assign_stmt_208/ADD_u32_u32_207_Update/cr) (assign_stmt_199_to_assign_stmt_208/ADD_u32_u32_207_Sample/ra assign_stmt_199_to_assign_stmt_208/ADD_u32_u32_207_Update/ca)
  // mem_out
  WPIPE_mem_out_204_inst <=> (assign_stmt_199_to_assign_stmt_208/WPIPE_mem_out_204_Sample/req assign_stmt_199_to_assign_stmt_208/WPIPE_mem_out_204_Update/req) (assign_stmt_199_to_assign_stmt_208/WPIPE_mem_out_204_Sample/ack assign_stmt_199_to_assign_stmt_208/WPIPE_mem_out_204_Update/ack)
}
$pipeline $depth 7 $buffering 1 $module [registerFileModule] 
{
  $in valid_1:$int<1>
  // can point into 
  addr_1:$int<8>
  // can point into 
  valid_2:$int<1>
  // can point into 
  addr_2:$int<8>
  // can point into 
  valid_w:$int<1>
  // can point into 
  addr_w:$int<8>
  // can point into 
  data_to_be_written:$int<32>
  // can point into 
  $out read_data_1:$int<32>
  // can point into 
  read_data_2:$int<32>
  // can point into 
  // pipe-declarations for block %registerFileModule
  //  file prog.linked.opt.aa, line 80
  // memory-space 0 is written into.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_224_to_assign_stmt_252] 
    {
      $T [valid_1_update_enable] 
      $T [valid_1_update_enable_out] 
      valid_1_update_enable &-> (valid_1_update_enable_out)
      $null &-> (valid_1_update_enable)
      $T [addr_1_update_enable] 
      $T [addr_1_update_enable_out] 
      addr_1_update_enable &-> (addr_1_update_enable_out)
      $null &-> (addr_1_update_enable)
      $T [valid_2_update_enable] 
      $T [valid_2_update_enable_out] 
      valid_2_update_enable &-> (valid_2_update_enable_out)
      $null &-> (valid_2_update_enable)
      $T [addr_2_update_enable] 
      $T [addr_2_update_enable_out] 
      addr_2_update_enable &-> (addr_2_update_enable_out)
      $null &-> (addr_2_update_enable)
      $T [valid_w_update_enable] 
      $T [valid_w_update_enable_out] 
      valid_w_update_enable &-> (valid_w_update_enable_out)
      $null &-> (valid_w_update_enable)
      $T [addr_w_update_enable] 
      $T [addr_w_update_enable_out] 
      addr_w_update_enable &-> (addr_w_update_enable_out)
      $null &-> (addr_w_update_enable)
      $T [data_to_be_written_update_enable] 
      $T [data_to_be_written_update_enable_out] 
      data_to_be_written_update_enable &-> (data_to_be_written_update_enable_out)
      $null &-> (data_to_be_written_update_enable)
      $T [read_data_1_update_enable] 
      $T [read_data_1_update_enable_in] 
      $null &-> (read_data_1_update_enable)
      $null <-& (read_data_1_update_enable_in) 
      $null &-> (read_data_1_update_enable)
      read_data_1_update_enable <-& (read_data_1_update_enable_in) 
      $T [read_data_2_update_enable] 
      $T [read_data_2_update_enable_in] 
      $null &-> (read_data_2_update_enable)
      $null <-& (read_data_2_update_enable_in) 
      $null &-> (read_data_2_update_enable)
      read_data_2_update_enable <-& (read_data_2_update_enable_in) 
      // start:  	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 85
      // Guard expression 
      // valid_1
      // Source expression
      // reg_array[addr_1]
      $T[array_obj_ref_223_base_address_calculated] 
      $T[array_obj_ref_223_sample_start_] 
      $T[array_obj_ref_223_sample_completed_] 
      $T[array_obj_ref_223_update_start_] 
      $T[array_obj_ref_223_update_completed_] 
      $T[array_obj_ref_223_word_address_calculated] 
      $T[array_obj_ref_223_root_address_calculated] 
      $T[array_obj_ref_223_offset_calculated] 
      $T[array_obj_ref_223_index_resized_0] 
      $T[array_obj_ref_223_index_scaled_0] 
      $T[array_obj_ref_223_index_computed_0] 
      // addr_1
      // start: Forward dependencies from addr_1 to transition array_obj_ref_223_index_computed_0
      array_obj_ref_223_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_1 to transition array_obj_ref_223_index_computed_0
      ;;[array_obj_ref_223_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_223_index_computed_0 &-> (array_obj_ref_223_index_resize_0)
      array_obj_ref_223_index_resized_0 <-& (array_obj_ref_223_index_resize_0)
      ;;[array_obj_ref_223_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_223_index_resized_0 &-> (array_obj_ref_223_index_scale_0)
      array_obj_ref_223_index_scaled_0 <-& (array_obj_ref_223_index_scale_0)
      ;;[array_obj_ref_223_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_223_index_scaled_0 &-> (array_obj_ref_223_final_index_sum_regn)
      array_obj_ref_223_offset_calculated <-& (array_obj_ref_223_final_index_sum_regn)
      ;;[array_obj_ref_223_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_223_offset_calculated &-> (array_obj_ref_223_base_plus_offset)
      array_obj_ref_223_root_address_calculated <-& (array_obj_ref_223_base_plus_offset)
      ;;[array_obj_ref_223_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_223_root_address_calculated &-> (array_obj_ref_223_word_addrgen)
      array_obj_ref_223_word_address_calculated <-& (array_obj_ref_223_word_addrgen)
      ;;[array_obj_ref_223_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_223_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_223_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_223_sample_start_ <-& (array_obj_ref_223_word_address_calculated)
      // reenable-joins
      addr_1_update_enable o<-& (array_obj_ref_223_sample_completed_ 0)
      array_obj_ref_223_sample_start_ &-> (array_obj_ref_223_Sample)
      array_obj_ref_223_sample_completed_ <-& (array_obj_ref_223_Sample)
      array_obj_ref_223_sample_completed_ &-> ($null)
      array_obj_ref_223_update_start_ &-> (array_obj_ref_223_Update)
      array_obj_ref_223_update_completed_ <-& (array_obj_ref_223_Update)
      // self-release: 
      array_obj_ref_223_sample_start_ o<-& (array_obj_ref_223_sample_completed_ 1)
      $null &-> (array_obj_ref_223_update_start_)
      array_obj_ref_223_update_start_ o<-& (array_obj_ref_223_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_223 with guard R_valid_1_220
      array_obj_ref_223_sample_start_ <-& ($entry)
      // RAW reenables for valid_1
      valid_1_update_enable o<-& (array_obj_ref_223_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data_1
      // start: WAR dependencies for t_read_data_1
      // done: WAR dependencies for t_read_data_1
      // end:  	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
      // start:  	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 86
      // Guard expression 
      // valid_2
      // Source expression
      // reg_array[addr_2]
      $T[array_obj_ref_228_base_address_calculated] 
      $T[array_obj_ref_228_sample_start_] 
      $T[array_obj_ref_228_sample_completed_] 
      $T[array_obj_ref_228_update_start_] 
      $T[array_obj_ref_228_update_completed_] 
      $T[array_obj_ref_228_word_address_calculated] 
      $T[array_obj_ref_228_root_address_calculated] 
      $T[array_obj_ref_228_offset_calculated] 
      $T[array_obj_ref_228_index_resized_0] 
      $T[array_obj_ref_228_index_scaled_0] 
      $T[array_obj_ref_228_index_computed_0] 
      // addr_2
      // start: Forward dependencies from addr_2 to transition array_obj_ref_228_index_computed_0
      array_obj_ref_228_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_2 to transition array_obj_ref_228_index_computed_0
      ;;[array_obj_ref_228_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_228_index_computed_0 &-> (array_obj_ref_228_index_resize_0)
      array_obj_ref_228_index_resized_0 <-& (array_obj_ref_228_index_resize_0)
      ;;[array_obj_ref_228_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_228_index_resized_0 &-> (array_obj_ref_228_index_scale_0)
      array_obj_ref_228_index_scaled_0 <-& (array_obj_ref_228_index_scale_0)
      ;;[array_obj_ref_228_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_228_index_scaled_0 &-> (array_obj_ref_228_final_index_sum_regn)
      array_obj_ref_228_offset_calculated <-& (array_obj_ref_228_final_index_sum_regn)
      ;;[array_obj_ref_228_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_228_offset_calculated &-> (array_obj_ref_228_base_plus_offset)
      array_obj_ref_228_root_address_calculated <-& (array_obj_ref_228_base_plus_offset)
      ;;[array_obj_ref_228_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_228_root_address_calculated &-> (array_obj_ref_228_word_addrgen)
      array_obj_ref_228_word_address_calculated <-& (array_obj_ref_228_word_addrgen)
      ;;[array_obj_ref_228_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_228_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_228_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_228_sample_start_ <-& (array_obj_ref_228_word_address_calculated)
      // reenable-joins
      addr_2_update_enable o<-& (array_obj_ref_228_sample_completed_ 0)
      array_obj_ref_228_sample_start_ &-> (array_obj_ref_228_Sample)
      array_obj_ref_228_sample_completed_ <-& (array_obj_ref_228_Sample)
      array_obj_ref_228_sample_completed_ &-> ($null)
      array_obj_ref_228_update_start_ &-> (array_obj_ref_228_Update)
      array_obj_ref_228_update_completed_ <-& (array_obj_ref_228_Update)
      // self-release: 
      array_obj_ref_228_sample_start_ o<-& (array_obj_ref_228_sample_completed_ 1)
      $null &-> (array_obj_ref_228_update_start_)
      array_obj_ref_228_update_start_ o<-& (array_obj_ref_228_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_228 with guard R_valid_2_225
      array_obj_ref_228_sample_start_ <-& ($entry)
      // RAW reenables for valid_2
      valid_2_update_enable o<-& (array_obj_ref_228_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data_2
      // start: WAR dependencies for t_read_data_2
      // done: WAR dependencies for t_read_data_2
      // end:  	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
      // start:  	valid_1_251_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 87
      $T[assign_stmt_232_sample_start_] 
      $T[assign_stmt_232_sample_completed_] 
      $T[assign_stmt_232_update_start_] 
      $T[assign_stmt_232_update_completed_] 
      // Source expression
      // valid_1
      // Target expression
      // (as target) valid_1_251_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_232_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_232_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_232_sample_start_ &-> (assign_stmt_232_Sample)
      assign_stmt_232_sample_completed_ <-& (assign_stmt_232_Sample)
      assign_stmt_232_sample_completed_ &-> ($null)
      assign_stmt_232_update_start_ &-> (assign_stmt_232_Update)
      assign_stmt_232_update_completed_ <-& (assign_stmt_232_Update)
      // start: Forward dependencies from valid_1 to transition assign_stmt_232_sample_start_
      assign_stmt_232_sample_start_ <-& ($entry)
      // done: Forward dependencies from valid_1 to transition assign_stmt_232_sample_start_
      // RAW reenables for valid_1
      valid_1_update_enable o<-& (assign_stmt_232_sample_completed_ 0)
      // self-release: 
      assign_stmt_232_sample_start_ o<-& (assign_stmt_232_sample_completed_ 1)
      $null &-> (assign_stmt_232_update_start_)
      assign_stmt_232_update_start_ o<-& (assign_stmt_232_update_completed_ 0)
      // start: WAR dependencies for valid_1_251_delayed_4_0
      // done: WAR dependencies for valid_1_251_delayed_4_0
      // end:  	valid_1_251_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
      // start:  	read_data_1 := ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 88
      // Source expression
      // ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) 
      $T[MUX_237_sample_start_] 
      $T[MUX_237_sample_completed_] 
      $T[MUX_237_update_start_] 
      $T[MUX_237_update_completed_] 
      // valid_1_251_delayed_4_0
      // t_read_data_1
      // start: Forward dependencies from valid_1_251_delayed_4_0 to transition MUX_237_sample_start_
      MUX_237_sample_start_ <-& (assign_stmt_232_update_completed_)
      // done: Forward dependencies from valid_1_251_delayed_4_0 to transition MUX_237_sample_start_
      // start: Forward dependencies from t_read_data_1 to transition MUX_237_sample_start_
      MUX_237_sample_start_ <-& (array_obj_ref_223_update_completed_)
      // done: Forward dependencies from t_read_data_1 to transition MUX_237_sample_start_
      ;;[MUX_237_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_237_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_237_sample_start_ &-> (MUX_237_start)
      MUX_237_sample_completed_ <-& (MUX_237_start)
      MUX_237_sample_completed_ &-> ($null)
      MUX_237_update_start_ &-> (MUX_237_complete)
      MUX_237_update_completed_ <-& (MUX_237_complete)
      // RAW reenables for valid_1_251_delayed_4_0
      assign_stmt_232_update_start_ o<-& (MUX_237_sample_completed_ 0)
      // RAW reenables for t_read_data_1
      array_obj_ref_223_update_start_ o<-& (MUX_237_sample_completed_ 0)
      // self-release: 
      MUX_237_sample_start_ o<-& (MUX_237_sample_completed_ 1)
      $null &-> (MUX_237_update_start_)
      MUX_237_update_start_ o<-& (MUX_237_update_completed_ 0)
      // Target expression
      // (as target) read_data_1
      // read_data_1
      // write to interface object
      // start: WAR dependencies for read_data_1
      // done: WAR dependencies for read_data_1
      // read_data_1
      // write to interface object
      MUX_237_update_start_ <-& (read_data_1_update_enable)
      // end:  	read_data_1 := ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
      // start:  	valid_2_257_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 89
      $T[assign_stmt_241_sample_start_] 
      $T[assign_stmt_241_sample_completed_] 
      $T[assign_stmt_241_update_start_] 
      $T[assign_stmt_241_update_completed_] 
      // Source expression
      // valid_2
      // Target expression
      // (as target) valid_2_257_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_241_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_241_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_241_sample_start_ &-> (assign_stmt_241_Sample)
      assign_stmt_241_sample_completed_ <-& (assign_stmt_241_Sample)
      assign_stmt_241_sample_completed_ &-> ($null)
      assign_stmt_241_update_start_ &-> (assign_stmt_241_Update)
      assign_stmt_241_update_completed_ <-& (assign_stmt_241_Update)
      // start: Forward dependencies from valid_2 to transition assign_stmt_241_sample_start_
      assign_stmt_241_sample_start_ <-& ($entry)
      // done: Forward dependencies from valid_2 to transition assign_stmt_241_sample_start_
      // RAW reenables for valid_2
      valid_2_update_enable o<-& (assign_stmt_241_sample_completed_ 0)
      // self-release: 
      assign_stmt_241_sample_start_ o<-& (assign_stmt_241_sample_completed_ 1)
      $null &-> (assign_stmt_241_update_start_)
      assign_stmt_241_update_start_ o<-& (assign_stmt_241_update_completed_ 0)
      // start: WAR dependencies for valid_2_257_delayed_4_0
      // done: WAR dependencies for valid_2_257_delayed_4_0
      // end:  	valid_2_257_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
      // start:  	read_data_2 := ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 90
      // Source expression
      // ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) 
      $T[MUX_246_sample_start_] 
      $T[MUX_246_sample_completed_] 
      $T[MUX_246_update_start_] 
      $T[MUX_246_update_completed_] 
      // valid_2_257_delayed_4_0
      // t_read_data_2
      // start: Forward dependencies from valid_2_257_delayed_4_0 to transition MUX_246_sample_start_
      MUX_246_sample_start_ <-& (assign_stmt_241_update_completed_)
      // done: Forward dependencies from valid_2_257_delayed_4_0 to transition MUX_246_sample_start_
      // start: Forward dependencies from t_read_data_2 to transition MUX_246_sample_start_
      MUX_246_sample_start_ <-& (array_obj_ref_228_update_completed_)
      // done: Forward dependencies from t_read_data_2 to transition MUX_246_sample_start_
      ;;[MUX_246_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_246_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_246_sample_start_ &-> (MUX_246_start)
      MUX_246_sample_completed_ <-& (MUX_246_start)
      MUX_246_sample_completed_ &-> ($null)
      MUX_246_update_start_ &-> (MUX_246_complete)
      MUX_246_update_completed_ <-& (MUX_246_complete)
      // RAW reenables for valid_2_257_delayed_4_0
      assign_stmt_241_update_start_ o<-& (MUX_246_sample_completed_ 0)
      // RAW reenables for t_read_data_2
      array_obj_ref_228_update_start_ o<-& (MUX_246_sample_completed_ 0)
      // self-release: 
      MUX_246_sample_start_ o<-& (MUX_246_sample_completed_ 1)
      $null &-> (MUX_246_update_start_)
      MUX_246_update_start_ o<-& (MUX_246_update_completed_ 0)
      // Target expression
      // (as target) read_data_2
      // read_data_2
      // write to interface object
      // start: WAR dependencies for read_data_2
      // done: WAR dependencies for read_data_2
      // read_data_2
      // write to interface object
      MUX_246_update_start_ <-& (read_data_2_update_enable)
      // end:  	read_data_2 := ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
      // start:  	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 91
      // Guard expression 
      // valid_w
      // Source expression
      // data_to_be_written
      // Target expression
      // reg_array[addr_w]
      $T[array_obj_ref_250_sample_start_] 
      $T[array_obj_ref_250_sample_completed_] 
      $T[array_obj_ref_250_update_start_] 
      $T[array_obj_ref_250_update_completed_] 
      $T[array_obj_ref_250_word_address_calculated] 
      $T[array_obj_ref_250_root_address_calculated] 
      $T[array_obj_ref_250_offset_calculated] 
      $T[array_obj_ref_250_index_resized_0] 
      $T[array_obj_ref_250_index_scaled_0] 
      $T[array_obj_ref_250_index_computed_0] 
      // addr_w
      // start: Forward dependencies from addr_w to transition array_obj_ref_250_index_computed_0
      array_obj_ref_250_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr_w to transition array_obj_ref_250_index_computed_0
      ;;[array_obj_ref_250_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_250_index_computed_0 &-> (array_obj_ref_250_index_resize_0)
      array_obj_ref_250_index_resized_0 <-& (array_obj_ref_250_index_resize_0)
      ;;[array_obj_ref_250_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_250_index_resized_0 &-> (array_obj_ref_250_index_scale_0)
      array_obj_ref_250_index_scaled_0 <-& (array_obj_ref_250_index_scale_0)
      ;;[array_obj_ref_250_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_250_index_scaled_0 &-> (array_obj_ref_250_final_index_sum_regn)
      array_obj_ref_250_offset_calculated <-& (array_obj_ref_250_final_index_sum_regn)
      ;;[array_obj_ref_250_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_250_offset_calculated &-> (array_obj_ref_250_base_plus_offset)
      array_obj_ref_250_root_address_calculated <-& (array_obj_ref_250_base_plus_offset)
      ;;[array_obj_ref_250_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_250_root_address_calculated &-> (array_obj_ref_250_word_addrgen)
      array_obj_ref_250_word_address_calculated <-& (array_obj_ref_250_word_addrgen)
      ;;[array_obj_ref_250_Sample] 
      {
        ;;[array_obj_ref_250_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_250_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_250_sample_start_ <-& (array_obj_ref_250_word_address_calculated)
      // reenable-joins
      addr_w_update_enable o<-& (array_obj_ref_250_sample_completed_ 0)
      array_obj_ref_250_sample_start_ &-> (array_obj_ref_250_Sample)
      array_obj_ref_250_sample_completed_ <-& (array_obj_ref_250_Sample)
      array_obj_ref_250_sample_completed_ &-> ($null)
      array_obj_ref_250_update_start_ &-> (array_obj_ref_250_Update)
      array_obj_ref_250_update_completed_ <-& (array_obj_ref_250_Update)
      // Guard dependency for expression array_obj_ref_250 with guard R_valid_w_248
      array_obj_ref_250_sample_start_ <-& ($entry)
      // RAW reenables for valid_w
      valid_w_update_enable o<-& (array_obj_ref_250_sample_completed_ 0)
      // self-release: 
      array_obj_ref_250_sample_start_ o<-& (array_obj_ref_250_sample_completed_ 1)
      $null &-> (array_obj_ref_250_update_start_)
      array_obj_ref_250_update_start_ o<-& (array_obj_ref_250_update_completed_ 0)
      // start: Forward dependencies from data_to_be_written to transition array_obj_ref_250_sample_start_
      array_obj_ref_250_sample_start_ <-& ($entry)
      // done: Forward dependencies from data_to_be_written to transition array_obj_ref_250_sample_start_
      // RAW reenables for data_to_be_written
      data_to_be_written_update_enable o<-& (array_obj_ref_250_sample_completed_ 0)
      // end:  	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_223 load
      //  array_obj_ref_228 load
      //  array_obj_ref_250 store
      $T [array_obj_ref_223_array_obj_ref_250_delay] $delay
      // array_obj_ref_223(load) -> array_obj_ref_250(store)
      array_obj_ref_250_sample_start_ <-& (array_obj_ref_223_array_obj_ref_250_delay)
      array_obj_ref_223_array_obj_ref_250_delay <-& (array_obj_ref_223_sample_completed_)
      $T [array_obj_ref_228_array_obj_ref_250_delay] $delay
      // array_obj_ref_228(load) -> array_obj_ref_250(store)
      array_obj_ref_250_sample_start_ <-& (array_obj_ref_228_array_obj_ref_250_delay)
      array_obj_ref_228_array_obj_ref_250_delay <-& (array_obj_ref_228_sample_completed_)
      // reenable across ring for memory space memory_space_0
      $T[ring_reenable_memory_space_0] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_0 <-& (array_obj_ref_250_sample_completed_)
      array_obj_ref_223_sample_start_ o<-& (ring_reenable_memory_space_0 1)
      array_obj_ref_228_sample_start_ o<-& (ring_reenable_memory_space_0 1)
    }
    ( read_data_1_update_enable_in read_data_2_update_enable_in)
    ( valid_1_update_enable_out addr_1_update_enable_out valid_2_update_enable_out addr_2_update_enable_out valid_w_update_enable_out addr_w_update_enable_out data_to_be_written_update_enable_out)
    $P [valid_1_update_enable] 
    $P [addr_1_update_enable] 
    $P [valid_2_update_enable] 
    $P [addr_2_update_enable] 
    $P [valid_w_update_enable] 
    $P [addr_w_update_enable] 
    $P [data_to_be_written_update_enable] 
    $P [read_data_1_update_enable] 
    $P [read_data_2_update_enable] 
    $bind valid_1_update_enable <= assign_stmt_224_to_assign_stmt_252 : valid_1_update_enable_out
    $bind addr_1_update_enable <= assign_stmt_224_to_assign_stmt_252 : addr_1_update_enable_out
    $bind valid_2_update_enable <= assign_stmt_224_to_assign_stmt_252 : valid_2_update_enable_out
    $bind addr_2_update_enable <= assign_stmt_224_to_assign_stmt_252 : addr_2_update_enable_out
    $bind valid_w_update_enable <= assign_stmt_224_to_assign_stmt_252 : valid_w_update_enable_out
    $bind addr_w_update_enable <= assign_stmt_224_to_assign_stmt_252 : addr_w_update_enable_out
    $bind data_to_be_written_update_enable <= assign_stmt_224_to_assign_stmt_252 : data_to_be_written_update_enable_out
    $bind read_data_1_update_enable => assign_stmt_224_to_assign_stmt_252 : read_data_1_update_enable_in
    $bind read_data_2_update_enable => assign_stmt_224_to_assign_stmt_252 : read_data_2_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %registerFileModule
    //  file prog.linked.opt.aa, line 80
    // reg_array[addr_1]
    $constant $W[array_obj_ref_223_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_223_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_223_word_offset_0] : $int<6> := _b000000// 0
    // reg_array[addr_2]
    $constant $W[array_obj_ref_228_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_228_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_228_word_offset_0] : $int<6> := _b000000// 0
    // ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) 
    // 0 
    $constant $W[konst_236_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) 
    // 0 
    $constant $W[konst_245_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // reg_array[addr_w]
    $constant $W[array_obj_ref_250_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_250_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_250_word_offset_0] : $int<6> := _b000000// 0
    // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 85
    // reg_array[addr_1]
    $intermediate $W[R_addr_1_222_resized] : $int<6>
    $intermediate $W[R_addr_1_222_scaled] : $int<6>
    $intermediate $W[array_obj_ref_223_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_223_root_address] : $int<6>
    $W[array_obj_ref_223_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_223_data_0] : $int<32>
    // t_read_data_1
    $W[t_read_data_1_224] : $int<32>
    // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 86
    // reg_array[addr_2]
    $intermediate $W[R_addr_2_227_resized] : $int<6>
    $intermediate $W[R_addr_2_227_scaled] : $int<6>
    $intermediate $W[array_obj_ref_228_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_228_root_address] : $int<6>
    $W[array_obj_ref_228_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_228_data_0] : $int<32>
    // t_read_data_2
    $W[t_read_data_2_229] : $int<32>
    // 	valid_1_251_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 87
    // valid_1_251_delayed_4_0
    $W[valid_1_251_delayed_4_0_232] : $int<1>
    // 	read_data_1 := ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 88
    // read_data_1
    // 	valid_2_257_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 89
    // valid_2_257_delayed_4_0
    $W[valid_2_257_delayed_4_0_241] : $int<1>
    // 	read_data_2 := ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 90
    // read_data_2
    // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 91
    // reg_array[addr_w]
    $intermediate $W[R_addr_w_249_resized] : $int<6>
    $intermediate $W[R_addr_w_249_scaled] : $int<6>
    $intermediate $W[array_obj_ref_250_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_250_root_address] : $int<6>
    $W[array_obj_ref_250_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_250_data_0] : $int<32>
    // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 85
    // reg_array[addr_1]
    &/ [array_obj_ref_223_index_0_resize] (addr_1) (R_addr_1_222_resized) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_223_index_0_rename] (R_addr_1_222_resized) (R_addr_1_222_scaled) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_223_index_offset] (R_addr_1_222_scaled) (array_obj_ref_223_final_offset) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_223_root_address_inst] (array_obj_ref_223_final_offset) (array_obj_ref_223_root_address) $guard ( valid_1 ) 
    $flowthrough 
    &/ [array_obj_ref_223_addr_0] (array_obj_ref_223_root_address) (array_obj_ref_223_word_address_0) $guard ( valid_1 ) 
    $flowthrough 
    $load [array_obj_ref_223_load_0] $from memory_space_0 (array_obj_ref_223_word_address_0) (array_obj_ref_223_data_0) $guard ( valid_1 ) 
    $delay array_obj_ref_223_load_0 4
    &/ [array_obj_ref_223_gather_scatter] (array_obj_ref_223_data_0) (t_read_data_1_224) $guard ( valid_1 ) 
    $flowthrough 
    // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 86
    // reg_array[addr_2]
    &/ [array_obj_ref_228_index_0_resize] (addr_2) (R_addr_2_227_resized) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_228_index_0_rename] (R_addr_2_227_resized) (R_addr_2_227_scaled) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_228_index_offset] (R_addr_2_227_scaled) (array_obj_ref_228_final_offset) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_228_root_address_inst] (array_obj_ref_228_final_offset) (array_obj_ref_228_root_address) $guard ( valid_2 ) 
    $flowthrough 
    &/ [array_obj_ref_228_addr_0] (array_obj_ref_228_root_address) (array_obj_ref_228_word_address_0) $guard ( valid_2 ) 
    $flowthrough 
    $load [array_obj_ref_228_load_0] $from memory_space_0 (array_obj_ref_228_word_address_0) (array_obj_ref_228_data_0) $guard ( valid_2 ) 
    $delay array_obj_ref_228_load_0 4
    &/ [array_obj_ref_228_gather_scatter] (array_obj_ref_228_data_0) (t_read_data_2_229) $guard ( valid_2 ) 
    $flowthrough 
    // 	valid_1_251_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 87
    # := [W_valid_1_251_delayed_4_0_230_inst] (valid_1) (valid_1_251_delayed_4_0_232)   
    $buffering  $out W_valid_1_251_delayed_4_0_230_inst valid_1_251_delayed_4_0_232 4
    // 	read_data_1 := ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 88
    // ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) 
    ? [MUX_237_inst] (valid_1_251_delayed_4_0_232 t_read_data_1_224 konst_236_wire_constant) (read_data_1) 
    $buffering  $out MUX_237_inst read_data_1 1
    // 	valid_2_257_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 89
    # := [W_valid_2_257_delayed_4_0_239_inst] (valid_2) (valid_2_257_delayed_4_0_241)   
    $buffering  $out W_valid_2_257_delayed_4_0_239_inst valid_2_257_delayed_4_0_241 4
    // 	read_data_2 := ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 90
    // ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) 
    ? [MUX_246_inst] (valid_2_257_delayed_4_0_241 t_read_data_2_229 konst_245_wire_constant) (read_data_2) 
    $buffering  $out MUX_246_inst read_data_2 1
    // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 91
    // reg_array[addr_w]
    &/ [array_obj_ref_250_index_0_resize] (addr_w) (R_addr_w_249_resized) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_250_index_0_rename] (R_addr_w_249_resized) (R_addr_w_249_scaled) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_250_index_offset] (R_addr_w_249_scaled) (array_obj_ref_250_final_offset) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_250_root_address_inst] (array_obj_ref_250_final_offset) (array_obj_ref_250_root_address) $guard ( valid_w ) 
    $flowthrough 
    &/ [array_obj_ref_250_addr_0] (array_obj_ref_250_root_address) (array_obj_ref_250_word_address_0) $guard ( valid_w ) 
    $flowthrough 
    $store [array_obj_ref_250_store_0] $to memory_space_0 (array_obj_ref_250_word_address_0 array_obj_ref_250_data_0) $guard ( valid_w ) 
    $delay array_obj_ref_250_store_0 4
    &/ [array_obj_ref_250_gather_scatter] (data_to_be_written) (array_obj_ref_250_data_0) $guard ( valid_w ) 
    $flowthrough 
  }
  // end data-path
  // 	$guard (valid_1) t_read_data_1 := reg_array[addr_1]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 85
  // reg_array[addr_1]
  // addr_1
  array_obj_ref_223_index_0_resize <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_index_resize_0/index_resize_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_index_resize_0/index_resize_ack)
  array_obj_ref_223_index_0_rename <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_index_scale_0/scale_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_index_scale_0/scale_rename_ack)
  array_obj_ref_223_index_offset <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_final_index_sum_regn/req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_final_index_sum_regn/ack)
  array_obj_ref_223_root_address_inst <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_base_plus_offset/sum_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_base_plus_offset/sum_rename_ack)
  array_obj_ref_223_addr_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_word_addrgen/root_register_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_word_addrgen/root_register_ack)
  array_obj_ref_223_gather_scatter <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_ack)
  array_obj_ref_223_load_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Sample/word_access_start/word_0/rr assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Update/word_access_complete/word_0/cr) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Sample/word_access_start/word_0/ra assign_stmt_224_to_assign_stmt_252/array_obj_ref_223_Update/word_access_complete/word_0/ca)
  // 	$guard (valid_2) t_read_data_2 := reg_array[addr_2]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 86
  // reg_array[addr_2]
  // addr_2
  array_obj_ref_228_index_0_resize <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_index_resize_0/index_resize_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_index_resize_0/index_resize_ack)
  array_obj_ref_228_index_0_rename <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_index_scale_0/scale_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_index_scale_0/scale_rename_ack)
  array_obj_ref_228_index_offset <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_final_index_sum_regn/req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_final_index_sum_regn/ack)
  array_obj_ref_228_root_address_inst <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_base_plus_offset/sum_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_base_plus_offset/sum_rename_ack)
  array_obj_ref_228_addr_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_word_addrgen/root_register_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_word_addrgen/root_register_ack)
  array_obj_ref_228_gather_scatter <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Update/array_obj_ref_228_Merge/merge_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Update/array_obj_ref_228_Merge/merge_ack)
  array_obj_ref_228_load_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Sample/word_access_start/word_0/rr assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Update/word_access_complete/word_0/cr) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Sample/word_access_start/word_0/ra assign_stmt_224_to_assign_stmt_252/array_obj_ref_228_Update/word_access_complete/word_0/ca)
  // 	valid_1_251_delayed_4_0 := valid_1 $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 87
  // valid_1
  W_valid_1_251_delayed_4_0_230_inst <=> (assign_stmt_224_to_assign_stmt_252/assign_stmt_232_Sample/req assign_stmt_224_to_assign_stmt_252/assign_stmt_232_Update/req) (assign_stmt_224_to_assign_stmt_252/assign_stmt_232_Sample/ack assign_stmt_224_to_assign_stmt_252/assign_stmt_232_Update/ack)
  // 	read_data_1 := ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 88
  // valid_1_251_delayed_4_0
  // t_read_data_1
  // ( $mux valid_1_251_delayed_4_0 t_read_data_1  0  ) 
  MUX_237_inst <=> (assign_stmt_224_to_assign_stmt_252/MUX_237_start/req assign_stmt_224_to_assign_stmt_252/MUX_237_complete/req) (assign_stmt_224_to_assign_stmt_252/MUX_237_start/ack assign_stmt_224_to_assign_stmt_252/MUX_237_complete/ack)
  // 	valid_2_257_delayed_4_0 := valid_2 $buffering 4// bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 89
  // valid_2
  W_valid_2_257_delayed_4_0_239_inst <=> (assign_stmt_224_to_assign_stmt_252/assign_stmt_241_Sample/req assign_stmt_224_to_assign_stmt_252/assign_stmt_241_Update/req) (assign_stmt_224_to_assign_stmt_252/assign_stmt_241_Sample/ack assign_stmt_224_to_assign_stmt_252/assign_stmt_241_Update/ack)
  // 	read_data_2 := ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 90
  // valid_2_257_delayed_4_0
  // t_read_data_2
  // ( $mux valid_2_257_delayed_4_0 t_read_data_2  0  ) 
  MUX_246_inst <=> (assign_stmt_224_to_assign_stmt_252/MUX_246_start/req assign_stmt_224_to_assign_stmt_252/MUX_246_complete/req) (assign_stmt_224_to_assign_stmt_252/MUX_246_start/ack assign_stmt_224_to_assign_stmt_252/MUX_246_complete/ack)
  // 	$guard (valid_w) reg_array[addr_w] := data_to_be_written// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 91
  // data_to_be_written
  // addr_w
  array_obj_ref_250_index_0_resize <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_index_resize_0/index_resize_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_index_resize_0/index_resize_ack)
  array_obj_ref_250_index_0_rename <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_index_scale_0/scale_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_index_scale_0/scale_rename_ack)
  array_obj_ref_250_index_offset <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_final_index_sum_regn/req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_final_index_sum_regn/ack)
  array_obj_ref_250_root_address_inst <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_base_plus_offset/sum_rename_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_base_plus_offset/sum_rename_ack)
  array_obj_ref_250_addr_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_word_addrgen/root_register_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_word_addrgen/root_register_ack)
  array_obj_ref_250_gather_scatter <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Sample/array_obj_ref_250_Split/split_req) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Sample/array_obj_ref_250_Split/split_ack)
  array_obj_ref_250_store_0 <=> (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Sample/word_access_start/word_0/rr assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Update/word_access_complete/word_0/cr) (assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Sample/word_access_start/word_0/ra assign_stmt_224_to_assign_stmt_252/array_obj_ref_250_Update/word_access_complete/word_0/ca)
  $attribute delay => "7"
}
$module [receive_from_uart] 
{
  $out receive_data_from_uart:$int<32>
  // can point into 
  // pipe-declarations for block %receive_from_uart
  //  file prog.linked.opt.aa, line 94
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_258_to_assign_stmt_276] 
    {
      // start:  	in_data0 := in_pipe// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 99
      // Source expression
      // in_pipe
      $T[RPIPE_in_pipe_257_sample_start_] 
      $T[RPIPE_in_pipe_257_sample_completed_] 
      $T[RPIPE_in_pipe_257_update_start_] 
      $T[RPIPE_in_pipe_257_update_completed_] 
      ;;[RPIPE_in_pipe_257_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_in_pipe_257_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_in_pipe_257_sample_start_ &-> (RPIPE_in_pipe_257_Sample)
      RPIPE_in_pipe_257_sample_completed_ <-& (RPIPE_in_pipe_257_Sample)
      RPIPE_in_pipe_257_update_start_ <-& (RPIPE_in_pipe_257_sample_completed_)
      RPIPE_in_pipe_257_update_start_ &-> (RPIPE_in_pipe_257_Update)
      RPIPE_in_pipe_257_update_completed_ <-& (RPIPE_in_pipe_257_Update)
      // Target expression
      // (as target) in_data0
      // start: WAR dependencies for in_data0
      // done: WAR dependencies for in_data0
      // end:  	in_data0 := in_pipe// bits of buffering = 8. 
      // start:  	in_data1 := in_pipe// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 100
      // Source expression
      // in_pipe
      $T[RPIPE_in_pipe_260_sample_start_] 
      $T[RPIPE_in_pipe_260_sample_completed_] 
      $T[RPIPE_in_pipe_260_update_start_] 
      $T[RPIPE_in_pipe_260_update_completed_] 
      ;;[RPIPE_in_pipe_260_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_in_pipe_260_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_in_pipe_260_sample_start_ &-> (RPIPE_in_pipe_260_Sample)
      RPIPE_in_pipe_260_sample_completed_ <-& (RPIPE_in_pipe_260_Sample)
      RPIPE_in_pipe_260_update_start_ <-& (RPIPE_in_pipe_260_sample_completed_)
      RPIPE_in_pipe_260_update_start_ &-> (RPIPE_in_pipe_260_Update)
      RPIPE_in_pipe_260_update_completed_ <-& (RPIPE_in_pipe_260_Update)
      // Target expression
      // (as target) in_data1
      // start: WAR dependencies for in_data1
      // done: WAR dependencies for in_data1
      // end:  	in_data1 := in_pipe// bits of buffering = 8. 
      // start:  	in_data2 := in_pipe// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 101
      // Source expression
      // in_pipe
      $T[RPIPE_in_pipe_263_sample_start_] 
      $T[RPIPE_in_pipe_263_sample_completed_] 
      $T[RPIPE_in_pipe_263_update_start_] 
      $T[RPIPE_in_pipe_263_update_completed_] 
      ;;[RPIPE_in_pipe_263_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_in_pipe_263_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_in_pipe_263_sample_start_ &-> (RPIPE_in_pipe_263_Sample)
      RPIPE_in_pipe_263_sample_completed_ <-& (RPIPE_in_pipe_263_Sample)
      RPIPE_in_pipe_263_update_start_ <-& (RPIPE_in_pipe_263_sample_completed_)
      RPIPE_in_pipe_263_update_start_ &-> (RPIPE_in_pipe_263_Update)
      RPIPE_in_pipe_263_update_completed_ <-& (RPIPE_in_pipe_263_Update)
      // Target expression
      // (as target) in_data2
      // start: WAR dependencies for in_data2
      // done: WAR dependencies for in_data2
      // end:  	in_data2 := in_pipe// bits of buffering = 8. 
      // start:  	in_data3 := in_pipe// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 102
      // Source expression
      // in_pipe
      $T[RPIPE_in_pipe_266_sample_start_] 
      $T[RPIPE_in_pipe_266_sample_completed_] 
      $T[RPIPE_in_pipe_266_update_start_] 
      $T[RPIPE_in_pipe_266_update_completed_] 
      ;;[RPIPE_in_pipe_266_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_in_pipe_266_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_in_pipe_266_sample_start_ &-> (RPIPE_in_pipe_266_Sample)
      RPIPE_in_pipe_266_sample_completed_ <-& (RPIPE_in_pipe_266_Sample)
      RPIPE_in_pipe_266_update_start_ <-& (RPIPE_in_pipe_266_sample_completed_)
      RPIPE_in_pipe_266_update_start_ &-> (RPIPE_in_pipe_266_Update)
      RPIPE_in_pipe_266_update_completed_ <-& (RPIPE_in_pipe_266_Update)
      // Target expression
      // (as target) in_data3
      // start: WAR dependencies for in_data3
      // done: WAR dependencies for in_data3
      // end:  	in_data3 := in_pipe// bits of buffering = 8. 
      // start:  	receive_data_from_uart := ((in_data0 && in_data1) && (in_data2 && in_data3))// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 103
      // Source expression
      // ((in_data0 && in_data1) && (in_data2 && in_data3))
      $T[CONCAT_u16_u32_275_sample_start_] 
      $T[CONCAT_u16_u32_275_sample_completed_] 
      $T[CONCAT_u16_u32_275_update_start_] 
      $T[CONCAT_u16_u32_275_update_completed_] 
      // (in_data0 && in_data1)
      // in_data0
      // in_data1
      // (in_data2 && in_data3)
      // in_data2
      // in_data3
      // start: Forward dependencies from (in_data0 && in_data1) to transition CONCAT_u16_u32_275_sample_start_
      CONCAT_u16_u32_275_sample_start_ <-& (RPIPE_in_pipe_257_update_completed_)
      CONCAT_u16_u32_275_sample_start_ <-& (RPIPE_in_pipe_260_update_completed_)
      // done: Forward dependencies from (in_data0 && in_data1) to transition CONCAT_u16_u32_275_sample_start_
      // start: Forward dependencies from (in_data2 && in_data3) to transition CONCAT_u16_u32_275_sample_start_
      CONCAT_u16_u32_275_sample_start_ <-& (RPIPE_in_pipe_263_update_completed_)
      CONCAT_u16_u32_275_sample_start_ <-& (RPIPE_in_pipe_266_update_completed_)
      // done: Forward dependencies from (in_data2 && in_data3) to transition CONCAT_u16_u32_275_sample_start_
      ;;[CONCAT_u16_u32_275_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u16_u32_275_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u16_u32_275_sample_start_ &-> (CONCAT_u16_u32_275_Sample)
      CONCAT_u16_u32_275_sample_completed_ <-& (CONCAT_u16_u32_275_Sample)
      CONCAT_u16_u32_275_sample_completed_ &-> ($null)
      CONCAT_u16_u32_275_update_start_ &-> (CONCAT_u16_u32_275_Update)
      CONCAT_u16_u32_275_update_completed_ <-& (CONCAT_u16_u32_275_Update)
      // Target expression
      // (as target) receive_data_from_uart
      // receive_data_from_uart
      // write to interface object
      // start: WAR dependencies for receive_data_from_uart
      // done: WAR dependencies for receive_data_from_uart
      // receive_data_from_uart
      // write to interface object
      // end:  	receive_data_from_uart := ((in_data0 && in_data1) && (in_data2 && in_data3))// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe in_pipe
      // read-dependencies for pipe in_pipe
      RPIPE_in_pipe_260_sample_start_ <-& (RPIPE_in_pipe_257_update_completed_)
      RPIPE_in_pipe_263_sample_start_ <-& (RPIPE_in_pipe_260_update_completed_)
      RPIPE_in_pipe_266_sample_start_ <-& (RPIPE_in_pipe_263_update_completed_)
      // write-dependencies for pipe in_pipe
      // signal dependencies for in_pipe
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %receive_from_uart
    //  file prog.linked.opt.aa, line 94
    // 	in_data0 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 99
    // in_data0
    $W[in_data0_258] : $int<8>
    // 	in_data1 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 100
    // in_data1
    $W[in_data1_261] : $int<8>
    // 	in_data2 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 101
    // in_data2
    $W[in_data2_264] : $int<8>
    // 	in_data3 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 102
    // in_data3
    $W[in_data3_267] : $int<8>
    // 	receive_data_from_uart := ((in_data0 && in_data1) && (in_data2 && in_data3))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 103
    // (in_data0 && in_data1)
    $intermediate $W[CONCAT_u8_u16_271_wire] : $int<16>
    // (in_data2 && in_data3)
    $intermediate $W[CONCAT_u8_u16_274_wire] : $int<16>
    // receive_data_from_uart
    // 	in_data0 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 99
    // in_pipe
    $ioport $in [RPIPE_in_pipe_257_inst] (in_pipe) (in_data0_258) 
    $buffering $out RPIPE_in_pipe_257_inst in_data0_258 1
    // 	in_data1 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 100
    // in_pipe
    $ioport $in [RPIPE_in_pipe_260_inst] (in_pipe) (in_data1_261) 
    $buffering $out RPIPE_in_pipe_260_inst in_data1_261 1
    // 	in_data2 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 101
    // in_pipe
    $ioport $in [RPIPE_in_pipe_263_inst] (in_pipe) (in_data2_264) 
    $buffering $out RPIPE_in_pipe_263_inst in_data2_264 1
    // 	in_data3 := in_pipe// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 102
    // in_pipe
    $ioport $in [RPIPE_in_pipe_266_inst] (in_pipe) (in_data3_267) 
    $buffering $out RPIPE_in_pipe_266_inst in_data3_267 1
    // 	receive_data_from_uart := ((in_data0 && in_data1) && (in_data2 && in_data3))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 103
    // (in_data0 && in_data1)
    &&[CONCAT_u8_u16_271_inst] (in_data0_258 in_data1_261) (CONCAT_u8_u16_271_wire)   $flowthrough 
    $delay CONCAT_u8_u16_271_inst 0
    // (in_data2 && in_data3)
    &&[CONCAT_u8_u16_274_inst] (in_data2_264 in_data3_267) (CONCAT_u8_u16_274_wire)   $flowthrough 
    $delay CONCAT_u8_u16_274_inst 0
    // ((in_data0 && in_data1) && (in_data2 && in_data3))
    &&[CONCAT_u16_u32_275_inst] (CONCAT_u8_u16_271_wire CONCAT_u8_u16_274_wire) (receive_data_from_uart)   
    $buffering  $out CONCAT_u16_u32_275_inst receive_data_from_uart 1
    $delay CONCAT_u16_u32_275_inst 1
  }
  // end data-path
  // 	in_data0 := in_pipe// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 99
  // in_pipe
  RPIPE_in_pipe_257_inst <=> (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_257_Sample/rr assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_257_Update/cr) (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_257_Sample/ra assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_257_Update/ca)
  // 	in_data1 := in_pipe// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 100
  // in_pipe
  RPIPE_in_pipe_260_inst <=> (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_260_Sample/rr assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_260_Update/cr) (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_260_Sample/ra assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_260_Update/ca)
  // 	in_data2 := in_pipe// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 101
  // in_pipe
  RPIPE_in_pipe_263_inst <=> (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_263_Sample/rr assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_263_Update/cr) (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_263_Sample/ra assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_263_Update/ca)
  // 	in_data3 := in_pipe// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 102
  // in_pipe
  RPIPE_in_pipe_266_inst <=> (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_266_Sample/rr assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_266_Update/cr) (assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_266_Sample/ra assign_stmt_258_to_assign_stmt_276/RPIPE_in_pipe_266_Update/ca)
  // 	receive_data_from_uart := ((in_data0 && in_data1) && (in_data2 && in_data3))// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 103
  // ((in_data0 && in_data1) && (in_data2 && in_data3))
  // (in_data0 && in_data1)
  // in_data0
  // in_data1
  // (in_data2 && in_data3)
  // in_data2
  // in_data3
  CONCAT_u16_u32_275_inst <=> (assign_stmt_258_to_assign_stmt_276/CONCAT_u16_u32_275_Sample/rr assign_stmt_258_to_assign_stmt_276/CONCAT_u16_u32_275_Update/cr) (assign_stmt_258_to_assign_stmt_276/CONCAT_u16_u32_275_Sample/ra assign_stmt_258_to_assign_stmt_276/CONCAT_u16_u32_275_Update/ca)
}
$module [send_to_uart] 
{
  $in data_to_send:$int<32>
  // can point into 
  // pipe-declarations for block %send_to_uart
  //  file prog.linked.opt.aa, line 105
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_283_to_assign_stmt_307] 
    {
      // start:  	out_data_0 := ( $slice data_to_send 31 24 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 110
      // Source expression
      // ( $slice data_to_send 31 24 ) 
      $T[slice_282_sample_start_] 
      $T[slice_282_sample_completed_] 
      $T[slice_282_update_start_] 
      $T[slice_282_update_completed_] 
      // data_to_send
      // start: Forward dependencies from data_to_send to transition slice_282_sample_start_
      // done: Forward dependencies from data_to_send to transition slice_282_sample_start_
      ;;[slice_282_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_282_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_282_sample_start_ &-> (slice_282_Sample)
      slice_282_sample_completed_ <-& (slice_282_Sample)
      slice_282_sample_completed_ &-> ($null)
      slice_282_update_start_ &-> (slice_282_Update)
      slice_282_update_completed_ <-& (slice_282_Update)
      // Target expression
      // (as target) out_data_0
      // start: WAR dependencies for out_data_0
      // done: WAR dependencies for out_data_0
      // end:  	out_data_0 := ( $slice data_to_send 31 24 ) // bits of buffering = 8. 
      // start:  	out_data_1 := ( $slice data_to_send 23 16 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 111
      // Source expression
      // ( $slice data_to_send 23 16 ) 
      $T[slice_286_sample_start_] 
      $T[slice_286_sample_completed_] 
      $T[slice_286_update_start_] 
      $T[slice_286_update_completed_] 
      // data_to_send
      // start: Forward dependencies from data_to_send to transition slice_286_sample_start_
      // done: Forward dependencies from data_to_send to transition slice_286_sample_start_
      ;;[slice_286_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_286_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_286_sample_start_ &-> (slice_286_Sample)
      slice_286_sample_completed_ <-& (slice_286_Sample)
      slice_286_sample_completed_ &-> ($null)
      slice_286_update_start_ &-> (slice_286_Update)
      slice_286_update_completed_ <-& (slice_286_Update)
      // Target expression
      // (as target) out_data_1
      // start: WAR dependencies for out_data_1
      // done: WAR dependencies for out_data_1
      // end:  	out_data_1 := ( $slice data_to_send 23 16 ) // bits of buffering = 8. 
      // start:  	out_data_2 := ( $slice data_to_send 15 8 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 112
      // Source expression
      // ( $slice data_to_send 15 8 ) 
      $T[slice_290_sample_start_] 
      $T[slice_290_sample_completed_] 
      $T[slice_290_update_start_] 
      $T[slice_290_update_completed_] 
      // data_to_send
      // start: Forward dependencies from data_to_send to transition slice_290_sample_start_
      // done: Forward dependencies from data_to_send to transition slice_290_sample_start_
      ;;[slice_290_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_290_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_290_sample_start_ &-> (slice_290_Sample)
      slice_290_sample_completed_ <-& (slice_290_Sample)
      slice_290_sample_completed_ &-> ($null)
      slice_290_update_start_ &-> (slice_290_Update)
      slice_290_update_completed_ <-& (slice_290_Update)
      // Target expression
      // (as target) out_data_2
      // start: WAR dependencies for out_data_2
      // done: WAR dependencies for out_data_2
      // end:  	out_data_2 := ( $slice data_to_send 15 8 ) // bits of buffering = 8. 
      // start:  	out_data_3 := ( $slice data_to_send 7 0 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 113
      // Source expression
      // ( $slice data_to_send 7 0 ) 
      $T[slice_294_sample_start_] 
      $T[slice_294_sample_completed_] 
      $T[slice_294_update_start_] 
      $T[slice_294_update_completed_] 
      // data_to_send
      // start: Forward dependencies from data_to_send to transition slice_294_sample_start_
      // done: Forward dependencies from data_to_send to transition slice_294_sample_start_
      ;;[slice_294_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_294_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_294_sample_start_ &-> (slice_294_Sample)
      slice_294_sample_completed_ <-& (slice_294_Sample)
      slice_294_sample_completed_ &-> ($null)
      slice_294_update_start_ &-> (slice_294_Update)
      slice_294_update_completed_ <-& (slice_294_Update)
      // Target expression
      // (as target) out_data_3
      // start: WAR dependencies for out_data_3
      // done: WAR dependencies for out_data_3
      // end:  	out_data_3 := ( $slice data_to_send 7 0 ) // bits of buffering = 8. 
      // start:  	out_pipe := out_data_0// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 114
      // Source expression
      // out_data_0
      // Target expression
      // (as target) out_pipe
      $T[WPIPE_out_pipe_296_sample_start_] 
      $T[WPIPE_out_pipe_296_sample_completed_] 
      $T[WPIPE_out_pipe_296_update_start_] 
      $T[WPIPE_out_pipe_296_update_completed_] 
      ;;[WPIPE_out_pipe_296_Sample] 
      {
        // pipe write sample-start out_pipe
        $T [req] $T [ack] 
      }
      ;;[WPIPE_out_pipe_296_Update] 
      {
        // pipe write update (complete) out_pipe
        $T [req] $T [ack] 
      }
      WPIPE_out_pipe_296_sample_start_ &-> (WPIPE_out_pipe_296_Sample)
      WPIPE_out_pipe_296_sample_completed_ <-& (WPIPE_out_pipe_296_Sample)
      WPIPE_out_pipe_296_update_start_ <-& (WPIPE_out_pipe_296_sample_completed_)
      WPIPE_out_pipe_296_update_start_ &-> (WPIPE_out_pipe_296_Update)
      WPIPE_out_pipe_296_update_completed_ <-& (WPIPE_out_pipe_296_Update)
      // start: Forward dependencies from out_data_0 to transition WPIPE_out_pipe_296_sample_start_
      WPIPE_out_pipe_296_sample_start_ <-& (slice_282_update_completed_)
      // done: Forward dependencies from out_data_0 to transition WPIPE_out_pipe_296_sample_start_
      // end:  	out_pipe := out_data_0// bits of buffering = 8. 
      // start:  	out_pipe := out_data_1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 115
      // Source expression
      // out_data_1
      // Target expression
      // (as target) out_pipe
      $T[WPIPE_out_pipe_299_sample_start_] 
      $T[WPIPE_out_pipe_299_sample_completed_] 
      $T[WPIPE_out_pipe_299_update_start_] 
      $T[WPIPE_out_pipe_299_update_completed_] 
      ;;[WPIPE_out_pipe_299_Sample] 
      {
        // pipe write sample-start out_pipe
        $T [req] $T [ack] 
      }
      ;;[WPIPE_out_pipe_299_Update] 
      {
        // pipe write update (complete) out_pipe
        $T [req] $T [ack] 
      }
      WPIPE_out_pipe_299_sample_start_ &-> (WPIPE_out_pipe_299_Sample)
      WPIPE_out_pipe_299_sample_completed_ <-& (WPIPE_out_pipe_299_Sample)
      WPIPE_out_pipe_299_update_start_ <-& (WPIPE_out_pipe_299_sample_completed_)
      WPIPE_out_pipe_299_update_start_ &-> (WPIPE_out_pipe_299_Update)
      WPIPE_out_pipe_299_update_completed_ <-& (WPIPE_out_pipe_299_Update)
      // start: Forward dependencies from out_data_1 to transition WPIPE_out_pipe_299_sample_start_
      WPIPE_out_pipe_299_sample_start_ <-& (slice_286_update_completed_)
      // done: Forward dependencies from out_data_1 to transition WPIPE_out_pipe_299_sample_start_
      // end:  	out_pipe := out_data_1// bits of buffering = 8. 
      // start:  	out_pipe := out_data_2// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 116
      // Source expression
      // out_data_2
      // Target expression
      // (as target) out_pipe
      $T[WPIPE_out_pipe_302_sample_start_] 
      $T[WPIPE_out_pipe_302_sample_completed_] 
      $T[WPIPE_out_pipe_302_update_start_] 
      $T[WPIPE_out_pipe_302_update_completed_] 
      ;;[WPIPE_out_pipe_302_Sample] 
      {
        // pipe write sample-start out_pipe
        $T [req] $T [ack] 
      }
      ;;[WPIPE_out_pipe_302_Update] 
      {
        // pipe write update (complete) out_pipe
        $T [req] $T [ack] 
      }
      WPIPE_out_pipe_302_sample_start_ &-> (WPIPE_out_pipe_302_Sample)
      WPIPE_out_pipe_302_sample_completed_ <-& (WPIPE_out_pipe_302_Sample)
      WPIPE_out_pipe_302_update_start_ <-& (WPIPE_out_pipe_302_sample_completed_)
      WPIPE_out_pipe_302_update_start_ &-> (WPIPE_out_pipe_302_Update)
      WPIPE_out_pipe_302_update_completed_ <-& (WPIPE_out_pipe_302_Update)
      // start: Forward dependencies from out_data_2 to transition WPIPE_out_pipe_302_sample_start_
      WPIPE_out_pipe_302_sample_start_ <-& (slice_290_update_completed_)
      // done: Forward dependencies from out_data_2 to transition WPIPE_out_pipe_302_sample_start_
      // end:  	out_pipe := out_data_2// bits of buffering = 8. 
      // start:  	out_pipe := out_data_3// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 117
      // Source expression
      // out_data_3
      // Target expression
      // (as target) out_pipe
      $T[WPIPE_out_pipe_305_sample_start_] 
      $T[WPIPE_out_pipe_305_sample_completed_] 
      $T[WPIPE_out_pipe_305_update_start_] 
      $T[WPIPE_out_pipe_305_update_completed_] 
      ;;[WPIPE_out_pipe_305_Sample] 
      {
        // pipe write sample-start out_pipe
        $T [req] $T [ack] 
      }
      ;;[WPIPE_out_pipe_305_Update] 
      {
        // pipe write update (complete) out_pipe
        $T [req] $T [ack] 
      }
      WPIPE_out_pipe_305_sample_start_ &-> (WPIPE_out_pipe_305_Sample)
      WPIPE_out_pipe_305_sample_completed_ <-& (WPIPE_out_pipe_305_Sample)
      WPIPE_out_pipe_305_update_start_ <-& (WPIPE_out_pipe_305_sample_completed_)
      WPIPE_out_pipe_305_update_start_ &-> (WPIPE_out_pipe_305_Update)
      WPIPE_out_pipe_305_update_completed_ <-& (WPIPE_out_pipe_305_Update)
      // start: Forward dependencies from out_data_3 to transition WPIPE_out_pipe_305_sample_start_
      WPIPE_out_pipe_305_sample_start_ <-& (slice_294_update_completed_)
      // done: Forward dependencies from out_data_3 to transition WPIPE_out_pipe_305_sample_start_
      // end:  	out_pipe := out_data_3// bits of buffering = 8. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe out_pipe
      // read-dependencies for pipe out_pipe
      // write-dependencies for pipe out_pipe
      WPIPE_out_pipe_299_sample_start_ <-& (WPIPE_out_pipe_296_update_completed_)
      WPIPE_out_pipe_302_sample_start_ <-& (WPIPE_out_pipe_299_update_completed_)
      WPIPE_out_pipe_305_sample_start_ <-& (WPIPE_out_pipe_302_update_completed_)
      // signal dependencies for out_pipe
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %send_to_uart
    //  file prog.linked.opt.aa, line 105
    // 	out_data_0 := ( $slice data_to_send 31 24 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 110
    // out_data_0
    $W[out_data_0_283] : $int<8>
    // 	out_data_1 := ( $slice data_to_send 23 16 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 111
    // out_data_1
    $W[out_data_1_287] : $int<8>
    // 	out_data_2 := ( $slice data_to_send 15 8 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 112
    // out_data_2
    $W[out_data_2_291] : $int<8>
    // 	out_data_3 := ( $slice data_to_send 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 113
    // out_data_3
    $W[out_data_3_295] : $int<8>
    // 	out_pipe := out_data_0// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 114
    // out_pipe
    // 	out_pipe := out_data_1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 115
    // out_pipe
    // 	out_pipe := out_data_2// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 116
    // out_pipe
    // 	out_pipe := out_data_3// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 117
    // out_pipe
    // 	out_data_0 := ( $slice data_to_send 31 24 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 110
    // ( $slice data_to_send 31 24 ) 
    [:] [slice_282_inst] (data_to_send 31 24) (out_data_0_283) 
    $buffering  $out slice_282_inst out_data_0_283 1
    $delay slice_282_inst 1
    // 	out_data_1 := ( $slice data_to_send 23 16 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 111
    // ( $slice data_to_send 23 16 ) 
    [:] [slice_286_inst] (data_to_send 23 16) (out_data_1_287) 
    $buffering  $out slice_286_inst out_data_1_287 1
    $delay slice_286_inst 1
    // 	out_data_2 := ( $slice data_to_send 15 8 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 112
    // ( $slice data_to_send 15 8 ) 
    [:] [slice_290_inst] (data_to_send 15 8) (out_data_2_291) 
    $buffering  $out slice_290_inst out_data_2_291 1
    $delay slice_290_inst 1
    // 	out_data_3 := ( $slice data_to_send 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 113
    // ( $slice data_to_send 7 0 ) 
    [:] [slice_294_inst] (data_to_send 7 0) (out_data_3_295) 
    $buffering  $out slice_294_inst out_data_3_295 1
    $delay slice_294_inst 1
    // 	out_pipe := out_data_0// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 114
    // out_pipe
    $ioport $out [WPIPE_out_pipe_296_inst]  (out_data_0_283) (out_pipe) 
    // 	out_pipe := out_data_1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 115
    // out_pipe
    $ioport $out [WPIPE_out_pipe_299_inst]  (out_data_1_287) (out_pipe) 
    // 	out_pipe := out_data_2// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 116
    // out_pipe
    $ioport $out [WPIPE_out_pipe_302_inst]  (out_data_2_291) (out_pipe) 
    // 	out_pipe := out_data_3// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 117
    // out_pipe
    $ioport $out [WPIPE_out_pipe_305_inst]  (out_data_3_295) (out_pipe) 
  }
  // end data-path
  // 	out_data_0 := ( $slice data_to_send 31 24 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 110
  // data_to_send
  // ( $slice data_to_send 31 24 ) 
  slice_282_inst <=> (assign_stmt_283_to_assign_stmt_307/slice_282_Sample/rr assign_stmt_283_to_assign_stmt_307/slice_282_Update/cr) (assign_stmt_283_to_assign_stmt_307/slice_282_Sample/ra assign_stmt_283_to_assign_stmt_307/slice_282_Update/ca)
  // 	out_data_1 := ( $slice data_to_send 23 16 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 111
  // data_to_send
  // ( $slice data_to_send 23 16 ) 
  slice_286_inst <=> (assign_stmt_283_to_assign_stmt_307/slice_286_Sample/rr assign_stmt_283_to_assign_stmt_307/slice_286_Update/cr) (assign_stmt_283_to_assign_stmt_307/slice_286_Sample/ra assign_stmt_283_to_assign_stmt_307/slice_286_Update/ca)
  // 	out_data_2 := ( $slice data_to_send 15 8 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 112
  // data_to_send
  // ( $slice data_to_send 15 8 ) 
  slice_290_inst <=> (assign_stmt_283_to_assign_stmt_307/slice_290_Sample/rr assign_stmt_283_to_assign_stmt_307/slice_290_Update/cr) (assign_stmt_283_to_assign_stmt_307/slice_290_Sample/ra assign_stmt_283_to_assign_stmt_307/slice_290_Update/ca)
  // 	out_data_3 := ( $slice data_to_send 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 113
  // data_to_send
  // ( $slice data_to_send 7 0 ) 
  slice_294_inst <=> (assign_stmt_283_to_assign_stmt_307/slice_294_Sample/rr assign_stmt_283_to_assign_stmt_307/slice_294_Update/cr) (assign_stmt_283_to_assign_stmt_307/slice_294_Sample/ra assign_stmt_283_to_assign_stmt_307/slice_294_Update/ca)
  // 	out_pipe := out_data_0// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 114
  // out_data_0
  // out_pipe
  WPIPE_out_pipe_296_inst <=> (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_296_Sample/req assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_296_Update/req) (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_296_Sample/ack assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_296_Update/ack)
  // 	out_pipe := out_data_1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 115
  // out_data_1
  // out_pipe
  WPIPE_out_pipe_299_inst <=> (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_299_Sample/req assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_299_Update/req) (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_299_Sample/ack assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_299_Update/ack)
  // 	out_pipe := out_data_2// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 116
  // out_data_2
  // out_pipe
  WPIPE_out_pipe_302_inst <=> (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_302_Sample/req assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_302_Update/req) (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_302_Sample/ack assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_302_Update/ack)
  // 	out_pipe := out_data_3// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 117
  // out_data_3
  // out_pipe
  WPIPE_out_pipe_305_inst <=> (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_305_Sample/req assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_305_Update/req) (assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_305_Sample/ack assign_stmt_283_to_assign_stmt_307/WPIPE_out_pipe_305_Update/ack)
}
$module [processor] 
{
  // pipe-declarations for block %processor
  //  file prog.linked.opt.aa, line 119
  // pipe-declarations for block %processor%check_start
  //  file prog.linked.opt.aa, line 124
  // pipe-declarations for block %processor%check_start%
  //  file prog.linked.opt.aa, line 126
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_310] // Branch Block  file prog.linked.opt.aa, line 124
    {
      $P [branch_block_stmt_310__entry__]
      branch_block_stmt_310__entry__ <-| ($entry)
      $P [branch_block_stmt_310__exit__]
      branch_block_stmt_310__exit__ |-> ($exit)
      $P [merge_stmt_311__entry__] 
      $P [merge_stmt_311__exit__] 
      $P [assign_stmt_314__entry__] 
      $P [assign_stmt_314__exit__] 
      $P [if_stmt_315__entry__] 
      $P [if_stmt_315__exit__] 
      ::[assign_stmt_314] 
      {
        // start:  		cmd := start_processor// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 128
        $T[assign_stmt_314_sample_start_] 
        $T[assign_stmt_314_sample_completed_] 
        $T[assign_stmt_314_update_start_] 
        $T[assign_stmt_314_update_completed_] 
        // Source expression
        // start_processor
        $T[RPIPE_start_processor_313_sample_start_] 
        $T[RPIPE_start_processor_313_sample_completed_] 
        $T[RPIPE_start_processor_313_update_start_] 
        $T[RPIPE_start_processor_313_update_completed_] 
        ;;[RPIPE_start_processor_313_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_start_processor_313_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_start_processor_313_sample_start_ &-> (RPIPE_start_processor_313_Sample)
        RPIPE_start_processor_313_sample_completed_ <-& (RPIPE_start_processor_313_Sample)
        RPIPE_start_processor_313_update_start_ <-& (RPIPE_start_processor_313_sample_completed_)
        RPIPE_start_processor_313_update_start_ &-> (RPIPE_start_processor_313_Update)
        RPIPE_start_processor_313_update_completed_ <-& (RPIPE_start_processor_313_Update)
        // Target expression
        // (as target) cmd
        // both source and target are implicit: use interlock 
        // Interlock 
        ;;[assign_stmt_314_Sample] 
        {
          $T [req] $T [ack] // interlock-sample.
        }
        ;;[assign_stmt_314_Update] 
        {
          $T [req] $T [ack] // interlock-update.
        }
        assign_stmt_314_sample_start_ &-> (assign_stmt_314_Sample)
        assign_stmt_314_sample_completed_ <-& (assign_stmt_314_Sample)
        assign_stmt_314_sample_completed_ &-> ($null)
        assign_stmt_314_update_start_ &-> (assign_stmt_314_Update)
        assign_stmt_314_update_completed_ <-& (assign_stmt_314_Update)
        // start: Forward dependencies from start_processor to transition assign_stmt_314_sample_start_
        // special case... expr is signal read
        assign_stmt_314_sample_start_ <-& (RPIPE_start_processor_313_update_completed_)
        // start: WAR dependencies for cmd
        // done: WAR dependencies for cmd
        // end:  		cmd := start_processor// bits of buffering = 8. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe start_processor
        // read-dependencies for pipe start_processor
        // write-dependencies for pipe start_processor
        // signal dependencies for start_processor
      }
      assign_stmt_314__entry__ |-> (assign_stmt_314)
      assign_stmt_314__exit__ <-| (assign_stmt_314)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_315_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_315__entry__ |-> (if_stmt_315_dead_link)
      if_stmt_315__exit__ <-| (if_stmt_315_dead_link)
      ;;[if_stmt_315_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (cmd == one_8)
        ;;[EQ_u8_u1_318] 
        {
          // binary expression 
          ||[EQ_u8_u1_318_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_315__entry__ |-> (if_stmt_315_eval_test)
      $P [EQ_u8_u1_318_place]
      EQ_u8_u1_318_place <-| (if_stmt_315_eval_test)
      ;;[if_stmt_315_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_315_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_318_place |-> (if_stmt_315_if_link if_stmt_315_else_link)
      $P [branch_block_stmt_319__entry__] 
      $P [branch_block_stmt_319__exit__] 
      $P [check_for_start]
      <>[branch_block_stmt_319] // Branch Block  file prog.linked.opt.aa, line 130
      {
        $P [branch_block_stmt_319__entry__]
        branch_block_stmt_319__entry__ <-| ($entry)
        $P [branch_block_stmt_319__exit__]
        branch_block_stmt_319__exit__ |-> ($exit)
        $P [do_while_stmt_320__entry__] 
        $P [do_while_stmt_320__exit__] 
        // do-while-statement  
        //  file prog.linked.opt.aa, line 132
        <o> [do_while_stmt_320]  $depth 20 $buffering 2 
        {
          $P[do_while_stmt_320__entry__] 
          $P[do_while_stmt_320__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_320_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_322
            // 				$phi program_cnt := 				  _b00000000  $on   $entry 				  n_program_cnt $on   $loopback 
            // type of target is $uint<8>
            $T[phi_stmt_322_sample_start_] 
            $T[phi_stmt_322_sample_completed_] 
            $T[phi_stmt_322_update_start_] 
            $T[phi_stmt_322_update_completed_] 
            $T[phi_stmt_322_sample_start__ps] 
            phi_stmt_322_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_322_sample_completed__ps] 
            phi_stmt_322_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_322_update_start__ps] 
            phi_stmt_322_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_322_update_completed__ps] 
            phi_stmt_322_update_completed_ <-& (phi_stmt_322_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_322_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_322_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_322_update_start_)
            $T[phi_stmt_322_loopback_trigger] 
            phi_stmt_322_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_322_loopback_sample_req] 
            $T[phi_stmt_322_loopback_sample_req_ps] 
            phi_stmt_322_loopback_sample_req <-& (phi_stmt_322_loopback_sample_req_ps)
            phi_stmt_322_loopback_sample_req &-> ($null)
            $T[phi_stmt_322_entry_trigger] 
            phi_stmt_322_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_322_entry_sample_req] 
            $T[phi_stmt_322_entry_sample_req_ps] 
            phi_stmt_322_entry_sample_req <-& (phi_stmt_322_entry_sample_req_ps)
            phi_stmt_322_entry_sample_req &-> ($null)
            phi_stmt_322_update_start_ o<-& (phi_stmt_322_update_completed_ 0)
            phi_stmt_322_sample_start_ o<-& (phi_stmt_322_sample_completed_ 1)
            $T[phi_stmt_322_merged_reqs] 
            $T[phi_stmt_322_phi_mux_ack] 
            $T[phi_stmt_322_phi_mux_ack_ps] 
            phi_stmt_322_phi_mux_ack_ps <-& (phi_stmt_322_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_322_update_completed_)
            $T[konst_324_sample_start__ps] 
            $T[konst_324_sample_completed__ps] 
            $T[konst_324_update_start__ps] 
            $T[konst_324_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[konst_324_sample_start_] 
            $T[konst_324_sample_completed_] 
            konst_324_sample_completed_ <-& (konst_324_sample_start_)
            $T[konst_324_update_start_] 
            $T [konst_324_update_completed_] $delay 
            konst_324_update_completed_ <-& (konst_324_update_start_)
            // Phi start dependency for implicit/constant alternative.
            konst_324_sample_start_ <-& (konst_324_sample_start__ps)
            konst_324_update_start_ <-& (konst_324_update_start__ps)
            // Phi complete dependency.
            konst_324_sample_completed__ps <-& (konst_324_sample_completed_)
            konst_324_update_completed__ps <-& (konst_324_update_completed_)
            $T[R_n_program_cnt_325_sample_start__ps] 
            $T[R_n_program_cnt_325_sample_completed__ps] 
            $T[R_n_program_cnt_325_update_start__ps] 
            $T[R_n_program_cnt_325_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_program_cnt_325_sample_start_] 
            $T[R_n_program_cnt_325_sample_completed_] 
            $T[R_n_program_cnt_325_update_start_] 
            $T[R_n_program_cnt_325_update_completed_] 
            ;;[R_n_program_cnt_325_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_program_cnt_325_sample_start_ &-> (R_n_program_cnt_325_Sample)
            R_n_program_cnt_325_sample_completed_ <-& (R_n_program_cnt_325_Sample)
            ;;[R_n_program_cnt_325_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_program_cnt_325_update_start_ &-> (R_n_program_cnt_325_Update)
            R_n_program_cnt_325_update_completed_ <-& (R_n_program_cnt_325_Update)
            // RAW reenables for n_program_cnt
            // Phi start dependency for implicit/constant alternative.
            R_n_program_cnt_325_sample_start_ <-& (R_n_program_cnt_325_sample_start__ps)
            R_n_program_cnt_325_update_start_ <-& (R_n_program_cnt_325_update_start__ps)
            // Phi complete dependency.
            R_n_program_cnt_325_sample_completed__ps <-& (R_n_program_cnt_325_sample_completed_)
            R_n_program_cnt_325_update_completed__ps <-& (R_n_program_cnt_325_update_completed_)
            $phisequencer [ phi_stmt_322_phi_seq] : 
            phi_stmt_322_entry_trigger konst_324_sample_start__ps konst_324_sample_completed__ps konst_324_update_start__ps konst_324_update_completed__ps phi_stmt_322_loopback_trigger R_n_program_cnt_325_sample_start__ps R_n_program_cnt_325_sample_completed__ps R_n_program_cnt_325_update_start__ps R_n_program_cnt_325_update_completed__ps :
            phi_stmt_322_sample_start__ps phi_stmt_322_sample_completed__ps phi_stmt_322_update_start__ps phi_stmt_322_update_completed__ps :
            phi_stmt_322_entry_sample_req_ps phi_stmt_322_loopback_sample_req_ps : 
            phi_stmt_322_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_322
            // start:  PHI statement phi_stmt_326
            // 				$phi carry := 				  zero_32 $on   $entry 				  n_carry $on   $loopback 
            // type of target is $uint<32>
            $T[phi_stmt_326_sample_start_] 
            $T[phi_stmt_326_sample_completed_] 
            $T[phi_stmt_326_update_start_] 
            $T[phi_stmt_326_update_completed_] 
            $T[phi_stmt_326_sample_start__ps] 
            phi_stmt_326_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_326_sample_completed__ps] 
            phi_stmt_326_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_326_update_start__ps] 
            phi_stmt_326_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_326_update_completed__ps] 
            phi_stmt_326_update_completed_ <-& (phi_stmt_326_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_326_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_326_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_326_update_start_)
            $T[phi_stmt_326_loopback_trigger] 
            phi_stmt_326_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_326_loopback_sample_req] 
            $T[phi_stmt_326_loopback_sample_req_ps] 
            phi_stmt_326_loopback_sample_req <-& (phi_stmt_326_loopback_sample_req_ps)
            phi_stmt_326_loopback_sample_req &-> ($null)
            $T[phi_stmt_326_entry_trigger] 
            phi_stmt_326_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_326_entry_sample_req] 
            $T[phi_stmt_326_entry_sample_req_ps] 
            phi_stmt_326_entry_sample_req <-& (phi_stmt_326_entry_sample_req_ps)
            phi_stmt_326_entry_sample_req &-> ($null)
            phi_stmt_326_update_start_ o<-& (phi_stmt_326_update_completed_ 0)
            phi_stmt_326_sample_start_ o<-& (phi_stmt_326_sample_completed_ 1)
            $T[phi_stmt_326_merged_reqs] 
            $T[phi_stmt_326_phi_mux_ack] 
            $T[phi_stmt_326_phi_mux_ack_ps] 
            phi_stmt_326_phi_mux_ack_ps <-& (phi_stmt_326_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_326_update_completed_)
            $T[R_zero_32_328_sample_start__ps] 
            $T[R_zero_32_328_sample_completed__ps] 
            $T[R_zero_32_328_update_start__ps] 
            $T[R_zero_32_328_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[R_zero_32_328_sample_start_] 
            $T[R_zero_32_328_sample_completed_] 
            R_zero_32_328_sample_completed_ <-& (R_zero_32_328_sample_start_)
            $T[R_zero_32_328_update_start_] 
            $T [R_zero_32_328_update_completed_] $delay 
            R_zero_32_328_update_completed_ <-& (R_zero_32_328_update_start_)
            // Phi start dependency for implicit/constant alternative.
            R_zero_32_328_sample_start_ <-& (R_zero_32_328_sample_start__ps)
            R_zero_32_328_update_start_ <-& (R_zero_32_328_update_start__ps)
            // Phi complete dependency.
            R_zero_32_328_sample_completed__ps <-& (R_zero_32_328_sample_completed_)
            R_zero_32_328_update_completed__ps <-& (R_zero_32_328_update_completed_)
            $T[R_n_carry_329_sample_start__ps] 
            $T[R_n_carry_329_sample_completed__ps] 
            $T[R_n_carry_329_update_start__ps] 
            $T[R_n_carry_329_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_n_carry_329_sample_start_] 
            $T[R_n_carry_329_sample_completed_] 
            $T[R_n_carry_329_update_start_] 
            $T[R_n_carry_329_update_completed_] 
            ;;[R_n_carry_329_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_n_carry_329_sample_start_ &-> (R_n_carry_329_Sample)
            R_n_carry_329_sample_completed_ <-& (R_n_carry_329_Sample)
            ;;[R_n_carry_329_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_n_carry_329_update_start_ &-> (R_n_carry_329_Update)
            R_n_carry_329_update_completed_ <-& (R_n_carry_329_Update)
            // RAW reenables for n_carry
            // Phi start dependency for implicit/constant alternative.
            R_n_carry_329_sample_start_ <-& (R_n_carry_329_sample_start__ps)
            R_n_carry_329_update_start_ <-& (R_n_carry_329_update_start__ps)
            // Phi complete dependency.
            R_n_carry_329_sample_completed__ps <-& (R_n_carry_329_sample_completed_)
            R_n_carry_329_update_completed__ps <-& (R_n_carry_329_update_completed_)
            $phisequencer [ phi_stmt_326_phi_seq] : 
            phi_stmt_326_entry_trigger R_zero_32_328_sample_start__ps R_zero_32_328_sample_completed__ps R_zero_32_328_update_start__ps R_zero_32_328_update_completed__ps phi_stmt_326_loopback_trigger R_n_carry_329_sample_start__ps R_n_carry_329_sample_completed__ps R_n_carry_329_update_start__ps R_n_carry_329_update_completed__ps :
            phi_stmt_326_sample_start__ps phi_stmt_326_sample_completed__ps phi_stmt_326_update_start__ps phi_stmt_326_update_completed__ps :
            phi_stmt_326_entry_sample_req_ps phi_stmt_326_loopback_sample_req_ps : 
            phi_stmt_326_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_326
            // start:  				mem_in := ((read_signal && program_cnt) && (zero_23 && zero_32))// bits of buffering = 64. 
            //  file prog.linked.opt.aa, line 140
            // Source expression
            // ((read_signal && program_cnt) && (zero_23 && zero_32))
            $T[CONCAT_u9_u64_338_sample_start_] 
            $T[CONCAT_u9_u64_338_sample_completed_] 
            $T[CONCAT_u9_u64_338_update_start_] 
            $T[CONCAT_u9_u64_338_update_completed_] 
            // (read_signal && program_cnt)
            // program_cnt
            // start: Forward dependencies from (read_signal && program_cnt) to transition CONCAT_u9_u64_338_sample_start_
            CONCAT_u9_u64_338_sample_start_ <-& (phi_stmt_322_update_completed_)
            // done: Forward dependencies from (read_signal && program_cnt) to transition CONCAT_u9_u64_338_sample_start_
            ;;[CONCAT_u9_u64_338_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u9_u64_338_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u9_u64_338_sample_start_ &-> (CONCAT_u9_u64_338_Sample)
            CONCAT_u9_u64_338_sample_completed_ <-& (CONCAT_u9_u64_338_Sample)
            CONCAT_u9_u64_338_sample_completed_ &-> ($null)
            CONCAT_u9_u64_338_update_start_ &-> (CONCAT_u9_u64_338_Update)
            CONCAT_u9_u64_338_update_completed_ <-& (CONCAT_u9_u64_338_Update)
            // RAW reenables for (read_signal && program_cnt)
            phi_stmt_322_update_start_ o<-& (CONCAT_u9_u64_338_sample_completed_ 0)
            // self-release: 
            CONCAT_u9_u64_338_sample_start_ o<-& (CONCAT_u9_u64_338_sample_completed_ 1)
            $null &-> (CONCAT_u9_u64_338_update_start_)
            CONCAT_u9_u64_338_update_start_ o<-& (CONCAT_u9_u64_338_update_completed_ 0)
            // Target expression
            // (as target) mem_in
            $T[WPIPE_mem_in_331_sample_start_] 
            $T[WPIPE_mem_in_331_sample_completed_] 
            $T[WPIPE_mem_in_331_update_start_] 
            $T[WPIPE_mem_in_331_update_completed_] 
            ;;[WPIPE_mem_in_331_Sample] 
            {
              // pipe write sample-start mem_in
              $T [req] $T [ack] 
            }
            ;;[WPIPE_mem_in_331_Update] 
            {
              // pipe write update (complete) mem_in
              $T [req] $T [ack] 
            }
            WPIPE_mem_in_331_sample_start_ &-> (WPIPE_mem_in_331_Sample)
            WPIPE_mem_in_331_sample_completed_ <-& (WPIPE_mem_in_331_Sample)
            WPIPE_mem_in_331_update_start_ <-& (WPIPE_mem_in_331_sample_completed_)
            WPIPE_mem_in_331_update_start_ &-> (WPIPE_mem_in_331_Update)
            WPIPE_mem_in_331_update_completed_ <-& (WPIPE_mem_in_331_Update)
            WPIPE_mem_in_331_sample_start_ o<-& (WPIPE_mem_in_331_update_completed_ 0)
            // start: Forward dependencies from ((read_signal && program_cnt) && (zero_23 && zero_32)) to transition WPIPE_mem_in_331_sample_start_
            WPIPE_mem_in_331_sample_start_ <-& (CONCAT_u9_u64_338_update_completed_)
            // done: Forward dependencies from ((read_signal && program_cnt) && (zero_23 && zero_32)) to transition WPIPE_mem_in_331_sample_start_
            // RAW reenables for ((read_signal && program_cnt) && (zero_23 && zero_32))
            CONCAT_u9_u64_338_update_start_ o<-& (WPIPE_mem_in_331_sample_completed_ 0)
            // end:  				mem_in := ((read_signal && program_cnt) && (zero_23 && zero_32))// bits of buffering = 64. 
            // start:  				instruction := mem_out// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 141
            // Source expression
            // mem_out
            $T[RPIPE_mem_out_341_sample_start_] 
            $T[RPIPE_mem_out_341_sample_completed_] 
            $T[RPIPE_mem_out_341_update_start_] 
            $T[RPIPE_mem_out_341_update_completed_] 
            ;;[RPIPE_mem_out_341_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_mem_out_341_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_mem_out_341_sample_start_ &-> (RPIPE_mem_out_341_Sample)
            RPIPE_mem_out_341_sample_completed_ <-& (RPIPE_mem_out_341_Sample)
            RPIPE_mem_out_341_update_start_ <-& (RPIPE_mem_out_341_sample_completed_)
            RPIPE_mem_out_341_update_start_ &-> (RPIPE_mem_out_341_Update)
            RPIPE_mem_out_341_update_completed_ <-& (RPIPE_mem_out_341_Update)
            RPIPE_mem_out_341_sample_start_ o<-& (RPIPE_mem_out_341_update_completed_ 0)
            // Target expression
            // (as target) instruction
            // start: WAR dependencies for instruction
            // done: WAR dependencies for instruction
            // end:  				instruction := mem_out// bits of buffering = 32. 
            // start: WAR dependencies for opcode
            // done: WAR dependencies for opcode
            // start:  				$volatile opcode := ( $slice instruction 31 24 ) 
            //  file prog.linked.opt.aa, line 142
            // volatile! 
            // Source expression
            // ( $slice instruction 31 24 ) 
            // instruction
            // Target expression
            // (as target) opcode
            // start: WAR dependencies for opcode
            // done: WAR dependencies for opcode
            // end:  				$volatile opcode := ( $slice instruction 31 24 ) 
            // start: WAR dependencies for rs1_imm
            // done: WAR dependencies for rs1_imm
            // start:  				$volatile rs1_imm := ( $slice instruction 23 16 ) 
            //  file prog.linked.opt.aa, line 143
            // volatile! 
            // Source expression
            // ( $slice instruction 23 16 ) 
            // instruction
            // Target expression
            // (as target) rs1_imm
            // start: WAR dependencies for rs1_imm
            // done: WAR dependencies for rs1_imm
            // end:  				$volatile rs1_imm := ( $slice instruction 23 16 ) 
            // start: WAR dependencies for rs2
            // done: WAR dependencies for rs2
            // start:  				$volatile rs2 := ( $slice instruction 15 8 ) 
            //  file prog.linked.opt.aa, line 144
            // volatile! 
            // Source expression
            // ( $slice instruction 15 8 ) 
            // instruction
            // Target expression
            // (as target) rs2
            // start: WAR dependencies for rs2
            // done: WAR dependencies for rs2
            // end:  				$volatile rs2 := ( $slice instruction 15 8 ) 
            // start: WAR dependencies for rd
            // done: WAR dependencies for rd
            // start:  				$volatile rd := ( $slice instruction 7 0 ) 
            //  file prog.linked.opt.aa, line 145
            // volatile! 
            // Source expression
            // ( $slice instruction 7 0 ) 
            // instruction
            // Target expression
            // (as target) rd
            // start: WAR dependencies for rd
            // done: WAR dependencies for rd
            // end:  				$volatile rd := ( $slice instruction 7 0 ) 
            // start: 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
            //  file prog.linked.opt.aa, line 146
            $T[call_stmt_368_sample_start_] 
            $T[call_stmt_368_sample_completed_] 
            $T[call_stmt_368_update_start_] 
            $T[call_stmt_368_update_completed_] 
            // Call input argument 0
            // Call input argument 1
            // rs1_imm
            // Call input argument 2
            // Call input argument 3
            // rs2
            // Call input argument 4
            // Call input argument 5
            // rd
            // Call input argument 6
            // start: Forward dependencies from rs1_imm to transition call_stmt_368_sample_start_
            call_stmt_368_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rs1_imm to transition call_stmt_368_sample_start_
            // RAW reenables for rs1_imm
            RPIPE_mem_out_341_update_start_ o<-& (call_stmt_368_sample_completed_ 0)
            // start: Forward dependencies from rs2 to transition call_stmt_368_sample_start_
            call_stmt_368_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rs2 to transition call_stmt_368_sample_start_
            // RAW reenables for rs2
            RPIPE_mem_out_341_update_start_ o<-& (call_stmt_368_sample_completed_ 0)
            // start: Forward dependencies from rd to transition call_stmt_368_sample_start_
            call_stmt_368_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rd to transition call_stmt_368_sample_start_
            // RAW reenables for rd
            RPIPE_mem_out_341_update_start_ o<-& (call_stmt_368_sample_completed_ 0)
            ;;[call_stmt_368_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_368_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_368_sample_start_ &-> (call_stmt_368_Sample)
            call_stmt_368_sample_completed_ <-& (call_stmt_368_Sample)
            call_stmt_368_sample_completed_ &-> ($null)
            call_stmt_368_update_start_ &-> (call_stmt_368_Update)
            call_stmt_368_update_completed_ <-& (call_stmt_368_Update)
            // Call output argument 0
            // (as target) rd1
            // Call output argument 1
            // (as target) rd2
            // self-release: 
            call_stmt_368_sample_start_ o<-& (call_stmt_368_sample_completed_ 1)
            $null &-> (call_stmt_368_update_start_)
            call_stmt_368_update_start_ o<-& (call_stmt_368_update_completed_ 0)
            // start: WAR dependencies for rd1
            // done: WAR dependencies for rd1
            // start: WAR dependencies for rd2
            // done: WAR dependencies for rd2
            // end: 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
            // start:  				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 ) // bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 147
            // Source expression
            // ( $mux (program_cnt == seven_8) one_32  zero_32 ) 
            $T[MUX_375_sample_start_] 
            $T[MUX_375_sample_completed_] 
            $T[MUX_375_update_start_] 
            $T[MUX_375_update_completed_] 
            // (program_cnt == seven_8)
            // program_cnt
            // start: Forward dependencies from (program_cnt == seven_8) to transition MUX_375_sample_start_
            MUX_375_sample_start_ <-& (phi_stmt_322_update_completed_)
            // done: Forward dependencies from (program_cnt == seven_8) to transition MUX_375_sample_start_
            ;;[MUX_375_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_375_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_375_sample_start_ &-> (MUX_375_start)
            MUX_375_sample_completed_ <-& (MUX_375_start)
            MUX_375_sample_completed_ &-> ($null)
            MUX_375_update_start_ &-> (MUX_375_complete)
            MUX_375_update_completed_ <-& (MUX_375_complete)
            // RAW reenables for (program_cnt == seven_8)
            phi_stmt_322_update_start_ o<-& (MUX_375_sample_completed_ 0)
            // self-release: 
            MUX_375_sample_start_ o<-& (MUX_375_sample_completed_ 1)
            $null &-> (MUX_375_update_start_)
            MUX_375_update_start_ o<-& (MUX_375_update_completed_ 0)
            // Target expression
            // (as target) n_carry
            // start: WAR dependencies for n_carry
            // WAR dependency: Read: n_carry before Write: 				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 ) // bits of buffering = 32. 
            MUX_375_update_start_ <-& (phi_stmt_326_sample_completed_)
            phi_stmt_326_sample_start_ o<-& (MUX_375_update_completed_ 0)
            // WAR dependency: release  Read: n_carry with Write: 				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 ) // bits of buffering = 32. 
            // done: WAR dependencies for n_carry
            // end:  				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 )  $buffering 2// bits of buffering = 64. 
            // start: WAR dependencies for is_rs1_neg
            // done: WAR dependencies for is_rs1_neg
            // start:  				$volatile is_rs1_neg := ( $slice rd1 31 31 ) 
            //  file prog.linked.opt.aa, line 148
            // volatile! 
            // Source expression
            // ( $slice rd1 31 31 ) 
            // rd1
            // Target expression
            // (as target) is_rs1_neg
            // start: WAR dependencies for is_rs1_neg
            // done: WAR dependencies for is_rs1_neg
            // end:  				$volatile is_rs1_neg := ( $slice rd1 31 31 ) 
            // start:  				opcode_400_delayed_7_0 := opcode $buffering 7// bits of buffering = 56. 
            //  file prog.linked.opt.aa, line 149
            $T[assign_stmt_383_sample_start_] 
            $T[assign_stmt_383_sample_completed_] 
            $T[assign_stmt_383_update_start_] 
            $T[assign_stmt_383_update_completed_] 
            // Source expression
            // opcode
            // Target expression
            // (as target) opcode_400_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_383_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_383_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_383_sample_start_ &-> (assign_stmt_383_Sample)
            assign_stmt_383_sample_completed_ <-& (assign_stmt_383_Sample)
            assign_stmt_383_sample_completed_ &-> ($null)
            assign_stmt_383_update_start_ &-> (assign_stmt_383_Update)
            assign_stmt_383_update_completed_ <-& (assign_stmt_383_Update)
            // start: Forward dependencies from opcode to transition assign_stmt_383_sample_start_
            assign_stmt_383_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition assign_stmt_383_sample_start_
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_383_sample_completed_ 0)
            // self-release: 
            assign_stmt_383_sample_start_ o<-& (assign_stmt_383_sample_completed_ 1)
            $null &-> (assign_stmt_383_update_start_)
            assign_stmt_383_update_start_ o<-& (assign_stmt_383_update_completed_ 0)
            // start: WAR dependencies for opcode_400_delayed_7_0
            // done: WAR dependencies for opcode_400_delayed_7_0
            // end:  				opcode_400_delayed_7_0 := opcode $buffering 7// bits of buffering = 56. 
            // start:  				program_cnt_403_delayed_7_0 := program_cnt $buffering 7// bits of buffering = 56. 
            //  file prog.linked.opt.aa, line 150
            $T[assign_stmt_386_sample_start_] 
            $T[assign_stmt_386_sample_completed_] 
            $T[assign_stmt_386_update_start_] 
            $T[assign_stmt_386_update_completed_] 
            // Source expression
            // program_cnt
            // Target expression
            // (as target) program_cnt_403_delayed_7_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_386_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_386_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_386_sample_start_ &-> (assign_stmt_386_Sample)
            assign_stmt_386_sample_completed_ <-& (assign_stmt_386_Sample)
            assign_stmt_386_sample_completed_ &-> ($null)
            assign_stmt_386_update_start_ &-> (assign_stmt_386_Update)
            assign_stmt_386_update_completed_ <-& (assign_stmt_386_Update)
            // start: Forward dependencies from program_cnt to transition assign_stmt_386_sample_start_
            assign_stmt_386_sample_start_ <-& (phi_stmt_322_update_completed_)
            // done: Forward dependencies from program_cnt to transition assign_stmt_386_sample_start_
            // RAW reenables for program_cnt
            phi_stmt_322_update_start_ o<-& (assign_stmt_386_sample_completed_ 0)
            // self-release: 
            assign_stmt_386_sample_start_ o<-& (assign_stmt_386_sample_completed_ 1)
            $null &-> (assign_stmt_386_update_start_)
            assign_stmt_386_update_start_ o<-& (assign_stmt_386_update_completed_ 0)
            // start: WAR dependencies for program_cnt_403_delayed_7_0
            // done: WAR dependencies for program_cnt_403_delayed_7_0
            // end:  				program_cnt_403_delayed_7_0 := program_cnt $buffering 7// bits of buffering = 56. 
            // start: 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt ) 
            //  file prog.linked.opt.aa, line 151
            $T[call_stmt_393_sample_start_] 
            $T[call_stmt_393_sample_completed_] 
            $T[call_stmt_393_update_start_] 
            $T[call_stmt_393_update_completed_] 
            // Call input argument 0
            // opcode_400_delayed_7_0
            // Call input argument 1
            // rd1
            // Call input argument 2
            // rd2
            // Call input argument 3
            // program_cnt_403_delayed_7_0
            // Call input argument 4
            // is_rs1_neg
            // start: Forward dependencies from opcode_400_delayed_7_0 to transition call_stmt_393_sample_start_
            call_stmt_393_sample_start_ <-& (assign_stmt_383_update_completed_)
            // done: Forward dependencies from opcode_400_delayed_7_0 to transition call_stmt_393_sample_start_
            // RAW reenables for opcode_400_delayed_7_0
            assign_stmt_383_update_start_ o<-& (call_stmt_393_sample_completed_ 0)
            // start: Forward dependencies from rd1 to transition call_stmt_393_sample_start_
            call_stmt_393_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from rd1 to transition call_stmt_393_sample_start_
            // RAW reenables for rd1
            call_stmt_368_update_start_ o<-& (call_stmt_393_sample_completed_ 0)
            // start: Forward dependencies from rd2 to transition call_stmt_393_sample_start_
            call_stmt_393_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from rd2 to transition call_stmt_393_sample_start_
            // RAW reenables for rd2
            call_stmt_368_update_start_ o<-& (call_stmt_393_sample_completed_ 0)
            // start: Forward dependencies from program_cnt_403_delayed_7_0 to transition call_stmt_393_sample_start_
            call_stmt_393_sample_start_ <-& (assign_stmt_386_update_completed_)
            // done: Forward dependencies from program_cnt_403_delayed_7_0 to transition call_stmt_393_sample_start_
            // RAW reenables for program_cnt_403_delayed_7_0
            assign_stmt_386_update_start_ o<-& (call_stmt_393_sample_completed_ 0)
            // start: Forward dependencies from is_rs1_neg to transition call_stmt_393_sample_start_
            call_stmt_393_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from is_rs1_neg to transition call_stmt_393_sample_start_
            // RAW reenables for is_rs1_neg
            call_stmt_368_update_start_ o<-& (call_stmt_393_sample_completed_ 0)
            ;;[call_stmt_393_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_393_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_393_sample_start_ &-> (call_stmt_393_Sample)
            call_stmt_393_sample_completed_ <-& (call_stmt_393_Sample)
            call_stmt_393_sample_completed_ &-> ($null)
            call_stmt_393_update_start_ &-> (call_stmt_393_Update)
            call_stmt_393_update_completed_ <-& (call_stmt_393_Update)
            // Call output argument 0
            // (as target) n_program_cnt
            // self-release: 
            call_stmt_393_sample_start_ o<-& (call_stmt_393_sample_completed_ 1)
            $null &-> (call_stmt_393_update_start_)
            call_stmt_393_update_start_ o<-& (call_stmt_393_update_completed_ 0)
            // start: WAR dependencies for n_program_cnt
            // WAR dependency: Read: n_program_cnt before Write: 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt ) 
            call_stmt_393_update_start_ <-& (phi_stmt_322_sample_completed_)
            phi_stmt_322_sample_start_ o<-& (call_stmt_393_update_completed_ 0)
            // WAR dependency: release  Read: n_program_cnt with Write: 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt ) 
            // done: WAR dependencies for n_program_cnt
            // end: 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt )  $buffering 2
            // start:  				EQ_u8_u1_418_418_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 153
            // Source expression
            // (opcode == ADD)
            $T[EQ_u8_u1_402_sample_start_] 
            $T[EQ_u8_u1_402_sample_completed_] 
            $T[EQ_u8_u1_402_update_start_] 
            $T[EQ_u8_u1_402_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_402_sample_start_
            EQ_u8_u1_402_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_402_sample_start_
            ;;[EQ_u8_u1_402_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_402_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_402_sample_start_ &-> (EQ_u8_u1_402_Sample)
            EQ_u8_u1_402_sample_completed_ <-& (EQ_u8_u1_402_Sample)
            EQ_u8_u1_402_sample_completed_ &-> ($null)
            EQ_u8_u1_402_update_start_ &-> (EQ_u8_u1_402_Update)
            EQ_u8_u1_402_update_completed_ <-& (EQ_u8_u1_402_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_402_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_402_sample_start_ o<-& (EQ_u8_u1_402_sample_completed_ 1)
            $null &-> (EQ_u8_u1_402_update_start_)
            EQ_u8_u1_402_update_start_ o<-& (EQ_u8_u1_402_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_418_418_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_418_418_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_418_418_delayed_7_0
            // end:  				EQ_u8_u1_418_418_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_498_498_delayed_7_0 := (opcode == L_SRL) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 154
            // Source expression
            // (opcode == L_SRL)
            $T[EQ_u8_u1_407_sample_start_] 
            $T[EQ_u8_u1_407_sample_completed_] 
            $T[EQ_u8_u1_407_update_start_] 
            $T[EQ_u8_u1_407_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_407_sample_start_
            EQ_u8_u1_407_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_407_sample_start_
            ;;[EQ_u8_u1_407_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_407_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_407_sample_start_ &-> (EQ_u8_u1_407_Sample)
            EQ_u8_u1_407_sample_completed_ <-& (EQ_u8_u1_407_Sample)
            EQ_u8_u1_407_sample_completed_ &-> ($null)
            EQ_u8_u1_407_update_start_ &-> (EQ_u8_u1_407_Update)
            EQ_u8_u1_407_update_completed_ <-& (EQ_u8_u1_407_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_407_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_407_sample_start_ o<-& (EQ_u8_u1_407_sample_completed_ 1)
            $null &-> (EQ_u8_u1_407_update_start_)
            EQ_u8_u1_407_update_start_ o<-& (EQ_u8_u1_407_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_498_498_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_498_498_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_498_498_delayed_7_0
            // end:  				EQ_u8_u1_498_498_delayed_7_0 := (opcode == L_SRL) $buffering 7// bits of buffering = 7. 
            // start:  				MUX_431_431_delayed_7_0 := ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  )  $buffering 7// bits of buffering = 224. 
            //  file prog.linked.opt.aa, line 155
            // Source expression
            // ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  ) 
            $T[MUX_417_sample_start_] 
            $T[MUX_417_sample_completed_] 
            $T[MUX_417_update_start_] 
            $T[MUX_417_update_completed_] 
            // (opcode == SBIR)
            // opcode
            // (zero_24 && rs1_imm)
            // rs1_imm
            // start: Forward dependencies from (opcode == SBIR) to transition MUX_417_sample_start_
            MUX_417_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from (opcode == SBIR) to transition MUX_417_sample_start_
            // start: Forward dependencies from (zero_24 && rs1_imm) to transition MUX_417_sample_start_
            MUX_417_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from (zero_24 && rs1_imm) to transition MUX_417_sample_start_
            ;;[MUX_417_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_417_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_417_sample_start_ &-> (MUX_417_start)
            MUX_417_sample_completed_ <-& (MUX_417_start)
            MUX_417_sample_completed_ &-> ($null)
            MUX_417_update_start_ &-> (MUX_417_complete)
            MUX_417_update_completed_ <-& (MUX_417_complete)
            // RAW reenables for (opcode == SBIR)
            RPIPE_mem_out_341_update_start_ o<-& (MUX_417_sample_completed_ 0)
            // RAW reenables for (zero_24 && rs1_imm)
            RPIPE_mem_out_341_update_start_ o<-& (MUX_417_sample_completed_ 0)
            // self-release: 
            MUX_417_sample_start_ o<-& (MUX_417_sample_completed_ 1)
            $null &-> (MUX_417_update_start_)
            MUX_417_update_start_ o<-& (MUX_417_update_completed_ 0)
            // Target expression
            // (as target) MUX_431_431_delayed_7_0
            // start: WAR dependencies for MUX_431_431_delayed_7_0
            // done: WAR dependencies for MUX_431_431_delayed_7_0
            // end:  				MUX_431_431_delayed_7_0 := ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  )  $buffering 7// bits of buffering = 224. 
            // start:  				EQ_u8_u1_435_435_delayed_7_0 := (opcode == L_AND) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 156
            // Source expression
            // (opcode == L_AND)
            $T[EQ_u8_u1_422_sample_start_] 
            $T[EQ_u8_u1_422_sample_completed_] 
            $T[EQ_u8_u1_422_update_start_] 
            $T[EQ_u8_u1_422_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_422_sample_start_
            EQ_u8_u1_422_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_422_sample_start_
            ;;[EQ_u8_u1_422_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_422_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_422_sample_start_ &-> (EQ_u8_u1_422_Sample)
            EQ_u8_u1_422_sample_completed_ <-& (EQ_u8_u1_422_Sample)
            EQ_u8_u1_422_sample_completed_ &-> ($null)
            EQ_u8_u1_422_update_start_ &-> (EQ_u8_u1_422_Update)
            EQ_u8_u1_422_update_completed_ <-& (EQ_u8_u1_422_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_422_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_422_sample_start_ o<-& (EQ_u8_u1_422_sample_completed_ 1)
            $null &-> (EQ_u8_u1_422_update_start_)
            EQ_u8_u1_422_update_start_ o<-& (EQ_u8_u1_422_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_435_435_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_435_435_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_435_435_delayed_7_0
            // end:  				EQ_u8_u1_435_435_delayed_7_0 := (opcode == L_AND) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_444_444_delayed_7_0 := (opcode == L_OR) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 157
            // Source expression
            // (opcode == L_OR)
            $T[EQ_u8_u1_427_sample_start_] 
            $T[EQ_u8_u1_427_sample_completed_] 
            $T[EQ_u8_u1_427_update_start_] 
            $T[EQ_u8_u1_427_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_427_sample_start_
            EQ_u8_u1_427_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_427_sample_start_
            ;;[EQ_u8_u1_427_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_427_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_427_sample_start_ &-> (EQ_u8_u1_427_Sample)
            EQ_u8_u1_427_sample_completed_ <-& (EQ_u8_u1_427_Sample)
            EQ_u8_u1_427_sample_completed_ &-> ($null)
            EQ_u8_u1_427_update_start_ &-> (EQ_u8_u1_427_Update)
            EQ_u8_u1_427_update_completed_ <-& (EQ_u8_u1_427_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_427_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_427_sample_start_ o<-& (EQ_u8_u1_427_sample_completed_ 1)
            $null &-> (EQ_u8_u1_427_update_start_)
            EQ_u8_u1_427_update_start_ o<-& (EQ_u8_u1_427_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_444_444_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_444_444_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_444_444_delayed_7_0
            // end:  				EQ_u8_u1_444_444_delayed_7_0 := (opcode == L_OR) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_452_452_delayed_7_0 := (opcode == L_XNOR) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 158
            // Source expression
            // (opcode == L_XNOR)
            $T[EQ_u8_u1_432_sample_start_] 
            $T[EQ_u8_u1_432_sample_completed_] 
            $T[EQ_u8_u1_432_update_start_] 
            $T[EQ_u8_u1_432_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_432_sample_start_
            EQ_u8_u1_432_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_432_sample_start_
            ;;[EQ_u8_u1_432_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_432_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_432_sample_start_ &-> (EQ_u8_u1_432_Sample)
            EQ_u8_u1_432_sample_completed_ <-& (EQ_u8_u1_432_Sample)
            EQ_u8_u1_432_sample_completed_ &-> ($null)
            EQ_u8_u1_432_update_start_ &-> (EQ_u8_u1_432_Update)
            EQ_u8_u1_432_update_completed_ <-& (EQ_u8_u1_432_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_432_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_432_sample_start_ o<-& (EQ_u8_u1_432_sample_completed_ 1)
            $null &-> (EQ_u8_u1_432_update_start_)
            EQ_u8_u1_432_update_start_ o<-& (EQ_u8_u1_432_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_452_452_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_452_452_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_452_452_delayed_7_0
            // end:  				EQ_u8_u1_452_452_delayed_7_0 := (opcode == L_XNOR) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_461_461_delayed_7_0 := (opcode == L_XOR) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 159
            // Source expression
            // (opcode == L_XOR)
            $T[EQ_u8_u1_437_sample_start_] 
            $T[EQ_u8_u1_437_sample_completed_] 
            $T[EQ_u8_u1_437_update_start_] 
            $T[EQ_u8_u1_437_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_437_sample_start_
            EQ_u8_u1_437_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_437_sample_start_
            ;;[EQ_u8_u1_437_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_437_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_437_sample_start_ &-> (EQ_u8_u1_437_Sample)
            EQ_u8_u1_437_sample_completed_ <-& (EQ_u8_u1_437_Sample)
            EQ_u8_u1_437_sample_completed_ &-> ($null)
            EQ_u8_u1_437_update_start_ &-> (EQ_u8_u1_437_Update)
            EQ_u8_u1_437_update_completed_ <-& (EQ_u8_u1_437_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_437_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_437_sample_start_ o<-& (EQ_u8_u1_437_sample_completed_ 1)
            $null &-> (EQ_u8_u1_437_update_start_)
            EQ_u8_u1_437_update_start_ o<-& (EQ_u8_u1_437_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_461_461_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_461_461_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_461_461_delayed_7_0
            // end:  				EQ_u8_u1_461_461_delayed_7_0 := (opcode == L_XOR) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_471_471_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 160
            // Source expression
            // (opcode == ADD)
            $T[EQ_u8_u1_442_sample_start_] 
            $T[EQ_u8_u1_442_sample_completed_] 
            $T[EQ_u8_u1_442_update_start_] 
            $T[EQ_u8_u1_442_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_442_sample_start_
            EQ_u8_u1_442_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_442_sample_start_
            ;;[EQ_u8_u1_442_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_442_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_442_sample_start_ &-> (EQ_u8_u1_442_Sample)
            EQ_u8_u1_442_sample_completed_ <-& (EQ_u8_u1_442_Sample)
            EQ_u8_u1_442_sample_completed_ &-> ($null)
            EQ_u8_u1_442_update_start_ &-> (EQ_u8_u1_442_Update)
            EQ_u8_u1_442_update_completed_ <-& (EQ_u8_u1_442_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_442_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_442_sample_start_ o<-& (EQ_u8_u1_442_sample_completed_ 1)
            $null &-> (EQ_u8_u1_442_update_start_)
            EQ_u8_u1_442_update_start_ o<-& (EQ_u8_u1_442_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_471_471_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_471_471_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_471_471_delayed_7_0
            // end:  				EQ_u8_u1_471_471_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_479_479_delayed_7_0 := (opcode == SUB) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 161
            // Source expression
            // (opcode == SUB)
            $T[EQ_u8_u1_447_sample_start_] 
            $T[EQ_u8_u1_447_sample_completed_] 
            $T[EQ_u8_u1_447_update_start_] 
            $T[EQ_u8_u1_447_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_447_sample_start_
            EQ_u8_u1_447_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_447_sample_start_
            ;;[EQ_u8_u1_447_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_447_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_447_sample_start_ &-> (EQ_u8_u1_447_Sample)
            EQ_u8_u1_447_sample_completed_ <-& (EQ_u8_u1_447_Sample)
            EQ_u8_u1_447_sample_completed_ &-> ($null)
            EQ_u8_u1_447_update_start_ &-> (EQ_u8_u1_447_Update)
            EQ_u8_u1_447_update_completed_ <-& (EQ_u8_u1_447_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_447_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_447_sample_start_ o<-& (EQ_u8_u1_447_sample_completed_ 1)
            $null &-> (EQ_u8_u1_447_update_start_)
            EQ_u8_u1_447_update_start_ o<-& (EQ_u8_u1_447_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_479_479_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_479_479_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_479_479_delayed_7_0
            // end:  				EQ_u8_u1_479_479_delayed_7_0 := (opcode == SUB) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_488_488_delayed_7_0 := (opcode == L_SLL) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 162
            // Source expression
            // (opcode == L_SLL)
            $T[EQ_u8_u1_452_sample_start_] 
            $T[EQ_u8_u1_452_sample_completed_] 
            $T[EQ_u8_u1_452_update_start_] 
            $T[EQ_u8_u1_452_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_452_sample_start_
            EQ_u8_u1_452_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_452_sample_start_
            ;;[EQ_u8_u1_452_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_452_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_452_sample_start_ &-> (EQ_u8_u1_452_Sample)
            EQ_u8_u1_452_sample_completed_ <-& (EQ_u8_u1_452_Sample)
            EQ_u8_u1_452_sample_completed_ &-> ($null)
            EQ_u8_u1_452_update_start_ &-> (EQ_u8_u1_452_Update)
            EQ_u8_u1_452_update_completed_ <-& (EQ_u8_u1_452_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_452_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_452_sample_start_ o<-& (EQ_u8_u1_452_sample_completed_ 1)
            $null &-> (EQ_u8_u1_452_update_start_)
            EQ_u8_u1_452_update_start_ o<-& (EQ_u8_u1_452_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_488_488_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_488_488_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_488_488_delayed_7_0
            // end:  				EQ_u8_u1_488_488_delayed_7_0 := (opcode == L_SLL) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_507_507_delayed_7_0 := (opcode == L_SRA) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 163
            // Source expression
            // (opcode == L_SRA)
            $T[EQ_u8_u1_457_sample_start_] 
            $T[EQ_u8_u1_457_sample_completed_] 
            $T[EQ_u8_u1_457_update_start_] 
            $T[EQ_u8_u1_457_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_457_sample_start_
            EQ_u8_u1_457_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_457_sample_start_
            ;;[EQ_u8_u1_457_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_457_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_457_sample_start_ &-> (EQ_u8_u1_457_Sample)
            EQ_u8_u1_457_sample_completed_ <-& (EQ_u8_u1_457_Sample)
            EQ_u8_u1_457_sample_completed_ &-> ($null)
            EQ_u8_u1_457_update_start_ &-> (EQ_u8_u1_457_Update)
            EQ_u8_u1_457_update_completed_ <-& (EQ_u8_u1_457_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_457_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_457_sample_start_ o<-& (EQ_u8_u1_457_sample_completed_ 1)
            $null &-> (EQ_u8_u1_457_update_start_)
            EQ_u8_u1_457_update_start_ o<-& (EQ_u8_u1_457_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_507_507_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_507_507_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_507_507_delayed_7_0
            // end:  				EQ_u8_u1_507_507_delayed_7_0 := (opcode == L_SRA) $buffering 7// bits of buffering = 7. 
            // start:  				EQ_u8_u1_517_517_delayed_7_0 := (opcode == CMP) $buffering 7// bits of buffering = 7. 
            //  file prog.linked.opt.aa, line 164
            // Source expression
            // (opcode == CMP)
            $T[EQ_u8_u1_462_sample_start_] 
            $T[EQ_u8_u1_462_sample_completed_] 
            $T[EQ_u8_u1_462_update_start_] 
            $T[EQ_u8_u1_462_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_462_sample_start_
            EQ_u8_u1_462_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_462_sample_start_
            ;;[EQ_u8_u1_462_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_462_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_462_sample_start_ &-> (EQ_u8_u1_462_Sample)
            EQ_u8_u1_462_sample_completed_ <-& (EQ_u8_u1_462_Sample)
            EQ_u8_u1_462_sample_completed_ &-> ($null)
            EQ_u8_u1_462_update_start_ &-> (EQ_u8_u1_462_Update)
            EQ_u8_u1_462_update_completed_ <-& (EQ_u8_u1_462_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_462_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_462_sample_start_ o<-& (EQ_u8_u1_462_sample_completed_ 1)
            $null &-> (EQ_u8_u1_462_update_start_)
            EQ_u8_u1_462_update_start_ o<-& (EQ_u8_u1_462_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_517_517_delayed_7_0
            // start: WAR dependencies for EQ_u8_u1_517_517_delayed_7_0
            // done: WAR dependencies for EQ_u8_u1_517_517_delayed_7_0
            // end:  				EQ_u8_u1_517_517_delayed_7_0 := (opcode == CMP) $buffering 7// bits of buffering = 7. 
            // start:  				exec_result_init := ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 165
            // Source expression
            // ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))
            $T[OR_u32_u32_562_sample_start_] 
            $T[OR_u32_u32_562_sample_completed_] 
            $T[OR_u32_u32_562_update_start_] 
            $T[OR_u32_u32_562_update_completed_] 
            // (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) ))
            // ((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) )
            // (( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0)
            // ( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  ) 
            // EQ_u8_u1_418_418_delayed_7_0
            // (rd1 + rd2)
            // rd1
            // rd2
            // MUX_431_431_delayed_7_0
            // ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) 
            // EQ_u8_u1_435_435_delayed_7_0
            // (rd1 & rd2)
            // rd1
            // rd2
            // ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )
            // (( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) )
            // ( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  ) 
            // EQ_u8_u1_444_444_delayed_7_0
            // (rd1 | rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) 
            // EQ_u8_u1_452_452_delayed_7_0
            // (rd1 ~^ rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) 
            // EQ_u8_u1_461_461_delayed_7_0
            // (rd1 ^ rd2)
            // rd1
            // rd2
            // (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) ))
            // ((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) )
            // (( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) )
            // ( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  ) 
            // EQ_u8_u1_471_471_delayed_7_0
            // (rd1 + rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) 
            // EQ_u8_u1_479_479_delayed_7_0
            // (rd1 - rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) 
            // EQ_u8_u1_488_488_delayed_7_0
            // ($bitcast ($uint<32>) (rd1 << rd2) )
            // (rd1 << rd2)
            // rd1
            // rd2
            // ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )
            // (( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) )
            // ( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
            // EQ_u8_u1_498_498_delayed_7_0
            // ($bitcast ($uint<32>) (rd1 >> rd2) )
            // (rd1 >> rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
            // EQ_u8_u1_507_507_delayed_7_0
            // ($bitcast ($uint<32>) (rd1 >> rd2) )
            // (rd1 >> rd2)
            // rd1
            // rd2
            // ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) 
            // EQ_u8_u1_517_517_delayed_7_0
            // ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )
            // (( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) )
            // ( $mux (rd1 == rd2) zero_32  _b0  ) 
            // (rd1 == rd2)
            // rd1
            // rd2
            // ( $mux (rd1 < rd2) minus_1  _b0  ) 
            // (rd1 < rd2)
            // rd1
            // rd2
            // ( $mux (rd1 > rd2) one_32  _b0  ) 
            // (rd1 > rd2)
            // rd1
            // rd2
            // start: Forward dependencies from (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) to transition OR_u32_u32_562_sample_start_
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_402_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (call_stmt_368_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (MUX_417_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_422_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_427_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_432_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_437_update_completed_)
            // done: Forward dependencies from (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) to transition OR_u32_u32_562_sample_start_
            // start: Forward dependencies from (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )) to transition OR_u32_u32_562_sample_start_
            OR_u32_u32_562_sample_start_ <-& (call_stmt_368_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_407_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_442_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_447_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_452_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_457_update_completed_)
            OR_u32_u32_562_sample_start_ <-& (EQ_u8_u1_462_update_completed_)
            // done: Forward dependencies from (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )) to transition OR_u32_u32_562_sample_start_
            ;;[OR_u32_u32_562_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[OR_u32_u32_562_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            OR_u32_u32_562_sample_start_ &-> (OR_u32_u32_562_Sample)
            OR_u32_u32_562_sample_completed_ <-& (OR_u32_u32_562_Sample)
            OR_u32_u32_562_sample_completed_ &-> ($null)
            OR_u32_u32_562_update_start_ &-> (OR_u32_u32_562_Update)
            OR_u32_u32_562_update_completed_ <-& (OR_u32_u32_562_Update)
            // RAW reenables for (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) ))
            EQ_u8_u1_402_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            call_stmt_368_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            MUX_417_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_422_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_427_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_432_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_437_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            // RAW reenables for (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) ))
            call_stmt_368_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_407_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_442_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_447_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_452_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_457_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            EQ_u8_u1_462_update_start_ o<-& (OR_u32_u32_562_sample_completed_ 0)
            // self-release: 
            OR_u32_u32_562_sample_start_ o<-& (OR_u32_u32_562_sample_completed_ 1)
            $null &-> (OR_u32_u32_562_update_start_)
            OR_u32_u32_562_update_start_ o<-& (OR_u32_u32_562_update_completed_ 0)
            // Target expression
            // (as target) exec_result_init
            // start: WAR dependencies for exec_result_init
            // done: WAR dependencies for exec_result_init
            // end:  				exec_result_init := ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))// bits of buffering = 32. 
            // start:  				EQ_u8_u1_547_547_delayed_8_0 := (opcode == ADD) $buffering 8// bits of buffering = 8. 
            //  file prog.linked.opt.aa, line 166
            // Source expression
            // (opcode == ADD)
            $T[EQ_u8_u1_567_sample_start_] 
            $T[EQ_u8_u1_567_sample_completed_] 
            $T[EQ_u8_u1_567_update_start_] 
            $T[EQ_u8_u1_567_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_567_sample_start_
            EQ_u8_u1_567_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_567_sample_start_
            ;;[EQ_u8_u1_567_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_567_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_567_sample_start_ &-> (EQ_u8_u1_567_Sample)
            EQ_u8_u1_567_sample_completed_ <-& (EQ_u8_u1_567_Sample)
            EQ_u8_u1_567_sample_completed_ &-> ($null)
            EQ_u8_u1_567_update_start_ &-> (EQ_u8_u1_567_Update)
            EQ_u8_u1_567_update_completed_ <-& (EQ_u8_u1_567_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_567_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_567_sample_start_ o<-& (EQ_u8_u1_567_sample_completed_ 1)
            $null &-> (EQ_u8_u1_567_update_start_)
            EQ_u8_u1_567_update_start_ o<-& (EQ_u8_u1_567_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_547_547_delayed_8_0
            // start: WAR dependencies for EQ_u8_u1_547_547_delayed_8_0
            // done: WAR dependencies for EQ_u8_u1_547_547_delayed_8_0
            // end:  				EQ_u8_u1_547_547_delayed_8_0 := (opcode == ADD) $buffering 8// bits of buffering = 8. 
            // start:  				carry_549_delayed_8_0 := carry $buffering 8// bits of buffering = 256. 
            //  file prog.linked.opt.aa, line 167
            $T[assign_stmt_571_sample_start_] 
            $T[assign_stmt_571_sample_completed_] 
            $T[assign_stmt_571_update_start_] 
            $T[assign_stmt_571_update_completed_] 
            // Source expression
            // carry
            // Target expression
            // (as target) carry_549_delayed_8_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_571_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_571_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_571_sample_start_ &-> (assign_stmt_571_Sample)
            assign_stmt_571_sample_completed_ <-& (assign_stmt_571_Sample)
            assign_stmt_571_sample_completed_ &-> ($null)
            assign_stmt_571_update_start_ &-> (assign_stmt_571_Update)
            assign_stmt_571_update_completed_ <-& (assign_stmt_571_Update)
            // start: Forward dependencies from carry to transition assign_stmt_571_sample_start_
            assign_stmt_571_sample_start_ <-& (phi_stmt_326_update_completed_)
            // done: Forward dependencies from carry to transition assign_stmt_571_sample_start_
            // RAW reenables for carry
            phi_stmt_326_update_start_ o<-& (assign_stmt_571_sample_completed_ 0)
            // self-release: 
            assign_stmt_571_sample_start_ o<-& (assign_stmt_571_sample_completed_ 1)
            $null &-> (assign_stmt_571_update_start_)
            assign_stmt_571_update_start_ o<-& (assign_stmt_571_update_completed_ 0)
            // start: WAR dependencies for carry_549_delayed_8_0
            // done: WAR dependencies for carry_549_delayed_8_0
            // end:  				carry_549_delayed_8_0 := carry $buffering 8// bits of buffering = 256. 
            // start: WAR dependencies for exec_result
            // done: WAR dependencies for exec_result
            // start:  				$volatile exec_result := ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
            //  file prog.linked.opt.aa, line 168
            // volatile! 
            // Source expression
            // ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
            // EQ_u8_u1_547_547_delayed_8_0
            // (exec_result_init + carry_549_delayed_8_0)
            // exec_result_init
            // carry_549_delayed_8_0
            // exec_result_init
            // Target expression
            // (as target) exec_result
            // start: WAR dependencies for exec_result
            // done: WAR dependencies for exec_result
            // end:  				$volatile exec_result := ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
            // start: WAR dependencies for memWrite
            // done: WAR dependencies for memWrite
            // start:  				$volatile memWrite := ( $mux (opcode == STORE) zero_1  one_1 ) 
            //  file prog.linked.opt.aa, line 169
            // volatile! 
            // Source expression
            // ( $mux (opcode == STORE) zero_1  one_1 ) 
            // (opcode == STORE)
            // opcode
            // Target expression
            // (as target) memWrite
            // start: WAR dependencies for memWrite
            // done: WAR dependencies for memWrite
            // end:  				$volatile memWrite := ( $mux (opcode == STORE) zero_1  one_1 ) 
            // start: WAR dependencies for regWrite
            // done: WAR dependencies for regWrite
            // start:  				$volatile regWrite := (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
            //  file prog.linked.opt.aa, line 170
            // volatile! 
            // Source expression
            // (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
            // ((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD)))
            // (((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND))
            // ((opcode == SBIR) | (opcode == LOAD))
            // (opcode == SBIR)
            // opcode
            // (opcode == LOAD)
            // opcode
            // (opcode == L_AND)
            // opcode
            // (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))
            // ((opcode == L_OR) | (opcode == L_XNOR))
            // (opcode == L_OR)
            // opcode
            // (opcode == L_XNOR)
            // opcode
            // (opcode == ADD)
            // opcode
            // ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP)))
            // (((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL))
            // ((opcode == SUB) | (opcode == L_SLL))
            // (opcode == SUB)
            // opcode
            // (opcode == L_SLL)
            // opcode
            // (opcode == L_SRL)
            // opcode
            // (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))
            // ((opcode == L_SRA) | (opcode == CALL))
            // (opcode == L_SRA)
            // opcode
            // (opcode == CALL)
            // opcode
            // (opcode == CMP)
            // opcode
            // Target expression
            // (as target) regWrite
            // start: WAR dependencies for regWrite
            // done: WAR dependencies for regWrite
            // end:  				$volatile regWrite := (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
            // start:  				memAddr := ( $slice rd1 7 0 ) // bits of buffering = 8. 
            //  file prog.linked.opt.aa, line 171
            // Source expression
            // ( $slice rd1 7 0 ) 
            $T[slice_639_sample_start_] 
            $T[slice_639_sample_completed_] 
            $T[slice_639_update_start_] 
            $T[slice_639_update_completed_] 
            // rd1
            // start: Forward dependencies from rd1 to transition slice_639_sample_start_
            slice_639_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from rd1 to transition slice_639_sample_start_
            ;;[slice_639_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_639_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_639_sample_start_ &-> (slice_639_Sample)
            slice_639_sample_completed_ <-& (slice_639_Sample)
            slice_639_sample_completed_ &-> ($null)
            slice_639_update_start_ &-> (slice_639_Update)
            slice_639_update_completed_ <-& (slice_639_Update)
            // RAW reenables for rd1
            call_stmt_368_update_start_ o<-& (slice_639_sample_completed_ 0)
            // self-release: 
            slice_639_sample_start_ o<-& (slice_639_sample_completed_ 1)
            $null &-> (slice_639_update_start_)
            slice_639_update_start_ o<-& (slice_639_update_completed_ 0)
            // Target expression
            // (as target) memAddr
            // start: WAR dependencies for memAddr
            // done: WAR dependencies for memAddr
            // end:  				memAddr := ( $slice rd1 7 0 ) // bits of buffering = 8. 
            // start: WAR dependencies for is_uart_addr
            // done: WAR dependencies for is_uart_addr
            // start:  				$volatile is_uart_addr := ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
            //  file prog.linked.opt.aa, line 172
            // volatile! 
            // Source expression
            // ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
            // (memAddr == uart_addr)
            // memAddr
            // Target expression
            // (as target) is_uart_addr
            // start: WAR dependencies for is_uart_addr
            // done: WAR dependencies for is_uart_addr
            // end:  				$volatile is_uart_addr := ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
            // start:  				memWrite_625_delayed_8_0 := memWrite $buffering 8// bits of buffering = 8. 
            //  file prog.linked.opt.aa, line 173
            $T[assign_stmt_651_sample_start_] 
            $T[assign_stmt_651_sample_completed_] 
            $T[assign_stmt_651_update_start_] 
            $T[assign_stmt_651_update_completed_] 
            // Source expression
            // memWrite
            // Target expression
            // (as target) memWrite_625_delayed_8_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_651_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_651_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_651_sample_start_ &-> (assign_stmt_651_Sample)
            assign_stmt_651_sample_completed_ <-& (assign_stmt_651_Sample)
            assign_stmt_651_sample_completed_ &-> ($null)
            assign_stmt_651_update_start_ &-> (assign_stmt_651_Update)
            assign_stmt_651_update_completed_ <-& (assign_stmt_651_Update)
            // start: Forward dependencies from memWrite to transition assign_stmt_651_sample_start_
            assign_stmt_651_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from memWrite to transition assign_stmt_651_sample_start_
            // RAW reenables for memWrite
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_651_sample_completed_ 0)
            // self-release: 
            assign_stmt_651_sample_start_ o<-& (assign_stmt_651_sample_completed_ 1)
            $null &-> (assign_stmt_651_update_start_)
            assign_stmt_651_update_start_ o<-& (assign_stmt_651_update_completed_ 0)
            // start: WAR dependencies for memWrite_625_delayed_8_0
            // done: WAR dependencies for memWrite_625_delayed_8_0
            // end:  				memWrite_625_delayed_8_0 := memWrite $buffering 8// bits of buffering = 8. 
            // start:  				rd2_629_delayed_1_0 := rd2// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 174
            $T[assign_stmt_654_sample_start_] 
            $T[assign_stmt_654_sample_completed_] 
            $T[assign_stmt_654_update_start_] 
            $T[assign_stmt_654_update_completed_] 
            // Source expression
            // rd2
            // Target expression
            // (as target) rd2_629_delayed_1_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_654_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_654_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_654_sample_start_ &-> (assign_stmt_654_Sample)
            assign_stmt_654_sample_completed_ <-& (assign_stmt_654_Sample)
            assign_stmt_654_sample_completed_ &-> ($null)
            assign_stmt_654_update_start_ &-> (assign_stmt_654_Update)
            assign_stmt_654_update_completed_ <-& (assign_stmt_654_Update)
            // start: Forward dependencies from rd2 to transition assign_stmt_654_sample_start_
            assign_stmt_654_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from rd2 to transition assign_stmt_654_sample_start_
            // RAW reenables for rd2
            call_stmt_368_update_start_ o<-& (assign_stmt_654_sample_completed_ 0)
            // self-release: 
            assign_stmt_654_sample_start_ o<-& (assign_stmt_654_sample_completed_ 1)
            $null &-> (assign_stmt_654_update_start_)
            assign_stmt_654_update_start_ o<-& (assign_stmt_654_update_completed_ 0)
            // start: WAR dependencies for rd2_629_delayed_1_0
            // done: WAR dependencies for rd2_629_delayed_1_0
            // end:  				rd2_629_delayed_1_0 := rd2// bits of buffering = 32. 
            // start:  				$guard (~is_uart_addr) mem_in := ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))// bits of buffering = 64. 
            //  file prog.linked.opt.aa, line 175
            // Guard expression 
            // is_uart_addr
            // Source expression
            // ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))
            $T[CONCAT_u9_u64_663_sample_start_] 
            $T[CONCAT_u9_u64_663_sample_completed_] 
            $T[CONCAT_u9_u64_663_update_start_] 
            $T[CONCAT_u9_u64_663_update_completed_] 
            // Guard dependency for expression CONCAT_u9_u64_663 with guard R_is_uart_addr_655
            CONCAT_u9_u64_663_sample_start_ <-& (slice_639_update_completed_)
            // RAW reenables for is_uart_addr
            slice_639_update_start_ o<-& (CONCAT_u9_u64_663_sample_completed_ 0)
            // (memWrite_625_delayed_8_0 && memAddr)
            // memWrite_625_delayed_8_0
            // memAddr
            // (zero_23 && rd2_629_delayed_1_0)
            // rd2_629_delayed_1_0
            // start: Forward dependencies from (memWrite_625_delayed_8_0 && memAddr) to transition CONCAT_u9_u64_663_sample_start_
            CONCAT_u9_u64_663_sample_start_ <-& (slice_639_update_completed_)
            CONCAT_u9_u64_663_sample_start_ <-& (assign_stmt_651_update_completed_)
            // done: Forward dependencies from (memWrite_625_delayed_8_0 && memAddr) to transition CONCAT_u9_u64_663_sample_start_
            // start: Forward dependencies from (zero_23 && rd2_629_delayed_1_0) to transition CONCAT_u9_u64_663_sample_start_
            CONCAT_u9_u64_663_sample_start_ <-& (assign_stmt_654_update_completed_)
            // done: Forward dependencies from (zero_23 && rd2_629_delayed_1_0) to transition CONCAT_u9_u64_663_sample_start_
            ;;[CONCAT_u9_u64_663_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u9_u64_663_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u9_u64_663_sample_start_ &-> (CONCAT_u9_u64_663_Sample)
            CONCAT_u9_u64_663_sample_completed_ <-& (CONCAT_u9_u64_663_Sample)
            CONCAT_u9_u64_663_sample_completed_ &-> ($null)
            CONCAT_u9_u64_663_update_start_ &-> (CONCAT_u9_u64_663_Update)
            CONCAT_u9_u64_663_update_completed_ <-& (CONCAT_u9_u64_663_Update)
            // RAW reenables for (memWrite_625_delayed_8_0 && memAddr)
            slice_639_update_start_ o<-& (CONCAT_u9_u64_663_sample_completed_ 0)
            assign_stmt_651_update_start_ o<-& (CONCAT_u9_u64_663_sample_completed_ 0)
            // RAW reenables for (zero_23 && rd2_629_delayed_1_0)
            assign_stmt_654_update_start_ o<-& (CONCAT_u9_u64_663_sample_completed_ 0)
            // self-release: 
            CONCAT_u9_u64_663_sample_start_ o<-& (CONCAT_u9_u64_663_sample_completed_ 1)
            $null &-> (CONCAT_u9_u64_663_update_start_)
            CONCAT_u9_u64_663_update_start_ o<-& (CONCAT_u9_u64_663_update_completed_ 0)
            // Target expression
            // (as target) mem_in
            $T[WPIPE_mem_in_656_sample_start_] 
            $T[WPIPE_mem_in_656_sample_completed_] 
            $T[WPIPE_mem_in_656_update_start_] 
            $T[WPIPE_mem_in_656_update_completed_] 
            // Guard dependency for expression WPIPE_mem_in_656 with guard R_is_uart_addr_655
            WPIPE_mem_in_656_sample_start_ <-& (slice_639_update_completed_)
            // RAW reenables for is_uart_addr
            slice_639_update_start_ o<-& (WPIPE_mem_in_656_sample_completed_ 0)
            ;;[WPIPE_mem_in_656_Sample] 
            {
              // pipe write sample-start mem_in
              $T [req] $T [ack] 
            }
            ;;[WPIPE_mem_in_656_Update] 
            {
              // pipe write update (complete) mem_in
              $T [req] $T [ack] 
            }
            WPIPE_mem_in_656_sample_start_ &-> (WPIPE_mem_in_656_Sample)
            WPIPE_mem_in_656_sample_completed_ <-& (WPIPE_mem_in_656_Sample)
            WPIPE_mem_in_656_update_start_ <-& (WPIPE_mem_in_656_sample_completed_)
            WPIPE_mem_in_656_update_start_ &-> (WPIPE_mem_in_656_Update)
            WPIPE_mem_in_656_update_completed_ <-& (WPIPE_mem_in_656_Update)
            WPIPE_mem_in_656_sample_start_ o<-& (WPIPE_mem_in_656_update_completed_ 0)
            // start: Forward dependencies from ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0)) to transition WPIPE_mem_in_656_sample_start_
            WPIPE_mem_in_656_sample_start_ <-& (CONCAT_u9_u64_663_update_completed_)
            // done: Forward dependencies from ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0)) to transition WPIPE_mem_in_656_sample_start_
            // RAW reenables for ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))
            CONCAT_u9_u64_663_update_start_ o<-& (WPIPE_mem_in_656_sample_completed_ 0)
            // end:  				$guard (~is_uart_addr) mem_in := ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))// bits of buffering = 64. 
            // start:  				$guard (~is_uart_addr) memReadData := mem_out// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 176
            // Guard expression 
            // is_uart_addr
            // Source expression
            // mem_out
            $T[RPIPE_mem_out_667_sample_start_] 
            $T[RPIPE_mem_out_667_sample_completed_] 
            $T[RPIPE_mem_out_667_update_start_] 
            $T[RPIPE_mem_out_667_update_completed_] 
            // Guard dependency for expression RPIPE_mem_out_667 with guard R_is_uart_addr_665
            RPIPE_mem_out_667_update_start_ <-& (slice_639_update_completed_)
            // RAW reenables for is_uart_addr
            slice_639_update_start_ o<-& (RPIPE_mem_out_667_update_start_ 0)
            ;;[RPIPE_mem_out_667_Sample] 
            {
              // pipe read sample
              $T [rr] $T [ra] 
            }
            ;;[RPIPE_mem_out_667_Update] 
            {
              // pipe read update
              $T [cr] $T [ca] 
            }
            RPIPE_mem_out_667_sample_start_ &-> (RPIPE_mem_out_667_Sample)
            RPIPE_mem_out_667_sample_completed_ <-& (RPIPE_mem_out_667_Sample)
            RPIPE_mem_out_667_update_start_ <-& (RPIPE_mem_out_667_sample_completed_)
            RPIPE_mem_out_667_update_start_ &-> (RPIPE_mem_out_667_Update)
            RPIPE_mem_out_667_update_completed_ <-& (RPIPE_mem_out_667_Update)
            RPIPE_mem_out_667_sample_start_ o<-& (RPIPE_mem_out_667_update_completed_ 0)
            // Target expression
            // (as target) memReadData
            // start: WAR dependencies for memReadData
            // done: WAR dependencies for memReadData
            // end:  				$guard (~is_uart_addr) memReadData := mem_out// bits of buffering = 32. 
            // start: 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
            //  file prog.linked.opt.aa, line 177
            $T[call_stmt_671_sample_start_] 
            $T[call_stmt_671_sample_completed_] 
            $T[call_stmt_671_update_start_] 
            $T[call_stmt_671_update_completed_] 
            // Guard expression
            // is_uart_addr
            // start: Forward dependencies from is_uart_addr to transition call_stmt_671_sample_start_
            call_stmt_671_sample_start_ <-& (slice_639_update_completed_)
            // done: Forward dependencies from is_uart_addr to transition call_stmt_671_sample_start_
            // RAW reenables for is_uart_addr
            slice_639_update_start_ o<-& (call_stmt_671_sample_completed_ 0)
            ;;[call_stmt_671_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_671_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_671_sample_start_ &-> (call_stmt_671_Sample)
            call_stmt_671_sample_completed_ <-& (call_stmt_671_Sample)
            call_stmt_671_sample_completed_ &-> ($null)
            call_stmt_671_update_start_ &-> (call_stmt_671_Update)
            call_stmt_671_update_completed_ <-& (call_stmt_671_Update)
            // Call output argument 0
            // (as target) data_from_uart
            // self-release: 
            call_stmt_671_sample_start_ o<-& (call_stmt_671_sample_completed_ 1)
            $null &-> (call_stmt_671_update_start_)
            call_stmt_671_update_start_ o<-& (call_stmt_671_update_completed_ 0)
            // start: WAR dependencies for data_from_uart
            // done: WAR dependencies for data_from_uart
            // end: 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
            // start: WAR dependencies for program_cnt_1
            // done: WAR dependencies for program_cnt_1
            // start:  				$volatile program_cnt_1 := (program_cnt + 1 )
            //  file prog.linked.opt.aa, line 179
            // volatile! 
            // Source expression
            // (program_cnt + 1 )
            // program_cnt
            // Target expression
            // (as target) program_cnt_1
            // start: WAR dependencies for program_cnt_1
            // done: WAR dependencies for program_cnt_1
            // end:  				$volatile program_cnt_1 := (program_cnt + 1 )
            // start:  				EQ_u8_u1_653_653_delayed_9_0 := (opcode == LOAD) $buffering 9// bits of buffering = 9. 
            //  file prog.linked.opt.aa, line 180
            // Source expression
            // (opcode == LOAD)
            $T[EQ_u8_u1_682_sample_start_] 
            $T[EQ_u8_u1_682_sample_completed_] 
            $T[EQ_u8_u1_682_update_start_] 
            $T[EQ_u8_u1_682_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_682_sample_start_
            EQ_u8_u1_682_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_682_sample_start_
            ;;[EQ_u8_u1_682_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_682_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_682_sample_start_ &-> (EQ_u8_u1_682_Sample)
            EQ_u8_u1_682_sample_completed_ <-& (EQ_u8_u1_682_Sample)
            EQ_u8_u1_682_sample_completed_ &-> ($null)
            EQ_u8_u1_682_update_start_ &-> (EQ_u8_u1_682_Update)
            EQ_u8_u1_682_update_completed_ <-& (EQ_u8_u1_682_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_682_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_682_sample_start_ o<-& (EQ_u8_u1_682_sample_completed_ 1)
            $null &-> (EQ_u8_u1_682_update_start_)
            EQ_u8_u1_682_update_start_ o<-& (EQ_u8_u1_682_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_653_653_delayed_9_0
            // start: WAR dependencies for EQ_u8_u1_653_653_delayed_9_0
            // done: WAR dependencies for EQ_u8_u1_653_653_delayed_9_0
            // end:  				EQ_u8_u1_653_653_delayed_9_0 := (opcode == LOAD) $buffering 9// bits of buffering = 9. 
            // start:  				EQ_u8_u1_657_657_delayed_8_0 := (opcode == CALL) $buffering 8// bits of buffering = 8. 
            //  file prog.linked.opt.aa, line 181
            // Source expression
            // (opcode == CALL)
            $T[EQ_u8_u1_687_sample_start_] 
            $T[EQ_u8_u1_687_sample_completed_] 
            $T[EQ_u8_u1_687_update_start_] 
            $T[EQ_u8_u1_687_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_687_sample_start_
            EQ_u8_u1_687_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_687_sample_start_
            ;;[EQ_u8_u1_687_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_687_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_687_sample_start_ &-> (EQ_u8_u1_687_Sample)
            EQ_u8_u1_687_sample_completed_ <-& (EQ_u8_u1_687_Sample)
            EQ_u8_u1_687_sample_completed_ &-> ($null)
            EQ_u8_u1_687_update_start_ &-> (EQ_u8_u1_687_Update)
            EQ_u8_u1_687_update_completed_ <-& (EQ_u8_u1_687_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_687_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_687_sample_start_ o<-& (EQ_u8_u1_687_sample_completed_ 1)
            $null &-> (EQ_u8_u1_687_update_start_)
            EQ_u8_u1_687_update_start_ o<-& (EQ_u8_u1_687_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_657_657_delayed_8_0
            // start: WAR dependencies for EQ_u8_u1_657_657_delayed_8_0
            // done: WAR dependencies for EQ_u8_u1_657_657_delayed_8_0
            // end:  				EQ_u8_u1_657_657_delayed_8_0 := (opcode == CALL) $buffering 8// bits of buffering = 8. 
            // start:  				type_cast_659_659_delayed_8_0 := ($bitcast ($uint<32>) program_cnt_1 ) $buffering 8// bits of buffering = 256. 
            //  file prog.linked.opt.aa, line 182
            // Source expression
            // ($bitcast ($uint<32>) program_cnt_1 )
            $T[type_cast_691_sample_start_] 
            $T[type_cast_691_sample_completed_] 
            $T[type_cast_691_update_start_] 
            $T[type_cast_691_update_completed_] 
            // program_cnt_1
            // start: Forward dependencies from program_cnt_1 to transition type_cast_691_sample_start_
            type_cast_691_sample_start_ <-& (phi_stmt_322_update_completed_)
            // done: Forward dependencies from program_cnt_1 to transition type_cast_691_sample_start_
            ;;[type_cast_691_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[type_cast_691_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            type_cast_691_sample_start_ &-> (type_cast_691_Sample)
            type_cast_691_sample_completed_ <-& (type_cast_691_Sample)
            type_cast_691_sample_completed_ &-> ($null)
            type_cast_691_update_start_ &-> (type_cast_691_Update)
            type_cast_691_update_completed_ <-& (type_cast_691_Update)
            // RAW reenables for program_cnt_1
            phi_stmt_322_update_start_ o<-& (type_cast_691_sample_completed_ 0)
            // self-release: 
            type_cast_691_sample_start_ o<-& (type_cast_691_sample_completed_ 1)
            $null &-> (type_cast_691_update_start_)
            type_cast_691_update_start_ o<-& (type_cast_691_update_completed_ 0)
            // Target expression
            // (as target) type_cast_659_659_delayed_8_0
            // start: WAR dependencies for type_cast_659_659_delayed_8_0
            // done: WAR dependencies for type_cast_659_659_delayed_8_0
            // end:  				type_cast_659_659_delayed_8_0 := ($bitcast ($uint<32>) program_cnt_1 ) $buffering 8// bits of buffering = 256. 
            // start:  				EQ_u1_u1_662_662_delayed_8_0 := (regWrite == one_1) $buffering 8// bits of buffering = 8. 
            //  file prog.linked.opt.aa, line 183
            // Source expression
            // (regWrite == one_1)
            $T[EQ_u1_u1_696_sample_start_] 
            $T[EQ_u1_u1_696_sample_completed_] 
            $T[EQ_u1_u1_696_update_start_] 
            $T[EQ_u1_u1_696_update_completed_] 
            // regWrite
            // start: Forward dependencies from regWrite to transition EQ_u1_u1_696_sample_start_
            EQ_u1_u1_696_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from regWrite to transition EQ_u1_u1_696_sample_start_
            ;;[EQ_u1_u1_696_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u1_u1_696_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u1_u1_696_sample_start_ &-> (EQ_u1_u1_696_Sample)
            EQ_u1_u1_696_sample_completed_ <-& (EQ_u1_u1_696_Sample)
            EQ_u1_u1_696_sample_completed_ &-> ($null)
            EQ_u1_u1_696_update_start_ &-> (EQ_u1_u1_696_Update)
            EQ_u1_u1_696_update_completed_ <-& (EQ_u1_u1_696_Update)
            // RAW reenables for regWrite
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u1_u1_696_sample_completed_ 0)
            // self-release: 
            EQ_u1_u1_696_sample_start_ o<-& (EQ_u1_u1_696_sample_completed_ 1)
            $null &-> (EQ_u1_u1_696_update_start_)
            EQ_u1_u1_696_update_start_ o<-& (EQ_u1_u1_696_update_completed_ 0)
            // Target expression
            // (as target) EQ_u1_u1_662_662_delayed_8_0
            // start: WAR dependencies for EQ_u1_u1_662_662_delayed_8_0
            // done: WAR dependencies for EQ_u1_u1_662_662_delayed_8_0
            // end:  				EQ_u1_u1_662_662_delayed_8_0 := (regWrite == one_1) $buffering 8// bits of buffering = 8. 
            // start:  				MUX_667_667_delayed_1_0 := ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) // bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 184
            // Source expression
            // ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) 
            $T[MUX_706_sample_start_] 
            $T[MUX_706_sample_completed_] 
            $T[MUX_706_update_start_] 
            $T[MUX_706_update_completed_] 
            // EQ_u8_u1_657_657_delayed_8_0
            // type_cast_659_659_delayed_8_0
            // ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
            // EQ_u1_u1_662_662_delayed_8_0
            // exec_result
            // start: Forward dependencies from EQ_u8_u1_657_657_delayed_8_0 to transition MUX_706_sample_start_
            MUX_706_sample_start_ <-& (EQ_u8_u1_687_update_completed_)
            // done: Forward dependencies from EQ_u8_u1_657_657_delayed_8_0 to transition MUX_706_sample_start_
            // start: Forward dependencies from type_cast_659_659_delayed_8_0 to transition MUX_706_sample_start_
            MUX_706_sample_start_ <-& (type_cast_691_update_completed_)
            // done: Forward dependencies from type_cast_659_659_delayed_8_0 to transition MUX_706_sample_start_
            // start: Forward dependencies from ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  to transition MUX_706_sample_start_
            MUX_706_sample_start_ <-& (OR_u32_u32_562_update_completed_)
            MUX_706_sample_start_ <-& (EQ_u8_u1_567_update_completed_)
            MUX_706_sample_start_ <-& (assign_stmt_571_update_completed_)
            MUX_706_sample_start_ <-& (EQ_u1_u1_696_update_completed_)
            // done: Forward dependencies from ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  to transition MUX_706_sample_start_
            ;;[MUX_706_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_706_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_706_sample_start_ &-> (MUX_706_start)
            MUX_706_sample_completed_ <-& (MUX_706_start)
            MUX_706_sample_completed_ &-> ($null)
            MUX_706_update_start_ &-> (MUX_706_complete)
            MUX_706_update_completed_ <-& (MUX_706_complete)
            // RAW reenables for EQ_u8_u1_657_657_delayed_8_0
            EQ_u8_u1_687_update_start_ o<-& (MUX_706_sample_completed_ 0)
            // RAW reenables for type_cast_659_659_delayed_8_0
            type_cast_691_update_start_ o<-& (MUX_706_sample_completed_ 0)
            // RAW reenables for ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
            OR_u32_u32_562_update_start_ o<-& (MUX_706_sample_completed_ 0)
            EQ_u8_u1_567_update_start_ o<-& (MUX_706_sample_completed_ 0)
            assign_stmt_571_update_start_ o<-& (MUX_706_sample_completed_ 0)
            EQ_u1_u1_696_update_start_ o<-& (MUX_706_sample_completed_ 0)
            // self-release: 
            MUX_706_sample_start_ o<-& (MUX_706_sample_completed_ 1)
            $null &-> (MUX_706_update_start_)
            MUX_706_update_start_ o<-& (MUX_706_update_completed_ 0)
            // Target expression
            // (as target) MUX_667_667_delayed_1_0
            // start: WAR dependencies for MUX_667_667_delayed_1_0
            // done: WAR dependencies for MUX_667_667_delayed_1_0
            // end:  				MUX_667_667_delayed_1_0 := ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) // bits of buffering = 32. 
            // start:  				regWriteData := ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) // bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 185
            // Source expression
            // ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) 
            $T[MUX_712_sample_start_] 
            $T[MUX_712_sample_completed_] 
            $T[MUX_712_update_start_] 
            $T[MUX_712_update_completed_] 
            // EQ_u8_u1_653_653_delayed_9_0
            // memReadData
            // MUX_667_667_delayed_1_0
            // start: Forward dependencies from EQ_u8_u1_653_653_delayed_9_0 to transition MUX_712_sample_start_
            MUX_712_sample_start_ <-& (EQ_u8_u1_682_update_completed_)
            // done: Forward dependencies from EQ_u8_u1_653_653_delayed_9_0 to transition MUX_712_sample_start_
            // start: Forward dependencies from memReadData to transition MUX_712_sample_start_
            MUX_712_sample_start_ <-& (RPIPE_mem_out_667_update_completed_)
            // done: Forward dependencies from memReadData to transition MUX_712_sample_start_
            // start: Forward dependencies from MUX_667_667_delayed_1_0 to transition MUX_712_sample_start_
            MUX_712_sample_start_ <-& (MUX_706_update_completed_)
            // done: Forward dependencies from MUX_667_667_delayed_1_0 to transition MUX_712_sample_start_
            ;;[MUX_712_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_712_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_712_sample_start_ &-> (MUX_712_start)
            MUX_712_sample_completed_ <-& (MUX_712_start)
            MUX_712_sample_completed_ &-> ($null)
            MUX_712_update_start_ &-> (MUX_712_complete)
            MUX_712_update_completed_ <-& (MUX_712_complete)
            // RAW reenables for EQ_u8_u1_653_653_delayed_9_0
            EQ_u8_u1_682_update_start_ o<-& (MUX_712_sample_completed_ 0)
            // RAW reenables for memReadData
            RPIPE_mem_out_667_update_start_ o<-& (MUX_712_sample_completed_ 0)
            // RAW reenables for MUX_667_667_delayed_1_0
            MUX_706_update_start_ o<-& (MUX_712_sample_completed_ 0)
            // self-release: 
            MUX_712_sample_start_ o<-& (MUX_712_sample_completed_ 1)
            $null &-> (MUX_712_update_start_)
            MUX_712_update_start_ o<-& (MUX_712_update_completed_ 0)
            // Target expression
            // (as target) regWriteData
            // start: WAR dependencies for regWriteData
            // done: WAR dependencies for regWriteData
            // end:  				regWriteData := ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) // bits of buffering = 32. 
            // start:  				rs1_imm_671_delayed_10_0 := rs1_imm $buffering 10// bits of buffering = 80. 
            //  file prog.linked.opt.aa, line 186
            $T[assign_stmt_716_sample_start_] 
            $T[assign_stmt_716_sample_completed_] 
            $T[assign_stmt_716_update_start_] 
            $T[assign_stmt_716_update_completed_] 
            // Source expression
            // rs1_imm
            // Target expression
            // (as target) rs1_imm_671_delayed_10_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_716_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_716_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_716_sample_start_ &-> (assign_stmt_716_Sample)
            assign_stmt_716_sample_completed_ <-& (assign_stmt_716_Sample)
            assign_stmt_716_sample_completed_ &-> ($null)
            assign_stmt_716_update_start_ &-> (assign_stmt_716_Update)
            assign_stmt_716_update_completed_ <-& (assign_stmt_716_Update)
            // start: Forward dependencies from rs1_imm to transition assign_stmt_716_sample_start_
            assign_stmt_716_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rs1_imm to transition assign_stmt_716_sample_start_
            // RAW reenables for rs1_imm
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_716_sample_completed_ 0)
            // self-release: 
            assign_stmt_716_sample_start_ o<-& (assign_stmt_716_sample_completed_ 1)
            $null &-> (assign_stmt_716_update_start_)
            assign_stmt_716_update_start_ o<-& (assign_stmt_716_update_completed_ 0)
            // start: WAR dependencies for rs1_imm_671_delayed_10_0
            // done: WAR dependencies for rs1_imm_671_delayed_10_0
            // end:  				rs1_imm_671_delayed_10_0 := rs1_imm $buffering 10// bits of buffering = 80. 
            // start:  				rs2_673_delayed_10_0 := rs2 $buffering 10// bits of buffering = 80. 
            //  file prog.linked.opt.aa, line 187
            $T[assign_stmt_719_sample_start_] 
            $T[assign_stmt_719_sample_completed_] 
            $T[assign_stmt_719_update_start_] 
            $T[assign_stmt_719_update_completed_] 
            // Source expression
            // rs2
            // Target expression
            // (as target) rs2_673_delayed_10_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_719_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_719_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_719_sample_start_ &-> (assign_stmt_719_Sample)
            assign_stmt_719_sample_completed_ <-& (assign_stmt_719_Sample)
            assign_stmt_719_sample_completed_ &-> ($null)
            assign_stmt_719_update_start_ &-> (assign_stmt_719_Update)
            assign_stmt_719_update_completed_ <-& (assign_stmt_719_Update)
            // start: Forward dependencies from rs2 to transition assign_stmt_719_sample_start_
            assign_stmt_719_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rs2 to transition assign_stmt_719_sample_start_
            // RAW reenables for rs2
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_719_sample_completed_ 0)
            // self-release: 
            assign_stmt_719_sample_start_ o<-& (assign_stmt_719_sample_completed_ 1)
            $null &-> (assign_stmt_719_update_start_)
            assign_stmt_719_update_start_ o<-& (assign_stmt_719_update_completed_ 0)
            // start: WAR dependencies for rs2_673_delayed_10_0
            // done: WAR dependencies for rs2_673_delayed_10_0
            // end:  				rs2_673_delayed_10_0 := rs2 $buffering 10// bits of buffering = 80. 
            // start:  				regWrite_674_delayed_10_0 := regWrite $buffering 10// bits of buffering = 10. 
            //  file prog.linked.opt.aa, line 188
            $T[assign_stmt_722_sample_start_] 
            $T[assign_stmt_722_sample_completed_] 
            $T[assign_stmt_722_update_start_] 
            $T[assign_stmt_722_update_completed_] 
            // Source expression
            // regWrite
            // Target expression
            // (as target) regWrite_674_delayed_10_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_722_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_722_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_722_sample_start_ &-> (assign_stmt_722_Sample)
            assign_stmt_722_sample_completed_ <-& (assign_stmt_722_Sample)
            assign_stmt_722_sample_completed_ &-> ($null)
            assign_stmt_722_update_start_ &-> (assign_stmt_722_Update)
            assign_stmt_722_update_completed_ <-& (assign_stmt_722_Update)
            // start: Forward dependencies from regWrite to transition assign_stmt_722_sample_start_
            assign_stmt_722_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from regWrite to transition assign_stmt_722_sample_start_
            // RAW reenables for regWrite
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_722_sample_completed_ 0)
            // self-release: 
            assign_stmt_722_sample_start_ o<-& (assign_stmt_722_sample_completed_ 1)
            $null &-> (assign_stmt_722_update_start_)
            assign_stmt_722_update_start_ o<-& (assign_stmt_722_update_completed_ 0)
            // start: WAR dependencies for regWrite_674_delayed_10_0
            // done: WAR dependencies for regWrite_674_delayed_10_0
            // end:  				regWrite_674_delayed_10_0 := regWrite $buffering 10// bits of buffering = 10. 
            // start:  				rd_675_delayed_10_0 := rd $buffering 10// bits of buffering = 80. 
            //  file prog.linked.opt.aa, line 189
            $T[assign_stmt_725_sample_start_] 
            $T[assign_stmt_725_sample_completed_] 
            $T[assign_stmt_725_update_start_] 
            $T[assign_stmt_725_update_completed_] 
            // Source expression
            // rd
            // Target expression
            // (as target) rd_675_delayed_10_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_725_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_725_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_725_sample_start_ &-> (assign_stmt_725_Sample)
            assign_stmt_725_sample_completed_ <-& (assign_stmt_725_Sample)
            assign_stmt_725_sample_completed_ &-> ($null)
            assign_stmt_725_update_start_ &-> (assign_stmt_725_Update)
            assign_stmt_725_update_completed_ <-& (assign_stmt_725_Update)
            // start: Forward dependencies from rd to transition assign_stmt_725_sample_start_
            assign_stmt_725_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from rd to transition assign_stmt_725_sample_start_
            // RAW reenables for rd
            RPIPE_mem_out_341_update_start_ o<-& (assign_stmt_725_sample_completed_ 0)
            // self-release: 
            assign_stmt_725_sample_start_ o<-& (assign_stmt_725_sample_completed_ 1)
            $null &-> (assign_stmt_725_update_start_)
            assign_stmt_725_update_start_ o<-& (assign_stmt_725_update_completed_ 0)
            // start: WAR dependencies for rd_675_delayed_10_0
            // done: WAR dependencies for rd_675_delayed_10_0
            // end:  				rd_675_delayed_10_0 := rd $buffering 10// bits of buffering = 80. 
            // start: 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
            //  file prog.linked.opt.aa, line 190
            $T[call_stmt_735_sample_start_] 
            $T[call_stmt_735_sample_completed_] 
            $T[call_stmt_735_update_start_] 
            $T[call_stmt_735_update_completed_] 
            // Call input argument 0
            // Call input argument 1
            // rs1_imm_671_delayed_10_0
            // Call input argument 2
            // Call input argument 3
            // rs2_673_delayed_10_0
            // Call input argument 4
            // regWrite_674_delayed_10_0
            // Call input argument 5
            // rd_675_delayed_10_0
            // Call input argument 6
            // regWriteData
            // start: Forward dependencies from rs1_imm_671_delayed_10_0 to transition call_stmt_735_sample_start_
            call_stmt_735_sample_start_ <-& (assign_stmt_716_update_completed_)
            // done: Forward dependencies from rs1_imm_671_delayed_10_0 to transition call_stmt_735_sample_start_
            // RAW reenables for rs1_imm_671_delayed_10_0
            assign_stmt_716_update_start_ o<-& (call_stmt_735_sample_completed_ 0)
            // start: Forward dependencies from rs2_673_delayed_10_0 to transition call_stmt_735_sample_start_
            call_stmt_735_sample_start_ <-& (assign_stmt_719_update_completed_)
            // done: Forward dependencies from rs2_673_delayed_10_0 to transition call_stmt_735_sample_start_
            // RAW reenables for rs2_673_delayed_10_0
            assign_stmt_719_update_start_ o<-& (call_stmt_735_sample_completed_ 0)
            // start: Forward dependencies from regWrite_674_delayed_10_0 to transition call_stmt_735_sample_start_
            call_stmt_735_sample_start_ <-& (assign_stmt_722_update_completed_)
            // done: Forward dependencies from regWrite_674_delayed_10_0 to transition call_stmt_735_sample_start_
            // RAW reenables for regWrite_674_delayed_10_0
            assign_stmt_722_update_start_ o<-& (call_stmt_735_sample_completed_ 0)
            // start: Forward dependencies from rd_675_delayed_10_0 to transition call_stmt_735_sample_start_
            call_stmt_735_sample_start_ <-& (assign_stmt_725_update_completed_)
            // done: Forward dependencies from rd_675_delayed_10_0 to transition call_stmt_735_sample_start_
            // RAW reenables for rd_675_delayed_10_0
            assign_stmt_725_update_start_ o<-& (call_stmt_735_sample_completed_ 0)
            // start: Forward dependencies from regWriteData to transition call_stmt_735_sample_start_
            call_stmt_735_sample_start_ <-& (MUX_712_update_completed_)
            // done: Forward dependencies from regWriteData to transition call_stmt_735_sample_start_
            // RAW reenables for regWriteData
            MUX_712_update_start_ o<-& (call_stmt_735_sample_completed_ 0)
            ;;[call_stmt_735_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_735_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_735_sample_start_ &-> (call_stmt_735_Sample)
            call_stmt_735_sample_completed_ <-& (call_stmt_735_Sample)
            call_stmt_735_sample_completed_ &-> ($null)
            call_stmt_735_update_start_ &-> (call_stmt_735_Update)
            call_stmt_735_update_completed_ <-& (call_stmt_735_Update)
            // Call output argument 0
            // (as target) read_while_write1
            // Call output argument 1
            // (as target) read_while_write2
            // self-release: 
            call_stmt_735_sample_start_ o<-& (call_stmt_735_sample_completed_ 1)
            $null &-> (call_stmt_735_update_start_)
            call_stmt_735_update_start_ o<-& (call_stmt_735_update_completed_ 0)
            // start: WAR dependencies for read_while_write1
            // done: WAR dependencies for read_while_write1
            // start: WAR dependencies for read_while_write2
            // done: WAR dependencies for read_while_write2
            // end: 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
            // start:  				EQ_u8_u1_683_683_delayed_10_0 := (opcode == STORE) $buffering 10// bits of buffering = 10. 
            //  file prog.linked.opt.aa, line 191
            // Source expression
            // (opcode == STORE)
            $T[EQ_u8_u1_739_sample_start_] 
            $T[EQ_u8_u1_739_sample_completed_] 
            $T[EQ_u8_u1_739_update_start_] 
            $T[EQ_u8_u1_739_update_completed_] 
            // opcode
            // start: Forward dependencies from opcode to transition EQ_u8_u1_739_sample_start_
            EQ_u8_u1_739_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from opcode to transition EQ_u8_u1_739_sample_start_
            ;;[EQ_u8_u1_739_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[EQ_u8_u1_739_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            EQ_u8_u1_739_sample_start_ &-> (EQ_u8_u1_739_Sample)
            EQ_u8_u1_739_sample_completed_ <-& (EQ_u8_u1_739_Sample)
            EQ_u8_u1_739_sample_completed_ &-> ($null)
            EQ_u8_u1_739_update_start_ &-> (EQ_u8_u1_739_Update)
            EQ_u8_u1_739_update_completed_ <-& (EQ_u8_u1_739_Update)
            // RAW reenables for opcode
            RPIPE_mem_out_341_update_start_ o<-& (EQ_u8_u1_739_sample_completed_ 0)
            // self-release: 
            EQ_u8_u1_739_sample_start_ o<-& (EQ_u8_u1_739_sample_completed_ 1)
            $null &-> (EQ_u8_u1_739_update_start_)
            EQ_u8_u1_739_update_start_ o<-& (EQ_u8_u1_739_update_completed_ 0)
            // Target expression
            // (as target) EQ_u8_u1_683_683_delayed_10_0
            // start: WAR dependencies for EQ_u8_u1_683_683_delayed_10_0
            // done: WAR dependencies for EQ_u8_u1_683_683_delayed_10_0
            // end:  				EQ_u8_u1_683_683_delayed_10_0 := (opcode == STORE) $buffering 10// bits of buffering = 10. 
            // start:  				rd2_684_delayed_3_0 := rd2 $buffering 3// bits of buffering = 96. 
            //  file prog.linked.opt.aa, line 192
            $T[assign_stmt_743_sample_start_] 
            $T[assign_stmt_743_sample_completed_] 
            $T[assign_stmt_743_update_start_] 
            $T[assign_stmt_743_update_completed_] 
            // Source expression
            // rd2
            // Target expression
            // (as target) rd2_684_delayed_3_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_743_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_743_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_743_sample_start_ &-> (assign_stmt_743_Sample)
            assign_stmt_743_sample_completed_ <-& (assign_stmt_743_Sample)
            assign_stmt_743_sample_completed_ &-> ($null)
            assign_stmt_743_update_start_ &-> (assign_stmt_743_Update)
            assign_stmt_743_update_completed_ <-& (assign_stmt_743_Update)
            // start: Forward dependencies from rd2 to transition assign_stmt_743_sample_start_
            assign_stmt_743_sample_start_ <-& (call_stmt_368_update_completed_)
            // done: Forward dependencies from rd2 to transition assign_stmt_743_sample_start_
            // RAW reenables for rd2
            call_stmt_368_update_start_ o<-& (assign_stmt_743_sample_completed_ 0)
            // self-release: 
            assign_stmt_743_sample_start_ o<-& (assign_stmt_743_sample_completed_ 1)
            $null &-> (assign_stmt_743_update_start_)
            assign_stmt_743_update_start_ o<-& (assign_stmt_743_update_completed_ 0)
            // start: WAR dependencies for rd2_684_delayed_3_0
            // done: WAR dependencies for rd2_684_delayed_3_0
            // end:  				rd2_684_delayed_3_0 := rd2 $buffering 3// bits of buffering = 96. 
            // start:  				data_to_send_uart := ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) // bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 193
            // Source expression
            // ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) 
            $T[MUX_748_sample_start_] 
            $T[MUX_748_sample_completed_] 
            $T[MUX_748_update_start_] 
            $T[MUX_748_update_completed_] 
            // EQ_u8_u1_683_683_delayed_10_0
            // rd2_684_delayed_3_0
            // regWriteData
            // start: Forward dependencies from EQ_u8_u1_683_683_delayed_10_0 to transition MUX_748_sample_start_
            MUX_748_sample_start_ <-& (EQ_u8_u1_739_update_completed_)
            // done: Forward dependencies from EQ_u8_u1_683_683_delayed_10_0 to transition MUX_748_sample_start_
            // start: Forward dependencies from rd2_684_delayed_3_0 to transition MUX_748_sample_start_
            MUX_748_sample_start_ <-& (assign_stmt_743_update_completed_)
            // done: Forward dependencies from rd2_684_delayed_3_0 to transition MUX_748_sample_start_
            // start: Forward dependencies from regWriteData to transition MUX_748_sample_start_
            MUX_748_sample_start_ <-& (MUX_712_update_completed_)
            // done: Forward dependencies from regWriteData to transition MUX_748_sample_start_
            ;;[MUX_748_start] 
            {
              // ternary expression: 
              $T [req] $T [ack] // sample req/ack
            }
            ;;[MUX_748_complete] 
            {
              // ternary expression: 
              $T [req] $T [ack] // update req/ack
            }
            MUX_748_sample_start_ &-> (MUX_748_start)
            MUX_748_sample_completed_ <-& (MUX_748_start)
            MUX_748_sample_completed_ &-> ($null)
            MUX_748_update_start_ &-> (MUX_748_complete)
            MUX_748_update_completed_ <-& (MUX_748_complete)
            // RAW reenables for EQ_u8_u1_683_683_delayed_10_0
            EQ_u8_u1_739_update_start_ o<-& (MUX_748_sample_completed_ 0)
            // RAW reenables for rd2_684_delayed_3_0
            assign_stmt_743_update_start_ o<-& (MUX_748_sample_completed_ 0)
            // RAW reenables for regWriteData
            MUX_712_update_start_ o<-& (MUX_748_sample_completed_ 0)
            // self-release: 
            MUX_748_sample_start_ o<-& (MUX_748_sample_completed_ 1)
            $null &-> (MUX_748_update_start_)
            MUX_748_update_start_ o<-& (MUX_748_update_completed_ 0)
            // Target expression
            // (as target) data_to_send_uart
            // start: WAR dependencies for data_to_send_uart
            // done: WAR dependencies for data_to_send_uart
            // end:  				data_to_send_uart := ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) // bits of buffering = 32. 
            // start: 				$call send_to_uart (data_to_send_uart ) () 
            //  file prog.linked.opt.aa, line 194
            $T[call_stmt_751_sample_start_] 
            $T[call_stmt_751_sample_completed_] 
            $T[call_stmt_751_update_start_] 
            $T[call_stmt_751_update_completed_] 
            // Call input argument 0
            // data_to_send_uart
            // start: Forward dependencies from data_to_send_uart to transition call_stmt_751_sample_start_
            call_stmt_751_sample_start_ <-& (MUX_748_update_completed_)
            // done: Forward dependencies from data_to_send_uart to transition call_stmt_751_sample_start_
            // RAW reenables for data_to_send_uart
            MUX_748_update_start_ o<-& (call_stmt_751_sample_completed_ 0)
            ;;[call_stmt_751_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_751_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_751_sample_start_ &-> (call_stmt_751_Sample)
            call_stmt_751_sample_completed_ <-& (call_stmt_751_Sample)
            call_stmt_751_sample_completed_ &-> ($null)
            call_stmt_751_update_start_ &-> (call_stmt_751_Update)
            call_stmt_751_update_completed_ <-& (call_stmt_751_Update)
            // self-release: 
            call_stmt_751_sample_start_ o<-& (call_stmt_751_sample_completed_ 1)
            $null &-> (call_stmt_751_update_start_)
            call_stmt_751_update_start_ o<-& (call_stmt_751_update_completed_ 0)
            // end: 				$call send_to_uart (data_to_send_uart ) () 
            // ( ~ (opcode == HALT) )
            // (opcode == HALT)
            // opcode
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from ( ~ (opcode == HALT) ) to transition condition_evaluated
            condition_evaluated <-& (RPIPE_mem_out_341_update_completed_)
            // done: Forward dependencies from ( ~ (opcode == HALT) ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_0
            //  call_stmt_368 store
            //  call_stmt_735 store
            $T [call_stmt_368_call_stmt_735_delay] $delay
            // call_stmt_368(store) -> call_stmt_735(store)
            call_stmt_735_sample_start_ <-& (call_stmt_368_call_stmt_735_delay)
            call_stmt_368_call_stmt_735_delay <-& (call_stmt_368_update_completed_)
            // reenable across ring for memory space memory_space_0
            $T[ring_reenable_memory_space_0] 
            ring_reenable_memory_space_0 <-& (call_stmt_735_update_completed_)
            call_stmt_368_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            // pipe read/write dependencies for pipe out_pipe
            // read-dependencies for pipe out_pipe
            // write-dependencies for pipe out_pipe
            // signal dependencies for out_pipe
            // pipe read/write dependencies for pipe in_pipe
            // read-dependencies for pipe in_pipe
            // write-dependencies for pipe in_pipe
            // signal dependencies for in_pipe
            // pipe read/write dependencies for pipe mem_in
            // read-dependencies for pipe mem_in
            // write-dependencies for pipe mem_in
            WPIPE_mem_in_656_sample_start_ <-& (WPIPE_mem_in_331_update_completed_)
            // ring dependency in pipeline.
            WPIPE_mem_in_331_sample_start_ o<-& (WPIPE_mem_in_656_update_completed_ 0)
            // signal dependencies for mem_in
            // pipe read/write dependencies for pipe mem_out
            // read-dependencies for pipe mem_out
            RPIPE_mem_out_667_sample_start_ <-& (RPIPE_mem_out_341_update_completed_)
            // ring dependency in pipeline.
            RPIPE_mem_out_341_update_start_ o<-& (RPIPE_mem_out_667_update_completed_ 0)
            // write-dependencies for pipe mem_out
            // signal dependencies for mem_out
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_320__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_320_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_320__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_320_loop_body : condition_evaluated
          $bind do_while_stmt_320__entry__  => do_while_stmt_320_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_320_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_320__exit__)
        }
        do_while_stmt_320__entry__ |-> (do_while_stmt_320)
        do_while_stmt_320__exit__ <-| (do_while_stmt_320)
        do_while_stmt_320__entry__ <-| (branch_block_stmt_319__entry__)
        do_while_stmt_320__exit__ |-> (branch_block_stmt_319__exit__)
      }
      branch_block_stmt_319__entry__ |-> (branch_block_stmt_319)
      branch_block_stmt_319__exit__ <-| (branch_block_stmt_319)
      branch_block_stmt_319__entry__ <-| (if_stmt_315_if_link)
      check_for_start <-| (branch_block_stmt_319__exit__)
      if_stmt_315__exit__ <-| (if_stmt_315_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 126
      ;;[merge_stmt_311_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_311__entry__ |-> (merge_stmt_311_dead_link)
      merge_stmt_311__exit__ <-| (merge_stmt_311_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 126  --------------------------
      ||[merge_stmt_311__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_311__entry__ |-> (merge_stmt_311__entry___PhiReq)
      ||[check_for_start_PhiReq] 
      {
        // no phi statements in merge..
      }
      check_for_start |-> (check_for_start_PhiReq)
      $P [merge_stmt_311_PhiReqMerge] 
      merge_stmt_311_PhiReqMerge <-| ( merge_stmt_311__entry___PhiReq  check_for_start_PhiReq )
      ||[merge_stmt_311_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_311_PhiReqMerge |-> (merge_stmt_311_PhiAck)
      merge_stmt_311__exit__  <-| (merge_stmt_311_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 126  --------------------------
      merge_stmt_311__entry__ <-| (branch_block_stmt_310__entry__)
      assign_stmt_314__entry__ <-| (merge_stmt_311__exit__)
      if_stmt_315__entry__ <-| (assign_stmt_314__exit__)
      if_stmt_315__exit__ |-> (branch_block_stmt_310__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processor%check_start%
    //  file prog.linked.opt.aa, line 126
    // constant-object-declarations for block %processor%check_start%loop%
    //  file prog.linked.opt.aa, line 134
    // constant-object-declarations for block %processor%check_start%loop
    //  file prog.linked.opt.aa, line 130
    // constant-object-declarations for block %processor%check_start
    //  file prog.linked.opt.aa, line 124
    // constant-object-declarations for block %processor
    //  file prog.linked.opt.aa, line 119
    // constant-declarations for block %processor%check_start
    //  file prog.linked.opt.aa, line 124
    // constant-declarations for block %processor%check_start%
    //  file prog.linked.opt.aa, line 126
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // one_8
    $constant $W[R_one_8_317_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %processor%check_start%loop
    //  file prog.linked.opt.aa, line 130
    // do-while statement  
    //  file prog.linked.opt.aa, line 132
    // HALT
    $constant $W[R_HALT_754_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %processor%check_start%loop%
    //  file prog.linked.opt.aa, line 134
    // constant-declarations for phi:  				$phi program_cnt := 				  _b00000000  $on   $entry 				  n_program_cnt $on   $loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 135
    // _b00000000 
    $constant $W[konst_324_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  				$phi carry := 				  zero_32 $on   $entry 				  n_carry $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 137
    // zero_32
    $constant $W[R_zero_32_328_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // read_signal
    $constant $W[R_read_signal_332_wire_constant] : $int<1> := _b1// 1
    // (zero_23 && zero_32)
    $constant $W[CONCAT_u23_u55_337_wire_constant] : $int<55> := _b0000000000000000000000000000000000000000000000000000000// 0
    // 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
    //  file prog.linked.opt.aa, line 146
    // one_1
    $constant $W[R_one_1_359_wire_constant] : $int<1> := _b1// 1
    // one_1
    $constant $W[R_one_1_361_wire_constant] : $int<1> := _b1// 1
    // zero_1
    $constant $W[R_zero_1_363_wire_constant] : $int<1> := _b0// 0
    // zero_32
    $constant $W[R_zero_32_365_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (program_cnt == seven_8) one_32  zero_32 ) 
    // seven_8
    $constant $W[R_seven_8_371_wire_constant] : $int<8> := _b00000111// 7
    // one_32
    $constant $W[R_one_32_373_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // zero_32
    $constant $W[R_zero_32_374_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt )  $buffering 2
    //  file prog.linked.opt.aa, line 151
    // ADD
    $constant $W[R_ADD_401_wire_constant] : $int<8> := _b00001001// 9
    // L_SRL
    $constant $W[R_L_SRL_406_wire_constant] : $int<8> := _b00001100// 12
    // ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  ) 
    // SBIR
    $constant $W[R_SBIR_411_wire_constant] : $int<8> := _b00000010// 2
    // zero_24
    $constant $W[R_zero_24_413_wire_constant] : $int<24> := _b000000000000000000000000// 0
    // _b0 
    $constant $W[konst_416_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // L_AND
    $constant $W[R_L_AND_421_wire_constant] : $int<8> := _b00000101// 5
    // L_OR
    $constant $W[R_L_OR_426_wire_constant] : $int<8> := _b00000110// 6
    // L_XNOR
    $constant $W[R_L_XNOR_431_wire_constant] : $int<8> := _b00000111// 7
    // L_XOR
    $constant $W[R_L_XOR_436_wire_constant] : $int<8> := _b00001000// 8
    // ADD
    $constant $W[R_ADD_441_wire_constant] : $int<8> := _b00001001// 9
    // SUB
    $constant $W[R_SUB_446_wire_constant] : $int<8> := _b00001010// 10
    // L_SLL
    $constant $W[R_L_SLL_451_wire_constant] : $int<8> := _b00001011// 11
    // L_SRA
    $constant $W[R_L_SRA_456_wire_constant] : $int<8> := _b00001101// 13
    // CMP
    $constant $W[R_CMP_461_wire_constant] : $int<8> := _b00010010// 18
    // ( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_469_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_477_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_484_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_490_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_497_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_505_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) 
    // _b0 
    $constant $W[konst_511_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) 
    // _b0 
    $constant $W[konst_519_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    // _b0 
    $constant $W[konst_527_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    // _b0 
    $constant $W[konst_534_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) 
    // ( $mux (rd1 == rd2) zero_32  _b0  ) 
    // zero_32
    $constant $W[R_zero_32_541_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // _b0 
    $constant $W[konst_542_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (rd1 < rd2) minus_1  _b0  ) 
    // minus_1
    $constant $W[R_minus_1_547_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // _b0 
    $constant $W[konst_548_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (rd1 > rd2) one_32  _b0  ) 
    // one_32
    $constant $W[R_one_32_554_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // _b0 
    $constant $W[konst_555_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // _b0 
    $constant $W[konst_558_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ADD
    $constant $W[R_ADD_566_wire_constant] : $int<8> := _b00001001// 9
    // ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
    // ( $mux (opcode == STORE) zero_1  one_1 ) 
    // STORE
    $constant $W[R_STORE_582_wire_constant] : $int<8> := _b00000100// 4
    // zero_1
    $constant $W[R_zero_1_584_wire_constant] : $int<1> := _b0// 0
    // one_1
    $constant $W[R_one_1_585_wire_constant] : $int<1> := _b1// 1
    // SBIR
    $constant $W[R_SBIR_590_wire_constant] : $int<8> := _b00000010// 2
    // LOAD
    $constant $W[R_LOAD_593_wire_constant] : $int<8> := _b00000011// 3
    // L_AND
    $constant $W[R_L_AND_597_wire_constant] : $int<8> := _b00000101// 5
    // L_OR
    $constant $W[R_L_OR_601_wire_constant] : $int<8> := _b00000110// 6
    // L_XNOR
    $constant $W[R_L_XNOR_604_wire_constant] : $int<8> := _b00000111// 7
    // ADD
    $constant $W[R_ADD_608_wire_constant] : $int<8> := _b00001001// 9
    // SUB
    $constant $W[R_SUB_613_wire_constant] : $int<8> := _b00001010// 10
    // L_SLL
    $constant $W[R_L_SLL_616_wire_constant] : $int<8> := _b00001011// 11
    // L_SRL
    $constant $W[R_L_SRL_620_wire_constant] : $int<8> := _b00001100// 12
    // L_SRA
    $constant $W[R_L_SRA_624_wire_constant] : $int<8> := _b00001101// 13
    // CALL
    $constant $W[R_CALL_627_wire_constant] : $int<8> := _b00010000// 16
    // CMP
    $constant $W[R_CMP_631_wire_constant] : $int<8> := _b00010010// 18
    // ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
    // uart_addr
    $constant $W[R_uart_addr_643_wire_constant] : $int<8> := _b11111110// 254
    // one_1
    $constant $W[R_one_1_645_wire_constant] : $int<1> := _b1// 1
    // zero_1
    $constant $W[R_zero_1_646_wire_constant] : $int<1> := _b0// 0
    // zero_23
    $constant $W[R_zero_23_660_wire_constant] : $int<23> := _b00000000000000000000000// 0
    // 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
    //  file prog.linked.opt.aa, line 177
    // 1 
    $constant $W[konst_676_wire_constant] : $int<8> := _b00000001// 1
    // LOAD
    $constant $W[R_LOAD_681_wire_constant] : $int<8> := _b00000011// 3
    // CALL
    $constant $W[R_CALL_686_wire_constant] : $int<8> := _b00010000// 16
    // one_1
    $constant $W[R_one_1_695_wire_constant] : $int<1> := _b1// 1
    // ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) 
    // ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_704_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) 
    // 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
    //  file prog.linked.opt.aa, line 190
    // zero_1
    $constant $W[R_zero_1_726_wire_constant] : $int<1> := _b0// 0
    // zero_1
    $constant $W[R_zero_1_728_wire_constant] : $int<1> := _b0// 0
    // STORE
    $constant $W[R_STORE_738_wire_constant] : $int<8> := _b00000100// 4
    // ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) 
    // 				$call send_to_uart (data_to_send_uart ) () 
    //  file prog.linked.opt.aa, line 194
    // block %processor%check_start
    //  file prog.linked.opt.aa, line 124
    // 		cmd := start_processor// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 128
    // start_processor
    $W[RPIPE_start_processor_313_wire] : $int<8>
    // cmd
    $W[cmd_314] : $int<8>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (cmd == one_8)
    $intermediate $W[EQ_u8_u1_318_wire] : $int<1>
    // block %processor%check_start%loop
    //  file prog.linked.opt.aa, line 130
    // do-while statement  
    //  file prog.linked.opt.aa, line 132
    // (opcode == HALT)
    $intermediate $W[EQ_u8_u1_755_wire] : $int<1>
    // ( ~ (opcode == HALT) )
    $intermediate $W[NOT_u1_u1_756_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 134
    // 				$phi program_cnt := 				  _b00000000  $on   $entry 				  n_program_cnt $on   $loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 135
    $W[n_program_cnt_393_325_buffered] : $int<8>
    // program_cnt
    $W[program_cnt_322] : $int<8>
    // 				$phi carry := 				  zero_32 $on   $entry 				  n_carry $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 137
    $W[n_carry_376_329_buffered] : $int<32>
    // carry
    $W[carry_326] : $int<32>
    // 				mem_in := ((read_signal && program_cnt) && (zero_23 && zero_32))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 140
    // (read_signal && program_cnt)
    $intermediate $W[CONCAT_u1_u9_334_wire] : $int<9>
    // ((read_signal && program_cnt) && (zero_23 && zero_32))
    $intermediate $W[CONCAT_u9_u64_338_wire] : $int<64>
    // mem_in
    // 				instruction := mem_out// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 141
    // instruction
    $W[instruction_342] : $int<32>
    // 				$volatile opcode := ( $slice instruction 31 24 ) 
    //  file prog.linked.opt.aa, line 142
    // opcode
    $W[opcode_346] : $int<8>
    // 				$volatile rs1_imm := ( $slice instruction 23 16 ) 
    //  file prog.linked.opt.aa, line 143
    // rs1_imm
    $W[rs1_imm_350] : $int<8>
    // 				$volatile rs2 := ( $slice instruction 15 8 ) 
    //  file prog.linked.opt.aa, line 144
    // rs2
    $W[rs2_354] : $int<8>
    // 				$volatile rd := ( $slice instruction 7 0 ) 
    //  file prog.linked.opt.aa, line 145
    // rd
    $W[rd_358] : $int<8>
    // 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
    //  file prog.linked.opt.aa, line 146
    // rd1
    $W[rd1_368] : $int<32>
    // rd2
    $W[rd2_368] : $int<32>
    // 				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 )  $buffering 2// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 147
    // (program_cnt == seven_8)
    $intermediate $W[EQ_u8_u1_372_wire] : $int<1>
    // n_carry
    $W[n_carry_376] : $int<32>
    // 				$volatile is_rs1_neg := ( $slice rd1 31 31 ) 
    //  file prog.linked.opt.aa, line 148
    // is_rs1_neg
    $W[is_rs1_neg_380] : $int<1>
    // 				opcode_400_delayed_7_0 := opcode $buffering 7// bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 149
    // opcode_400_delayed_7_0
    $W[opcode_400_delayed_7_0_383] : $int<8>
    // 				program_cnt_403_delayed_7_0 := program_cnt $buffering 7// bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 150
    // program_cnt_403_delayed_7_0
    $W[program_cnt_403_delayed_7_0_386] : $int<8>
    // 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt )  $buffering 2
    //  file prog.linked.opt.aa, line 151
    // n_program_cnt
    $W[n_program_cnt_393] : $int<8>
    // 				EQ_u8_u1_418_418_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 153
    // EQ_u8_u1_418_418_delayed_7_0
    $W[EQ_u8_u1_418_418_delayed_7_0_403] : $int<1>
    // 				EQ_u8_u1_498_498_delayed_7_0 := (opcode == L_SRL) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 154
    // EQ_u8_u1_498_498_delayed_7_0
    $W[EQ_u8_u1_498_498_delayed_7_0_408] : $int<1>
    // 				MUX_431_431_delayed_7_0 := ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  )  $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 155
    // (opcode == SBIR)
    $intermediate $W[EQ_u8_u1_412_wire] : $int<1>
    // (zero_24 && rs1_imm)
    $intermediate $W[CONCAT_u24_u32_415_wire] : $int<32>
    // MUX_431_431_delayed_7_0
    $W[MUX_431_431_delayed_7_0_418] : $int<32>
    // 				EQ_u8_u1_435_435_delayed_7_0 := (opcode == L_AND) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 156
    // EQ_u8_u1_435_435_delayed_7_0
    $W[EQ_u8_u1_435_435_delayed_7_0_423] : $int<1>
    // 				EQ_u8_u1_444_444_delayed_7_0 := (opcode == L_OR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 157
    // EQ_u8_u1_444_444_delayed_7_0
    $W[EQ_u8_u1_444_444_delayed_7_0_428] : $int<1>
    // 				EQ_u8_u1_452_452_delayed_7_0 := (opcode == L_XNOR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 158
    // EQ_u8_u1_452_452_delayed_7_0
    $W[EQ_u8_u1_452_452_delayed_7_0_433] : $int<1>
    // 				EQ_u8_u1_461_461_delayed_7_0 := (opcode == L_XOR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 159
    // EQ_u8_u1_461_461_delayed_7_0
    $W[EQ_u8_u1_461_461_delayed_7_0_438] : $int<1>
    // 				EQ_u8_u1_471_471_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 160
    // EQ_u8_u1_471_471_delayed_7_0
    $W[EQ_u8_u1_471_471_delayed_7_0_443] : $int<1>
    // 				EQ_u8_u1_479_479_delayed_7_0 := (opcode == SUB) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 161
    // EQ_u8_u1_479_479_delayed_7_0
    $W[EQ_u8_u1_479_479_delayed_7_0_448] : $int<1>
    // 				EQ_u8_u1_488_488_delayed_7_0 := (opcode == L_SLL) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 162
    // EQ_u8_u1_488_488_delayed_7_0
    $W[EQ_u8_u1_488_488_delayed_7_0_453] : $int<1>
    // 				EQ_u8_u1_507_507_delayed_7_0 := (opcode == L_SRA) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 163
    // EQ_u8_u1_507_507_delayed_7_0
    $W[EQ_u8_u1_507_507_delayed_7_0_458] : $int<1>
    // 				EQ_u8_u1_517_517_delayed_7_0 := (opcode == CMP) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 164
    // EQ_u8_u1_517_517_delayed_7_0
    $W[EQ_u8_u1_517_517_delayed_7_0_463] : $int<1>
    // 				exec_result_init := ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 165
    // (rd1 + rd2)
    $intermediate $W[ADD_u32_u32_468_wire] : $int<32>
    // ( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  ) 
    $intermediate $W[MUX_470_wire] : $int<32>
    // (( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0)
    $intermediate $W[OR_u32_u32_472_wire] : $int<32>
    // (rd1 & rd2)
    $intermediate $W[AND_u32_u32_476_wire] : $int<32>
    // ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) 
    $intermediate $W[MUX_478_wire] : $int<32>
    // ((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) )
    $intermediate $W[OR_u32_u32_479_wire] : $int<32>
    // (rd1 | rd2)
    $intermediate $W[OR_u32_u32_483_wire] : $int<32>
    // ( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  ) 
    $intermediate $W[MUX_485_wire] : $int<32>
    // (rd1 ~^ rd2)
    $intermediate $W[XOR_u32_u32_489_wire] : $int<32>
    // ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) 
    $intermediate $W[MUX_491_wire] : $int<32>
    // (( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) )
    $intermediate $W[OR_u32_u32_492_wire] : $int<32>
    // (rd1 ^ rd2)
    $intermediate $W[XOR_u32_u32_496_wire] : $int<32>
    // ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) 
    $intermediate $W[MUX_498_wire] : $int<32>
    // ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )
    $intermediate $W[OR_u32_u32_499_wire] : $int<32>
    // (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) ))
    $intermediate $W[OR_u32_u32_500_wire] : $int<32>
    // (rd1 + rd2)
    $intermediate $W[ADD_u32_u32_504_wire] : $int<32>
    // ( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  ) 
    $intermediate $W[MUX_506_wire] : $int<32>
    // (rd1 - rd2)
    $intermediate $W[SUB_u32_u32_510_wire] : $int<32>
    // ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) 
    $intermediate $W[MUX_512_wire] : $int<32>
    // (( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) )
    $intermediate $W[OR_u32_u32_513_wire] : $int<32>
    // (rd1 << rd2)
    $intermediate $W[SHL_u32_u32_517_wire] : $int<32>
    // ($bitcast ($uint<32>) (rd1 << rd2) )
    $intermediate $W[type_cast_518_wire] : $int<32>
    // ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) 
    $intermediate $W[MUX_520_wire] : $int<32>
    // ((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) )
    $intermediate $W[OR_u32_u32_521_wire] : $int<32>
    // (rd1 >> rd2)
    $intermediate $W[LSHR_u32_u32_525_wire] : $int<32>
    // ($bitcast ($uint<32>) (rd1 >> rd2) )
    $intermediate $W[type_cast_526_wire] : $int<32>
    // ( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    $intermediate $W[MUX_528_wire] : $int<32>
    // (rd1 >> rd2)
    $intermediate $W[LSHR_u32_u32_532_wire] : $int<32>
    // ($bitcast ($uint<32>) (rd1 >> rd2) )
    $intermediate $W[type_cast_533_wire] : $int<32>
    // ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    $intermediate $W[MUX_535_wire] : $int<32>
    // (( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) )
    $intermediate $W[OR_u32_u32_536_wire] : $int<32>
    // (rd1 == rd2)
    $intermediate $W[EQ_u32_u1_540_wire] : $int<1>
    // ( $mux (rd1 == rd2) zero_32  _b0  ) 
    $intermediate $W[MUX_543_wire] : $int<32>
    // (rd1 < rd2)
    $intermediate $W[ULT_u32_u1_546_wire] : $int<1>
    // ( $mux (rd1 < rd2) minus_1  _b0  ) 
    $intermediate $W[MUX_549_wire] : $int<32>
    // (( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) )
    $intermediate $W[OR_u32_u32_550_wire] : $int<32>
    // (rd1 > rd2)
    $intermediate $W[UGT_u32_u1_553_wire] : $int<1>
    // ( $mux (rd1 > rd2) one_32  _b0  ) 
    $intermediate $W[MUX_556_wire] : $int<32>
    // ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )
    $intermediate $W[OR_u32_u32_557_wire] : $int<32>
    // ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) 
    $intermediate $W[MUX_559_wire] : $int<32>
    // ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )
    $intermediate $W[OR_u32_u32_560_wire] : $int<32>
    // (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) ))
    $intermediate $W[OR_u32_u32_561_wire] : $int<32>
    // exec_result_init
    $W[exec_result_init_563] : $int<32>
    // 				EQ_u8_u1_547_547_delayed_8_0 := (opcode == ADD) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // EQ_u8_u1_547_547_delayed_8_0
    $W[EQ_u8_u1_547_547_delayed_8_0_568] : $int<1>
    // 				carry_549_delayed_8_0 := carry $buffering 8// bits of buffering = 256. 
    //  file prog.linked.opt.aa, line 167
    // carry_549_delayed_8_0
    $W[carry_549_delayed_8_0_571] : $int<32>
    // 				$volatile exec_result := ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
    //  file prog.linked.opt.aa, line 168
    // (exec_result_init + carry_549_delayed_8_0)
    $intermediate $W[ADD_u32_u32_576_wire] : $int<32>
    // exec_result
    $W[exec_result_579] : $int<32>
    // 				$volatile memWrite := ( $mux (opcode == STORE) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 169
    // (opcode == STORE)
    $intermediate $W[EQ_u8_u1_583_wire] : $int<1>
    // memWrite
    $W[memWrite_587] : $int<1>
    // 				$volatile regWrite := (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
    //  file prog.linked.opt.aa, line 170
    // (opcode == SBIR)
    $intermediate $W[EQ_u8_u1_591_wire] : $int<1>
    // (opcode == LOAD)
    $intermediate $W[EQ_u8_u1_594_wire] : $int<1>
    // ((opcode == SBIR) | (opcode == LOAD))
    $intermediate $W[OR_u1_u1_595_wire] : $int<1>
    // (opcode == L_AND)
    $intermediate $W[EQ_u8_u1_598_wire] : $int<1>
    // (((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND))
    $intermediate $W[OR_u1_u1_599_wire] : $int<1>
    // (opcode == L_OR)
    $intermediate $W[EQ_u8_u1_602_wire] : $int<1>
    // (opcode == L_XNOR)
    $intermediate $W[EQ_u8_u1_605_wire] : $int<1>
    // ((opcode == L_OR) | (opcode == L_XNOR))
    $intermediate $W[OR_u1_u1_606_wire] : $int<1>
    // (opcode == ADD)
    $intermediate $W[EQ_u8_u1_609_wire] : $int<1>
    // (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))
    $intermediate $W[OR_u1_u1_610_wire] : $int<1>
    // ((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD)))
    $intermediate $W[OR_u1_u1_611_wire] : $int<1>
    // (opcode == SUB)
    $intermediate $W[EQ_u8_u1_614_wire] : $int<1>
    // (opcode == L_SLL)
    $intermediate $W[EQ_u8_u1_617_wire] : $int<1>
    // ((opcode == SUB) | (opcode == L_SLL))
    $intermediate $W[OR_u1_u1_618_wire] : $int<1>
    // (opcode == L_SRL)
    $intermediate $W[EQ_u8_u1_621_wire] : $int<1>
    // (((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL))
    $intermediate $W[OR_u1_u1_622_wire] : $int<1>
    // (opcode == L_SRA)
    $intermediate $W[EQ_u8_u1_625_wire] : $int<1>
    // (opcode == CALL)
    $intermediate $W[EQ_u8_u1_628_wire] : $int<1>
    // ((opcode == L_SRA) | (opcode == CALL))
    $intermediate $W[OR_u1_u1_629_wire] : $int<1>
    // (opcode == CMP)
    $intermediate $W[EQ_u8_u1_632_wire] : $int<1>
    // (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))
    $intermediate $W[OR_u1_u1_633_wire] : $int<1>
    // ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP)))
    $intermediate $W[OR_u1_u1_634_wire] : $int<1>
    // regWrite
    $W[regWrite_636] : $int<1>
    // 				memAddr := ( $slice rd1 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 171
    // memAddr
    $W[memAddr_640] : $int<8>
    // 				$volatile is_uart_addr := ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
    //  file prog.linked.opt.aa, line 172
    // (memAddr == uart_addr)
    $intermediate $W[EQ_u8_u1_644_wire] : $int<1>
    // is_uart_addr
    $W[is_uart_addr_648] : $int<1>
    // 				memWrite_625_delayed_8_0 := memWrite $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 173
    // memWrite_625_delayed_8_0
    $W[memWrite_625_delayed_8_0_651] : $int<1>
    // 				rd2_629_delayed_1_0 := rd2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 174
    // rd2_629_delayed_1_0
    $W[rd2_629_delayed_1_0_654] : $int<32>
    // 				$guard (~is_uart_addr) mem_in := ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 175
    // (memWrite_625_delayed_8_0 && memAddr)
    $intermediate $W[CONCAT_u1_u9_659_wire] : $int<9>
    // (zero_23 && rd2_629_delayed_1_0)
    $intermediate $W[CONCAT_u23_u55_662_wire] : $int<55>
    // ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))
    $intermediate $W[CONCAT_u9_u64_663_wire] : $int<64>
    // mem_in
    // 				$guard (~is_uart_addr) memReadData := mem_out// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 176
    // memReadData
    $W[memReadData_668] : $int<32>
    // 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
    //  file prog.linked.opt.aa, line 177
    // data_from_uart
    $W[data_from_uart_671] : $int<32>
    // 				$volatile program_cnt_1 := (program_cnt + 1 )
    //  file prog.linked.opt.aa, line 179
    // program_cnt_1
    $W[program_cnt_1_678] : $int<8>
    // 				EQ_u8_u1_653_653_delayed_9_0 := (opcode == LOAD) $buffering 9// bits of buffering = 9. 
    //  file prog.linked.opt.aa, line 180
    // EQ_u8_u1_653_653_delayed_9_0
    $W[EQ_u8_u1_653_653_delayed_9_0_683] : $int<1>
    // 				EQ_u8_u1_657_657_delayed_8_0 := (opcode == CALL) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 181
    // EQ_u8_u1_657_657_delayed_8_0
    $W[EQ_u8_u1_657_657_delayed_8_0_688] : $int<1>
    // 				type_cast_659_659_delayed_8_0 := ($bitcast ($uint<32>) program_cnt_1 ) $buffering 8// bits of buffering = 256. 
    //  file prog.linked.opt.aa, line 182
    // type_cast_659_659_delayed_8_0
    $W[type_cast_659_659_delayed_8_0_692] : $int<32>
    // 				EQ_u1_u1_662_662_delayed_8_0 := (regWrite == one_1) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 183
    // EQ_u1_u1_662_662_delayed_8_0
    $W[EQ_u1_u1_662_662_delayed_8_0_697] : $int<1>
    // 				MUX_667_667_delayed_1_0 := ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 184
    // ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
    $intermediate $W[MUX_705_wire] : $int<32>
    // MUX_667_667_delayed_1_0
    $W[MUX_667_667_delayed_1_0_707] : $int<32>
    // 				regWriteData := ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 185
    // regWriteData
    $W[regWriteData_713] : $int<32>
    // 				rs1_imm_671_delayed_10_0 := rs1_imm $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 186
    // rs1_imm_671_delayed_10_0
    $W[rs1_imm_671_delayed_10_0_716] : $int<8>
    // 				rs2_673_delayed_10_0 := rs2 $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 187
    // rs2_673_delayed_10_0
    $W[rs2_673_delayed_10_0_719] : $int<8>
    // 				regWrite_674_delayed_10_0 := regWrite $buffering 10// bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 188
    // regWrite_674_delayed_10_0
    $W[regWrite_674_delayed_10_0_722] : $int<1>
    // 				rd_675_delayed_10_0 := rd $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 189
    // rd_675_delayed_10_0
    $W[rd_675_delayed_10_0_725] : $int<8>
    // 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
    //  file prog.linked.opt.aa, line 190
    // read_while_write1
    $W[read_while_write1_735] : $int<32>
    // read_while_write2
    $W[read_while_write2_735] : $int<32>
    // 				EQ_u8_u1_683_683_delayed_10_0 := (opcode == STORE) $buffering 10// bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 191
    // EQ_u8_u1_683_683_delayed_10_0
    $W[EQ_u8_u1_683_683_delayed_10_0_740] : $int<1>
    // 				rd2_684_delayed_3_0 := rd2 $buffering 3// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 192
    // rd2_684_delayed_3_0
    $W[rd2_684_delayed_3_0_743] : $int<32>
    // 				data_to_send_uart := ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 193
    // data_to_send_uart
    $W[data_to_send_uart_749] : $int<32>
    // 				$call send_to_uart (data_to_send_uart ) () 
    //  file prog.linked.opt.aa, line 194
    // datapath-instances for block %processor%check_start
    //  file prog.linked.opt.aa, line 124
    // 		cmd := start_processor// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 128
    # := [W_cmd_312_inst] (RPIPE_start_processor_313_wire) (cmd_314)   
    // start_processor
    $ioport $in [RPIPE_start_processor_313_inst] (start_processor) (RPIPE_start_processor_313_wire) 
    $buffering $out RPIPE_start_processor_313_inst RPIPE_start_processor_313_wire 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (cmd == one_8)
    ==[EQ_u8_u1_318_inst] (cmd_314 R_one_8_317_wire_constant) (EQ_u8_u1_318_wire)   $flowthrough 
    $delay EQ_u8_u1_318_inst 0
    ==0? [if_stmt_315_branch] (EQ_u8_u1_318_wire)
    // datapath-instances for block %processor%check_start%loop
    //  file prog.linked.opt.aa, line 130
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 132
    // (opcode == HALT)
    ==[EQ_u8_u1_755_inst] (opcode_346 R_HALT_754_wire_constant) (EQ_u8_u1_755_wire)   $flowthrough 
    $delay EQ_u8_u1_755_inst 0
    // ( ~ (opcode == HALT) )
    ~ [NOT_u1_u1_756_inst] (EQ_u8_u1_755_wire) (NOT_u1_u1_756_wire)   $flowthrough
    $delay NOT_u1_u1_756_inst 0
    ==0? [do_while_stmt_320_branch] (NOT_u1_u1_756_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 134
    // 				$phi program_cnt := 				  _b00000000  $on   $entry 				  n_program_cnt $on   $loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 135
    # := [n_program_cnt_393_325_buf] (n_program_cnt_393) (n_program_cnt_393_325_buffered)    $fullrate
    $buffering $out n_program_cnt_393_325_buf n_program_cnt_393_325_buffered  1
    # $phi [phi_stmt_322] (konst_324_wire_constant n_program_cnt_393_325_buffered) ( program_cnt_322 ) $fullrate
    // $buffering  $out phi_stmt_322 program_cnt_322 2
    // 				$phi carry := 				  zero_32 $on   $entry 				  n_carry $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 137
    # := [n_carry_376_329_buf] (n_carry_376) (n_carry_376_329_buffered)    $fullrate
    $buffering $out n_carry_376_329_buf n_carry_376_329_buffered  1
    # $phi [phi_stmt_326] (R_zero_32_328_wire_constant n_carry_376_329_buffered) ( carry_326 ) $fullrate
    // $buffering  $out phi_stmt_326 carry_326 2
    // 				mem_in := ((read_signal && program_cnt) && (zero_23 && zero_32))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 140
    // (read_signal && program_cnt)
    &&[CONCAT_u1_u9_334_inst] (R_read_signal_332_wire_constant program_cnt_322) (CONCAT_u1_u9_334_wire)   $flowthrough 
    $delay CONCAT_u1_u9_334_inst 0
    // ((read_signal && program_cnt) && (zero_23 && zero_32))
    &&[CONCAT_u9_u64_338_inst] (CONCAT_u1_u9_334_wire CONCAT_u23_u55_337_wire_constant) (CONCAT_u9_u64_338_wire)    $fullrate
    $buffering  $out CONCAT_u9_u64_338_inst CONCAT_u9_u64_338_wire 1
    $delay CONCAT_u9_u64_338_inst 1
    // mem_in
    $ioport $out [WPIPE_mem_in_331_inst]  (CONCAT_u9_u64_338_wire) (mem_in)  $fullrate 
    // 				instruction := mem_out// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 141
    // mem_out
    $ioport $in [RPIPE_mem_out_341_inst] (mem_out) (instruction_342)  $fullrate 
    $buffering $out RPIPE_mem_out_341_inst instruction_342 1
    // 				$volatile opcode := ( $slice instruction 31 24 ) 
    //  file prog.linked.opt.aa, line 142
    // ( $slice instruction 31 24 ) 
    [:] [slice_345_inst] (instruction_342 31 24) (opcode_346)  $flowthrough
    $delay slice_345_inst 0
    // 				$volatile rs1_imm := ( $slice instruction 23 16 ) 
    //  file prog.linked.opt.aa, line 143
    // ( $slice instruction 23 16 ) 
    [:] [slice_349_inst] (instruction_342 23 16) (rs1_imm_350)  $flowthrough
    $delay slice_349_inst 0
    // 				$volatile rs2 := ( $slice instruction 15 8 ) 
    //  file prog.linked.opt.aa, line 144
    // ( $slice instruction 15 8 ) 
    [:] [slice_353_inst] (instruction_342 15 8) (rs2_354)  $flowthrough
    $delay slice_353_inst 0
    // 				$volatile rd := ( $slice instruction 7 0 ) 
    //  file prog.linked.opt.aa, line 145
    // ( $slice instruction 7 0 ) 
    [:] [slice_357_inst] (instruction_342 7 0) (rd_358)  $flowthrough
    $delay slice_357_inst 0
    // 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
    //  file prog.linked.opt.aa, line 146
    $call [call_stmt_368_call] $module registerFileModule(R_one_1_359_wire_constant rs1_imm_350 R_one_1_361_wire_constant rs2_354 R_zero_1_363_wire_constant rd_358 R_zero_32_365_wire_constant) (rd1_368 rd2_368)   $fullrate
    $delay call_stmt_368_call 7
    $buffering  $in call_stmt_368_call R_one_1_359_wire_constant 1
    $buffering  $in call_stmt_368_call rs1_imm_350 1
    $buffering  $in call_stmt_368_call R_one_1_361_wire_constant 1
    $buffering  $in call_stmt_368_call rs2_354 1
    $buffering  $in call_stmt_368_call R_zero_1_363_wire_constant 1
    $buffering  $in call_stmt_368_call rd_358 1
    $buffering  $in call_stmt_368_call R_zero_32_365_wire_constant 1
    $buffering  $out call_stmt_368_call rd1_368 1
    $buffering  $out call_stmt_368_call rd2_368 1
    // 				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 )  $buffering 2// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 147
    // (program_cnt == seven_8)
    ==[EQ_u8_u1_372_inst] (program_cnt_322 R_seven_8_371_wire_constant) (EQ_u8_u1_372_wire)   $flowthrough 
    $delay EQ_u8_u1_372_inst 0
    // ( $mux (program_cnt == seven_8) one_32  zero_32 ) 
    ? [MUX_375_inst] (EQ_u8_u1_372_wire R_one_32_373_wire_constant R_zero_32_374_wire_constant) (n_carry_376)  $fullrate
    $buffering  $out MUX_375_inst n_carry_376 2
    // 				$volatile is_rs1_neg := ( $slice rd1 31 31 ) 
    //  file prog.linked.opt.aa, line 148
    // ( $slice rd1 31 31 ) 
    [:] [slice_379_inst] (rd1_368 31 31) (is_rs1_neg_380)  $flowthrough
    $delay slice_379_inst 0
    // 				opcode_400_delayed_7_0 := opcode $buffering 7// bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 149
    # := [W_opcode_400_delayed_7_0_381_inst] (opcode_346) (opcode_400_delayed_7_0_383)    $fullrate
    $buffering  $out W_opcode_400_delayed_7_0_381_inst opcode_400_delayed_7_0_383 7
    // 				program_cnt_403_delayed_7_0 := program_cnt $buffering 7// bits of buffering = 56. 
    //  file prog.linked.opt.aa, line 150
    # := [W_program_cnt_403_delayed_7_0_384_inst] (program_cnt_322) (program_cnt_403_delayed_7_0_386)    $fullrate
    $buffering  $out W_program_cnt_403_delayed_7_0_384_inst program_cnt_403_delayed_7_0_386 7
    // 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt )  $buffering 2
    //  file prog.linked.opt.aa, line 151
    $call [call_stmt_393_call] $module cal_Next_program_cnt(opcode_400_delayed_7_0_383 rd1_368 rd2_368 program_cnt_403_delayed_7_0_386 is_rs1_neg_380) (n_program_cnt_393)   $fullrate
    $delay call_stmt_393_call 4
    $buffering  $in call_stmt_393_call opcode_400_delayed_7_0_383 2
    $buffering  $in call_stmt_393_call rd1_368 2
    $buffering  $in call_stmt_393_call rd2_368 2
    $buffering  $in call_stmt_393_call program_cnt_403_delayed_7_0_386 2
    $buffering  $in call_stmt_393_call is_rs1_neg_380 2
    $buffering  $out call_stmt_393_call n_program_cnt_393 2
    // 				EQ_u8_u1_418_418_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 153
    // (opcode == ADD)
    ==[EQ_u8_u1_402_inst] (opcode_346 R_ADD_401_wire_constant) (EQ_u8_u1_418_418_delayed_7_0_403)    $fullrate
    $buffering  $out EQ_u8_u1_402_inst EQ_u8_u1_418_418_delayed_7_0_403 7
    $delay EQ_u8_u1_402_inst 1
    // 				EQ_u8_u1_498_498_delayed_7_0 := (opcode == L_SRL) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 154
    // (opcode == L_SRL)
    ==[EQ_u8_u1_407_inst] (opcode_346 R_L_SRL_406_wire_constant) (EQ_u8_u1_498_498_delayed_7_0_408)    $fullrate
    $buffering  $out EQ_u8_u1_407_inst EQ_u8_u1_498_498_delayed_7_0_408 7
    $delay EQ_u8_u1_407_inst 1
    // 				MUX_431_431_delayed_7_0 := ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  )  $buffering 7// bits of buffering = 224. 
    //  file prog.linked.opt.aa, line 155
    // (opcode == SBIR)
    ==[EQ_u8_u1_412_inst] (opcode_346 R_SBIR_411_wire_constant) (EQ_u8_u1_412_wire)   $flowthrough 
    $delay EQ_u8_u1_412_inst 0
    // (zero_24 && rs1_imm)
    &&[CONCAT_u24_u32_415_inst] (R_zero_24_413_wire_constant rs1_imm_350) (CONCAT_u24_u32_415_wire)   $flowthrough 
    $delay CONCAT_u24_u32_415_inst 0
    // ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  ) 
    ? [MUX_417_inst] (EQ_u8_u1_412_wire CONCAT_u24_u32_415_wire konst_416_wire_constant) (MUX_431_431_delayed_7_0_418)  $fullrate
    $buffering  $out MUX_417_inst MUX_431_431_delayed_7_0_418 7
    // 				EQ_u8_u1_435_435_delayed_7_0 := (opcode == L_AND) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 156
    // (opcode == L_AND)
    ==[EQ_u8_u1_422_inst] (opcode_346 R_L_AND_421_wire_constant) (EQ_u8_u1_435_435_delayed_7_0_423)    $fullrate
    $buffering  $out EQ_u8_u1_422_inst EQ_u8_u1_435_435_delayed_7_0_423 7
    $delay EQ_u8_u1_422_inst 1
    // 				EQ_u8_u1_444_444_delayed_7_0 := (opcode == L_OR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 157
    // (opcode == L_OR)
    ==[EQ_u8_u1_427_inst] (opcode_346 R_L_OR_426_wire_constant) (EQ_u8_u1_444_444_delayed_7_0_428)    $fullrate
    $buffering  $out EQ_u8_u1_427_inst EQ_u8_u1_444_444_delayed_7_0_428 7
    $delay EQ_u8_u1_427_inst 1
    // 				EQ_u8_u1_452_452_delayed_7_0 := (opcode == L_XNOR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 158
    // (opcode == L_XNOR)
    ==[EQ_u8_u1_432_inst] (opcode_346 R_L_XNOR_431_wire_constant) (EQ_u8_u1_452_452_delayed_7_0_433)    $fullrate
    $buffering  $out EQ_u8_u1_432_inst EQ_u8_u1_452_452_delayed_7_0_433 7
    $delay EQ_u8_u1_432_inst 1
    // 				EQ_u8_u1_461_461_delayed_7_0 := (opcode == L_XOR) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 159
    // (opcode == L_XOR)
    ==[EQ_u8_u1_437_inst] (opcode_346 R_L_XOR_436_wire_constant) (EQ_u8_u1_461_461_delayed_7_0_438)    $fullrate
    $buffering  $out EQ_u8_u1_437_inst EQ_u8_u1_461_461_delayed_7_0_438 7
    $delay EQ_u8_u1_437_inst 1
    // 				EQ_u8_u1_471_471_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 160
    // (opcode == ADD)
    ==[EQ_u8_u1_442_inst] (opcode_346 R_ADD_441_wire_constant) (EQ_u8_u1_471_471_delayed_7_0_443)    $fullrate
    $buffering  $out EQ_u8_u1_442_inst EQ_u8_u1_471_471_delayed_7_0_443 7
    $delay EQ_u8_u1_442_inst 1
    // 				EQ_u8_u1_479_479_delayed_7_0 := (opcode == SUB) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 161
    // (opcode == SUB)
    ==[EQ_u8_u1_447_inst] (opcode_346 R_SUB_446_wire_constant) (EQ_u8_u1_479_479_delayed_7_0_448)    $fullrate
    $buffering  $out EQ_u8_u1_447_inst EQ_u8_u1_479_479_delayed_7_0_448 7
    $delay EQ_u8_u1_447_inst 1
    // 				EQ_u8_u1_488_488_delayed_7_0 := (opcode == L_SLL) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 162
    // (opcode == L_SLL)
    ==[EQ_u8_u1_452_inst] (opcode_346 R_L_SLL_451_wire_constant) (EQ_u8_u1_488_488_delayed_7_0_453)    $fullrate
    $buffering  $out EQ_u8_u1_452_inst EQ_u8_u1_488_488_delayed_7_0_453 7
    $delay EQ_u8_u1_452_inst 1
    // 				EQ_u8_u1_507_507_delayed_7_0 := (opcode == L_SRA) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 163
    // (opcode == L_SRA)
    ==[EQ_u8_u1_457_inst] (opcode_346 R_L_SRA_456_wire_constant) (EQ_u8_u1_507_507_delayed_7_0_458)    $fullrate
    $buffering  $out EQ_u8_u1_457_inst EQ_u8_u1_507_507_delayed_7_0_458 7
    $delay EQ_u8_u1_457_inst 1
    // 				EQ_u8_u1_517_517_delayed_7_0 := (opcode == CMP) $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 164
    // (opcode == CMP)
    ==[EQ_u8_u1_462_inst] (opcode_346 R_CMP_461_wire_constant) (EQ_u8_u1_517_517_delayed_7_0_463)    $fullrate
    $buffering  $out EQ_u8_u1_462_inst EQ_u8_u1_517_517_delayed_7_0_463 7
    $delay EQ_u8_u1_462_inst 1
    // 				exec_result_init := ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 165
    // (rd1 + rd2)
    +[ADD_u32_u32_468_inst] (rd1_368 rd2_368) (ADD_u32_u32_468_wire)   $flowthrough 
    $delay ADD_u32_u32_468_inst 0
    // ( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  ) 
    ? [MUX_470_inst] (EQ_u8_u1_418_418_delayed_7_0_403 ADD_u32_u32_468_wire konst_469_wire_constant) (MUX_470_wire)  $flowthrough
    // (( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0)
    |[OR_u32_u32_472_inst] (MUX_470_wire MUX_431_431_delayed_7_0_418) (OR_u32_u32_472_wire)   $flowthrough 
    $delay OR_u32_u32_472_inst 0
    // (rd1 & rd2)
    &[AND_u32_u32_476_inst] (rd1_368 rd2_368) (AND_u32_u32_476_wire)   $flowthrough 
    $delay AND_u32_u32_476_inst 0
    // ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) 
    ? [MUX_478_inst] (EQ_u8_u1_435_435_delayed_7_0_423 AND_u32_u32_476_wire konst_477_wire_constant) (MUX_478_wire)  $flowthrough
    // ((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) )
    |[OR_u32_u32_479_inst] (OR_u32_u32_472_wire MUX_478_wire) (OR_u32_u32_479_wire)   $flowthrough 
    $delay OR_u32_u32_479_inst 0
    // (rd1 | rd2)
    |[OR_u32_u32_483_inst] (rd1_368 rd2_368) (OR_u32_u32_483_wire)   $flowthrough 
    $delay OR_u32_u32_483_inst 0
    // ( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  ) 
    ? [MUX_485_inst] (EQ_u8_u1_444_444_delayed_7_0_428 OR_u32_u32_483_wire konst_484_wire_constant) (MUX_485_wire)  $flowthrough
    // (rd1 ~^ rd2)
    ~^[XOR_u32_u32_489_inst] (rd1_368 rd2_368) (XOR_u32_u32_489_wire)   $flowthrough 
    $delay XOR_u32_u32_489_inst 0
    // ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) 
    ? [MUX_491_inst] (EQ_u8_u1_452_452_delayed_7_0_433 XOR_u32_u32_489_wire konst_490_wire_constant) (MUX_491_wire)  $flowthrough
    // (( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) )
    |[OR_u32_u32_492_inst] (MUX_485_wire MUX_491_wire) (OR_u32_u32_492_wire)   $flowthrough 
    $delay OR_u32_u32_492_inst 0
    // (rd1 ^ rd2)
    ^[XOR_u32_u32_496_inst] (rd1_368 rd2_368) (XOR_u32_u32_496_wire)   $flowthrough 
    $delay XOR_u32_u32_496_inst 0
    // ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) 
    ? [MUX_498_inst] (EQ_u8_u1_461_461_delayed_7_0_438 XOR_u32_u32_496_wire konst_497_wire_constant) (MUX_498_wire)  $flowthrough
    // ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )
    |[OR_u32_u32_499_inst] (OR_u32_u32_492_wire MUX_498_wire) (OR_u32_u32_499_wire)   $flowthrough 
    $delay OR_u32_u32_499_inst 0
    // (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) ))
    |[OR_u32_u32_500_inst] (OR_u32_u32_479_wire OR_u32_u32_499_wire) (OR_u32_u32_500_wire)   $flowthrough 
    $delay OR_u32_u32_500_inst 0
    // (rd1 + rd2)
    +[ADD_u32_u32_504_inst] (rd1_368 rd2_368) (ADD_u32_u32_504_wire)   $flowthrough 
    $delay ADD_u32_u32_504_inst 0
    // ( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  ) 
    ? [MUX_506_inst] (EQ_u8_u1_471_471_delayed_7_0_443 ADD_u32_u32_504_wire konst_505_wire_constant) (MUX_506_wire)  $flowthrough
    // (rd1 - rd2)
    -[SUB_u32_u32_510_inst] (rd1_368 rd2_368) (SUB_u32_u32_510_wire)   $flowthrough 
    $delay SUB_u32_u32_510_inst 0
    // ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) 
    ? [MUX_512_inst] (EQ_u8_u1_479_479_delayed_7_0_448 SUB_u32_u32_510_wire konst_511_wire_constant) (MUX_512_wire)  $flowthrough
    // (( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) )
    |[OR_u32_u32_513_inst] (MUX_506_wire MUX_512_wire) (OR_u32_u32_513_wire)   $flowthrough 
    $delay OR_u32_u32_513_inst 0
    // (rd1 << rd2)
    <<[SHL_u32_u32_517_inst] (rd1_368 rd2_368) (SHL_u32_u32_517_wire)   $flowthrough 
    $delay SHL_u32_u32_517_inst 0
    // ($bitcast ($uint<32>) (rd1 << rd2) )
    # := [type_cast_518_inst] (SHL_u32_u32_517_wire) (type_cast_518_wire)   $flowthrough
    $delay type_cast_518_inst 0
    // ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) 
    ? [MUX_520_inst] (EQ_u8_u1_488_488_delayed_7_0_453 type_cast_518_wire konst_519_wire_constant) (MUX_520_wire)  $flowthrough
    // ((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) )
    |[OR_u32_u32_521_inst] (OR_u32_u32_513_wire MUX_520_wire) (OR_u32_u32_521_wire)   $flowthrough 
    $delay OR_u32_u32_521_inst 0
    // (rd1 >> rd2)
    >>[LSHR_u32_u32_525_inst] (rd1_368 rd2_368) (LSHR_u32_u32_525_wire)   $flowthrough 
    $delay LSHR_u32_u32_525_inst 0
    // ($bitcast ($uint<32>) (rd1 >> rd2) )
    # := [type_cast_526_inst] (LSHR_u32_u32_525_wire) (type_cast_526_wire)   $flowthrough
    $delay type_cast_526_inst 0
    // ( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    ? [MUX_528_inst] (EQ_u8_u1_498_498_delayed_7_0_408 type_cast_526_wire konst_527_wire_constant) (MUX_528_wire)  $flowthrough
    // (rd1 >> rd2)
    >>[LSHR_u32_u32_532_inst] (rd1_368 rd2_368) (LSHR_u32_u32_532_wire)   $flowthrough 
    $delay LSHR_u32_u32_532_inst 0
    // ($bitcast ($uint<32>) (rd1 >> rd2) )
    # := [type_cast_533_inst] (LSHR_u32_u32_532_wire) (type_cast_533_wire)   $flowthrough
    $delay type_cast_533_inst 0
    // ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
    ? [MUX_535_inst] (EQ_u8_u1_507_507_delayed_7_0_458 type_cast_533_wire konst_534_wire_constant) (MUX_535_wire)  $flowthrough
    // (( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) )
    |[OR_u32_u32_536_inst] (MUX_528_wire MUX_535_wire) (OR_u32_u32_536_wire)   $flowthrough 
    $delay OR_u32_u32_536_inst 0
    // (rd1 == rd2)
    ==[EQ_u32_u1_540_inst] (rd1_368 rd2_368) (EQ_u32_u1_540_wire)   $flowthrough 
    $delay EQ_u32_u1_540_inst 0
    // ( $mux (rd1 == rd2) zero_32  _b0  ) 
    ? [MUX_543_inst] (EQ_u32_u1_540_wire R_zero_32_541_wire_constant konst_542_wire_constant) (MUX_543_wire)  $flowthrough
    // (rd1 < rd2)
    <[ULT_u32_u1_546_inst] (rd1_368 rd2_368) (ULT_u32_u1_546_wire)   $flowthrough 
    $delay ULT_u32_u1_546_inst 0
    // ( $mux (rd1 < rd2) minus_1  _b0  ) 
    ? [MUX_549_inst] (ULT_u32_u1_546_wire R_minus_1_547_wire_constant konst_548_wire_constant) (MUX_549_wire)  $flowthrough
    // (( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) )
    |[OR_u32_u32_550_inst] (MUX_543_wire MUX_549_wire) (OR_u32_u32_550_wire)   $flowthrough 
    $delay OR_u32_u32_550_inst 0
    // (rd1 > rd2)
    >[UGT_u32_u1_553_inst] (rd1_368 rd2_368) (UGT_u32_u1_553_wire)   $flowthrough 
    $delay UGT_u32_u1_553_inst 0
    // ( $mux (rd1 > rd2) one_32  _b0  ) 
    ? [MUX_556_inst] (UGT_u32_u1_553_wire R_one_32_554_wire_constant konst_555_wire_constant) (MUX_556_wire)  $flowthrough
    // ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )
    |[OR_u32_u32_557_inst] (OR_u32_u32_550_wire MUX_556_wire) (OR_u32_u32_557_wire)   $flowthrough 
    $delay OR_u32_u32_557_inst 0
    // ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) 
    ? [MUX_559_inst] (EQ_u8_u1_517_517_delayed_7_0_463 OR_u32_u32_557_wire konst_558_wire_constant) (MUX_559_wire)  $flowthrough
    // ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )
    |[OR_u32_u32_560_inst] (OR_u32_u32_536_wire MUX_559_wire) (OR_u32_u32_560_wire)   $flowthrough 
    $delay OR_u32_u32_560_inst 0
    // (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) ))
    |[OR_u32_u32_561_inst] (OR_u32_u32_521_wire OR_u32_u32_560_wire) (OR_u32_u32_561_wire)   $flowthrough 
    $delay OR_u32_u32_561_inst 0
    // ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))
    |[OR_u32_u32_562_inst] (OR_u32_u32_500_wire OR_u32_u32_561_wire) (exec_result_init_563)    $fullrate
    $buffering  $out OR_u32_u32_562_inst exec_result_init_563 1
    $delay OR_u32_u32_562_inst 1
    // 				EQ_u8_u1_547_547_delayed_8_0 := (opcode == ADD) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // (opcode == ADD)
    ==[EQ_u8_u1_567_inst] (opcode_346 R_ADD_566_wire_constant) (EQ_u8_u1_547_547_delayed_8_0_568)    $fullrate
    $buffering  $out EQ_u8_u1_567_inst EQ_u8_u1_547_547_delayed_8_0_568 8
    $delay EQ_u8_u1_567_inst 1
    // 				carry_549_delayed_8_0 := carry $buffering 8// bits of buffering = 256. 
    //  file prog.linked.opt.aa, line 167
    # := [W_carry_549_delayed_8_0_569_inst] (carry_326) (carry_549_delayed_8_0_571)    $fullrate
    $buffering  $out W_carry_549_delayed_8_0_569_inst carry_549_delayed_8_0_571 8
    // 				$volatile exec_result := ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
    //  file prog.linked.opt.aa, line 168
    // (exec_result_init + carry_549_delayed_8_0)
    +[ADD_u32_u32_576_inst] (exec_result_init_563 carry_549_delayed_8_0_571) (ADD_u32_u32_576_wire)   $flowthrough 
    $delay ADD_u32_u32_576_inst 0
    // ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
    ? [MUX_578_inst] (EQ_u8_u1_547_547_delayed_8_0_568 ADD_u32_u32_576_wire exec_result_init_563) (exec_result_579)  $flowthrough
    // 				$volatile memWrite := ( $mux (opcode == STORE) zero_1  one_1 ) 
    //  file prog.linked.opt.aa, line 169
    // (opcode == STORE)
    ==[EQ_u8_u1_583_inst] (opcode_346 R_STORE_582_wire_constant) (EQ_u8_u1_583_wire)   $flowthrough 
    $delay EQ_u8_u1_583_inst 0
    // ( $mux (opcode == STORE) zero_1  one_1 ) 
    ? [MUX_586_inst] (EQ_u8_u1_583_wire R_zero_1_584_wire_constant R_one_1_585_wire_constant) (memWrite_587)  $flowthrough
    // 				$volatile regWrite := (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
    //  file prog.linked.opt.aa, line 170
    // (opcode == SBIR)
    ==[EQ_u8_u1_591_inst] (opcode_346 R_SBIR_590_wire_constant) (EQ_u8_u1_591_wire)   $flowthrough 
    $delay EQ_u8_u1_591_inst 0
    // (opcode == LOAD)
    ==[EQ_u8_u1_594_inst] (opcode_346 R_LOAD_593_wire_constant) (EQ_u8_u1_594_wire)   $flowthrough 
    $delay EQ_u8_u1_594_inst 0
    // ((opcode == SBIR) | (opcode == LOAD))
    |[OR_u1_u1_595_inst] (EQ_u8_u1_591_wire EQ_u8_u1_594_wire) (OR_u1_u1_595_wire)   $flowthrough 
    $delay OR_u1_u1_595_inst 0
    // (opcode == L_AND)
    ==[EQ_u8_u1_598_inst] (opcode_346 R_L_AND_597_wire_constant) (EQ_u8_u1_598_wire)   $flowthrough 
    $delay EQ_u8_u1_598_inst 0
    // (((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND))
    |[OR_u1_u1_599_inst] (OR_u1_u1_595_wire EQ_u8_u1_598_wire) (OR_u1_u1_599_wire)   $flowthrough 
    $delay OR_u1_u1_599_inst 0
    // (opcode == L_OR)
    ==[EQ_u8_u1_602_inst] (opcode_346 R_L_OR_601_wire_constant) (EQ_u8_u1_602_wire)   $flowthrough 
    $delay EQ_u8_u1_602_inst 0
    // (opcode == L_XNOR)
    ==[EQ_u8_u1_605_inst] (opcode_346 R_L_XNOR_604_wire_constant) (EQ_u8_u1_605_wire)   $flowthrough 
    $delay EQ_u8_u1_605_inst 0
    // ((opcode == L_OR) | (opcode == L_XNOR))
    |[OR_u1_u1_606_inst] (EQ_u8_u1_602_wire EQ_u8_u1_605_wire) (OR_u1_u1_606_wire)   $flowthrough 
    $delay OR_u1_u1_606_inst 0
    // (opcode == ADD)
    ==[EQ_u8_u1_609_inst] (opcode_346 R_ADD_608_wire_constant) (EQ_u8_u1_609_wire)   $flowthrough 
    $delay EQ_u8_u1_609_inst 0
    // (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))
    |[OR_u1_u1_610_inst] (OR_u1_u1_606_wire EQ_u8_u1_609_wire) (OR_u1_u1_610_wire)   $flowthrough 
    $delay OR_u1_u1_610_inst 0
    // ((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD)))
    |[OR_u1_u1_611_inst] (OR_u1_u1_599_wire OR_u1_u1_610_wire) (OR_u1_u1_611_wire)   $flowthrough 
    $delay OR_u1_u1_611_inst 0
    // (opcode == SUB)
    ==[EQ_u8_u1_614_inst] (opcode_346 R_SUB_613_wire_constant) (EQ_u8_u1_614_wire)   $flowthrough 
    $delay EQ_u8_u1_614_inst 0
    // (opcode == L_SLL)
    ==[EQ_u8_u1_617_inst] (opcode_346 R_L_SLL_616_wire_constant) (EQ_u8_u1_617_wire)   $flowthrough 
    $delay EQ_u8_u1_617_inst 0
    // ((opcode == SUB) | (opcode == L_SLL))
    |[OR_u1_u1_618_inst] (EQ_u8_u1_614_wire EQ_u8_u1_617_wire) (OR_u1_u1_618_wire)   $flowthrough 
    $delay OR_u1_u1_618_inst 0
    // (opcode == L_SRL)
    ==[EQ_u8_u1_621_inst] (opcode_346 R_L_SRL_620_wire_constant) (EQ_u8_u1_621_wire)   $flowthrough 
    $delay EQ_u8_u1_621_inst 0
    // (((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL))
    |[OR_u1_u1_622_inst] (OR_u1_u1_618_wire EQ_u8_u1_621_wire) (OR_u1_u1_622_wire)   $flowthrough 
    $delay OR_u1_u1_622_inst 0
    // (opcode == L_SRA)
    ==[EQ_u8_u1_625_inst] (opcode_346 R_L_SRA_624_wire_constant) (EQ_u8_u1_625_wire)   $flowthrough 
    $delay EQ_u8_u1_625_inst 0
    // (opcode == CALL)
    ==[EQ_u8_u1_628_inst] (opcode_346 R_CALL_627_wire_constant) (EQ_u8_u1_628_wire)   $flowthrough 
    $delay EQ_u8_u1_628_inst 0
    // ((opcode == L_SRA) | (opcode == CALL))
    |[OR_u1_u1_629_inst] (EQ_u8_u1_625_wire EQ_u8_u1_628_wire) (OR_u1_u1_629_wire)   $flowthrough 
    $delay OR_u1_u1_629_inst 0
    // (opcode == CMP)
    ==[EQ_u8_u1_632_inst] (opcode_346 R_CMP_631_wire_constant) (EQ_u8_u1_632_wire)   $flowthrough 
    $delay EQ_u8_u1_632_inst 0
    // (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))
    |[OR_u1_u1_633_inst] (OR_u1_u1_629_wire EQ_u8_u1_632_wire) (OR_u1_u1_633_wire)   $flowthrough 
    $delay OR_u1_u1_633_inst 0
    // ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP)))
    |[OR_u1_u1_634_inst] (OR_u1_u1_622_wire OR_u1_u1_633_wire) (OR_u1_u1_634_wire)   $flowthrough 
    $delay OR_u1_u1_634_inst 0
    // (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
    |[OR_u1_u1_635_inst] (OR_u1_u1_611_wire OR_u1_u1_634_wire) (regWrite_636)   $flowthrough 
    $delay OR_u1_u1_635_inst 0
    // 				memAddr := ( $slice rd1 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 171
    // ( $slice rd1 7 0 ) 
    [:] [slice_639_inst] (rd1_368 7 0) (memAddr_640)  $fullrate
    $buffering  $out slice_639_inst memAddr_640 1
    $delay slice_639_inst 1
    // 				$volatile is_uart_addr := ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
    //  file prog.linked.opt.aa, line 172
    // (memAddr == uart_addr)
    ==[EQ_u8_u1_644_inst] (memAddr_640 R_uart_addr_643_wire_constant) (EQ_u8_u1_644_wire)   $flowthrough 
    $delay EQ_u8_u1_644_inst 0
    // ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
    ? [MUX_647_inst] (EQ_u8_u1_644_wire R_one_1_645_wire_constant R_zero_1_646_wire_constant) (is_uart_addr_648)  $flowthrough
    // 				memWrite_625_delayed_8_0 := memWrite $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 173
    # := [W_memWrite_625_delayed_8_0_649_inst] (memWrite_587) (memWrite_625_delayed_8_0_651)    $fullrate
    $buffering  $out W_memWrite_625_delayed_8_0_649_inst memWrite_625_delayed_8_0_651 8
    // 				rd2_629_delayed_1_0 := rd2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 174
    # := [W_rd2_629_delayed_1_0_652_inst] (rd2_368) (rd2_629_delayed_1_0_654)    $fullrate
    // 				$guard (~is_uart_addr) mem_in := ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 175
    // (memWrite_625_delayed_8_0 && memAddr)
    &&[CONCAT_u1_u9_659_inst] (memWrite_625_delayed_8_0_651 memAddr_640) (CONCAT_u1_u9_659_wire) $guard ( ~ is_uart_addr_648 )   $flowthrough 
    $delay CONCAT_u1_u9_659_inst 0
    // (zero_23 && rd2_629_delayed_1_0)
    &&[CONCAT_u23_u55_662_inst] (R_zero_23_660_wire_constant rd2_629_delayed_1_0_654) (CONCAT_u23_u55_662_wire) $guard ( ~ is_uart_addr_648 )   $flowthrough 
    $delay CONCAT_u23_u55_662_inst 0
    // ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))
    &&[CONCAT_u9_u64_663_inst] (CONCAT_u1_u9_659_wire CONCAT_u23_u55_662_wire) (CONCAT_u9_u64_663_wire) $guard ( ~ is_uart_addr_648 )    $fullrate
    $buffering  $out CONCAT_u9_u64_663_inst CONCAT_u9_u64_663_wire 1
    $delay CONCAT_u9_u64_663_inst 1
    // mem_in
    $ioport $out [WPIPE_mem_in_656_inst]  (CONCAT_u9_u64_663_wire) (mem_in) $guard ( ~ is_uart_addr_648 )  $fullrate 
    // 				$guard (~is_uart_addr) memReadData := mem_out// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 176
    // mem_out
    $ioport $in [RPIPE_mem_out_667_inst] (mem_out) (memReadData_668) $guard ( ~ is_uart_addr_648 )  $fullrate 
    $buffering $out RPIPE_mem_out_667_inst memReadData_668 1
    // 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
    //  file prog.linked.opt.aa, line 177
    $call [call_stmt_671_call] $module receive_from_uart() (data_from_uart_671) $guard ( is_uart_addr_648 )   $fullrate
    $delay call_stmt_671_call 4
    $buffering  $out call_stmt_671_call data_from_uart_671 1
    // 				$volatile program_cnt_1 := (program_cnt + 1 )
    //  file prog.linked.opt.aa, line 179
    // (program_cnt + 1 )
    +[ADD_u8_u8_677_inst] (program_cnt_322 konst_676_wire_constant) (program_cnt_1_678)   $flowthrough 
    $delay ADD_u8_u8_677_inst 0
    // 				EQ_u8_u1_653_653_delayed_9_0 := (opcode == LOAD) $buffering 9// bits of buffering = 9. 
    //  file prog.linked.opt.aa, line 180
    // (opcode == LOAD)
    ==[EQ_u8_u1_682_inst] (opcode_346 R_LOAD_681_wire_constant) (EQ_u8_u1_653_653_delayed_9_0_683)    $fullrate
    $buffering  $out EQ_u8_u1_682_inst EQ_u8_u1_653_653_delayed_9_0_683 9
    $delay EQ_u8_u1_682_inst 1
    // 				EQ_u8_u1_657_657_delayed_8_0 := (opcode == CALL) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 181
    // (opcode == CALL)
    ==[EQ_u8_u1_687_inst] (opcode_346 R_CALL_686_wire_constant) (EQ_u8_u1_657_657_delayed_8_0_688)    $fullrate
    $buffering  $out EQ_u8_u1_687_inst EQ_u8_u1_657_657_delayed_8_0_688 8
    $delay EQ_u8_u1_687_inst 1
    // 				type_cast_659_659_delayed_8_0 := ($bitcast ($uint<32>) program_cnt_1 ) $buffering 8// bits of buffering = 256. 
    //  file prog.linked.opt.aa, line 182
    // ($bitcast ($uint<32>) program_cnt_1 )
    # := [type_cast_691_inst] (program_cnt_1_678) (type_cast_659_659_delayed_8_0_692)    $fullrate
    $buffering  $out type_cast_691_inst type_cast_659_659_delayed_8_0_692 8
    $delay type_cast_691_inst 1
    // 				EQ_u1_u1_662_662_delayed_8_0 := (regWrite == one_1) $buffering 8// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 183
    // (regWrite == one_1)
    ==[EQ_u1_u1_696_inst] (regWrite_636 R_one_1_695_wire_constant) (EQ_u1_u1_662_662_delayed_8_0_697)    $fullrate
    $buffering  $out EQ_u1_u1_696_inst EQ_u1_u1_662_662_delayed_8_0_697 8
    $delay EQ_u1_u1_696_inst 1
    // 				MUX_667_667_delayed_1_0 := ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 184
    // ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
    ? [MUX_705_inst] (EQ_u1_u1_662_662_delayed_8_0_697 exec_result_579 type_cast_704_wire_constant) (MUX_705_wire)  $flowthrough
    // ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) 
    ? [MUX_706_inst] (EQ_u8_u1_657_657_delayed_8_0_688 type_cast_659_659_delayed_8_0_692 MUX_705_wire) (MUX_667_667_delayed_1_0_707)  $fullrate
    $buffering  $out MUX_706_inst MUX_667_667_delayed_1_0_707 1
    // 				regWriteData := ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 185
    // ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) 
    ? [MUX_712_inst] (EQ_u8_u1_653_653_delayed_9_0_683 memReadData_668 MUX_667_667_delayed_1_0_707) (regWriteData_713)  $fullrate
    $buffering  $out MUX_712_inst regWriteData_713 1
    // 				rs1_imm_671_delayed_10_0 := rs1_imm $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 186
    # := [W_rs1_imm_671_delayed_10_0_714_inst] (rs1_imm_350) (rs1_imm_671_delayed_10_0_716)    $fullrate
    $buffering  $out W_rs1_imm_671_delayed_10_0_714_inst rs1_imm_671_delayed_10_0_716 10
    // 				rs2_673_delayed_10_0 := rs2 $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 187
    # := [W_rs2_673_delayed_10_0_717_inst] (rs2_354) (rs2_673_delayed_10_0_719)    $fullrate
    $buffering  $out W_rs2_673_delayed_10_0_717_inst rs2_673_delayed_10_0_719 10
    // 				regWrite_674_delayed_10_0 := regWrite $buffering 10// bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 188
    # := [W_regWrite_674_delayed_10_0_720_inst] (regWrite_636) (regWrite_674_delayed_10_0_722)    $fullrate
    $buffering  $out W_regWrite_674_delayed_10_0_720_inst regWrite_674_delayed_10_0_722 10
    // 				rd_675_delayed_10_0 := rd $buffering 10// bits of buffering = 80. 
    //  file prog.linked.opt.aa, line 189
    # := [W_rd_675_delayed_10_0_723_inst] (rd_358) (rd_675_delayed_10_0_725)    $fullrate
    $buffering  $out W_rd_675_delayed_10_0_723_inst rd_675_delayed_10_0_725 10
    // 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
    //  file prog.linked.opt.aa, line 190
    $call [call_stmt_735_call] $module registerFileModule(R_zero_1_726_wire_constant rs1_imm_671_delayed_10_0_716 R_zero_1_728_wire_constant rs2_673_delayed_10_0_719 regWrite_674_delayed_10_0_722 rd_675_delayed_10_0_725 regWriteData_713) (read_while_write1_735 read_while_write2_735)   $fullrate
    $delay call_stmt_735_call 7
    $buffering  $in call_stmt_735_call R_zero_1_726_wire_constant 1
    $buffering  $in call_stmt_735_call rs1_imm_671_delayed_10_0_716 1
    $buffering  $in call_stmt_735_call R_zero_1_728_wire_constant 1
    $buffering  $in call_stmt_735_call rs2_673_delayed_10_0_719 1
    $buffering  $in call_stmt_735_call regWrite_674_delayed_10_0_722 1
    $buffering  $in call_stmt_735_call rd_675_delayed_10_0_725 1
    $buffering  $in call_stmt_735_call regWriteData_713 1
    $buffering  $out call_stmt_735_call read_while_write1_735 1
    $buffering  $out call_stmt_735_call read_while_write2_735 1
    // 				EQ_u8_u1_683_683_delayed_10_0 := (opcode == STORE) $buffering 10// bits of buffering = 10. 
    //  file prog.linked.opt.aa, line 191
    // (opcode == STORE)
    ==[EQ_u8_u1_739_inst] (opcode_346 R_STORE_738_wire_constant) (EQ_u8_u1_683_683_delayed_10_0_740)    $fullrate
    $buffering  $out EQ_u8_u1_739_inst EQ_u8_u1_683_683_delayed_10_0_740 10
    $delay EQ_u8_u1_739_inst 1
    // 				rd2_684_delayed_3_0 := rd2 $buffering 3// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 192
    # := [W_rd2_684_delayed_3_0_741_inst] (rd2_368) (rd2_684_delayed_3_0_743)    $fullrate
    $buffering  $out W_rd2_684_delayed_3_0_741_inst rd2_684_delayed_3_0_743 3
    // 				data_to_send_uart := ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 193
    // ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) 
    ? [MUX_748_inst] (EQ_u8_u1_683_683_delayed_10_0_740 rd2_684_delayed_3_0_743 regWriteData_713) (data_to_send_uart_749)  $fullrate
    $buffering  $out MUX_748_inst data_to_send_uart_749 1
    // 				$call send_to_uart (data_to_send_uart ) () 
    //  file prog.linked.opt.aa, line 194
    $call [call_stmt_751_call] $module send_to_uart(data_to_send_uart_749) ()   $fullrate
    $delay call_stmt_751_call 4
    $buffering  $in call_stmt_751_call data_to_send_uart_749 1
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 126
  // 		cmd := start_processor// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 128
  // start_processor
  W_cmd_312_inst <=> (branch_block_stmt_310/assign_stmt_314/assign_stmt_314_Sample/req branch_block_stmt_310/assign_stmt_314/assign_stmt_314_Update/req) (branch_block_stmt_310/assign_stmt_314/assign_stmt_314_Sample/ack branch_block_stmt_310/assign_stmt_314/assign_stmt_314_Update/ack)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (cmd == one_8)
  if_stmt_315_branch <=> (branch_block_stmt_310/if_stmt_315_eval_test/branch_req) (branch_block_stmt_310/if_stmt_315_else_link/else_choice_transition branch_block_stmt_310/if_stmt_315_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_320
  //  file prog.linked.opt.aa, line 132
  phi_stmt_322 <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_322_entry_sample_req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_322_loopback_sample_req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_322_phi_mux_ack)
  n_program_cnt_393_325_buf <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_program_cnt_325_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_program_cnt_325_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_program_cnt_325_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_program_cnt_325_Update/ack)
  phi_stmt_326 <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_326_entry_sample_req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_326_loopback_sample_req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/phi_stmt_326_phi_mux_ack)
  n_carry_376_329_buf <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_carry_329_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_carry_329_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_carry_329_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/R_n_carry_329_Update/ack)
  // 				mem_in := ((read_signal && program_cnt) && (zero_23 && zero_32))// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 140
  // ((read_signal && program_cnt) && (zero_23 && zero_32))
  // (read_signal && program_cnt)
  // program_cnt
  CONCAT_u9_u64_338_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_338_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_338_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_338_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_338_Update/ca)
  // mem_in
  WPIPE_mem_in_331_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_331_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_331_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_331_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_331_Update/ack)
  // 				instruction := mem_out// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 141
  // mem_out
  RPIPE_mem_out_341_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_341_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_341_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_341_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_341_Update/ca)
  // 				$volatile opcode := ( $slice instruction 31 24 ) 
  //  file prog.linked.opt.aa, line 142
  // instruction
  // 				$volatile rs1_imm := ( $slice instruction 23 16 ) 
  //  file prog.linked.opt.aa, line 143
  // instruction
  // 				$volatile rs2 := ( $slice instruction 15 8 ) 
  //  file prog.linked.opt.aa, line 144
  // instruction
  // 				$volatile rd := ( $slice instruction 7 0 ) 
  //  file prog.linked.opt.aa, line 145
  // instruction
  // 				$call registerFileModule (one_1 rs1_imm one_1 rs2 zero_1 rd zero_32 ) (rd1 rd2 ) 
  //  file prog.linked.opt.aa, line 146
  // rs1_imm
  // rs2
  // rd
  call_stmt_368_call <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_368_Sample/crr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_368_Update/ccr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_368_Sample/cra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_368_Update/cca)
  // 				n_carry := ( $mux (program_cnt == seven_8) one_32  zero_32 )  $buffering 2// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 147
  // (program_cnt == seven_8)
  // program_cnt
  // ( $mux (program_cnt == seven_8) one_32  zero_32 ) 
  MUX_375_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_375_start/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_375_complete/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_375_start/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_375_complete/ack)
  // 				$volatile is_rs1_neg := ( $slice rd1 31 31 ) 
  //  file prog.linked.opt.aa, line 148
  // rd1
  // 				opcode_400_delayed_7_0 := opcode $buffering 7// bits of buffering = 56. 
  //  file prog.linked.opt.aa, line 149
  // opcode
  W_opcode_400_delayed_7_0_381_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_383_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_383_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_383_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_383_Update/ack)
  // 				program_cnt_403_delayed_7_0 := program_cnt $buffering 7// bits of buffering = 56. 
  //  file prog.linked.opt.aa, line 150
  // program_cnt
  W_program_cnt_403_delayed_7_0_384_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_386_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_386_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_386_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_386_Update/ack)
  // 				$call cal_Next_program_cnt (opcode_400_delayed_7_0 rd1 rd2 program_cnt_403_delayed_7_0 is_rs1_neg ) (n_program_cnt )  $buffering 2
  //  file prog.linked.opt.aa, line 151
  // opcode_400_delayed_7_0
  // rd1
  // rd2
  // program_cnt_403_delayed_7_0
  // is_rs1_neg
  call_stmt_393_call <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_393_Sample/crr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_393_Update/ccr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_393_Sample/cra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_393_Update/cca)
  // 				EQ_u8_u1_418_418_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 153
  // (opcode == ADD)
  // opcode
  EQ_u8_u1_402_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_402_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_402_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_402_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_402_Update/ca)
  // 				EQ_u8_u1_498_498_delayed_7_0 := (opcode == L_SRL) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 154
  // (opcode == L_SRL)
  // opcode
  EQ_u8_u1_407_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_407_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_407_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_407_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_407_Update/ca)
  // 				MUX_431_431_delayed_7_0 := ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  )  $buffering 7// bits of buffering = 224. 
  //  file prog.linked.opt.aa, line 155
  // (opcode == SBIR)
  // opcode
  // (zero_24 && rs1_imm)
  // rs1_imm
  // ( $mux (opcode == SBIR) (zero_24 && rs1_imm)  _b0  ) 
  MUX_417_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_417_start/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_417_complete/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_417_start/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_417_complete/ack)
  // 				EQ_u8_u1_435_435_delayed_7_0 := (opcode == L_AND) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 156
  // (opcode == L_AND)
  // opcode
  EQ_u8_u1_422_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_422_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_422_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_422_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_422_Update/ca)
  // 				EQ_u8_u1_444_444_delayed_7_0 := (opcode == L_OR) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 157
  // (opcode == L_OR)
  // opcode
  EQ_u8_u1_427_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_427_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_427_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_427_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_427_Update/ca)
  // 				EQ_u8_u1_452_452_delayed_7_0 := (opcode == L_XNOR) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 158
  // (opcode == L_XNOR)
  // opcode
  EQ_u8_u1_432_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_432_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_432_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_432_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_432_Update/ca)
  // 				EQ_u8_u1_461_461_delayed_7_0 := (opcode == L_XOR) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 159
  // (opcode == L_XOR)
  // opcode
  EQ_u8_u1_437_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_437_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_437_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_437_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_437_Update/ca)
  // 				EQ_u8_u1_471_471_delayed_7_0 := (opcode == ADD) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 160
  // (opcode == ADD)
  // opcode
  EQ_u8_u1_442_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_442_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_442_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_442_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_442_Update/ca)
  // 				EQ_u8_u1_479_479_delayed_7_0 := (opcode == SUB) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 161
  // (opcode == SUB)
  // opcode
  EQ_u8_u1_447_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_447_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_447_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_447_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_447_Update/ca)
  // 				EQ_u8_u1_488_488_delayed_7_0 := (opcode == L_SLL) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 162
  // (opcode == L_SLL)
  // opcode
  EQ_u8_u1_452_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_452_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_452_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_452_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_452_Update/ca)
  // 				EQ_u8_u1_507_507_delayed_7_0 := (opcode == L_SRA) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 163
  // (opcode == L_SRA)
  // opcode
  EQ_u8_u1_457_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_457_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_457_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_457_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_457_Update/ca)
  // 				EQ_u8_u1_517_517_delayed_7_0 := (opcode == CMP) $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 164
  // (opcode == CMP)
  // opcode
  EQ_u8_u1_462_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_462_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_462_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_462_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_462_Update/ca)
  // 				exec_result_init := ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 165
  // ((((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )) | (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )))
  // (((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) ) | ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) ))
  // ((( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0) | ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) )
  // (( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  )  | MUX_431_431_delayed_7_0)
  // EQ_u8_u1_418_418_delayed_7_0
  // (rd1 + rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_418_418_delayed_7_0 (rd1 + rd2)  _b0  ) 
  // MUX_431_431_delayed_7_0
  // EQ_u8_u1_435_435_delayed_7_0
  // (rd1 & rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_435_435_delayed_7_0 (rd1 & rd2)  _b0  ) 
  // ((( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) ) | ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) )
  // (( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  )  | ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) )
  // EQ_u8_u1_444_444_delayed_7_0
  // (rd1 | rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_444_444_delayed_7_0 (rd1 | rd2)  _b0  ) 
  // EQ_u8_u1_452_452_delayed_7_0
  // (rd1 ~^ rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_452_452_delayed_7_0 (rd1 ~^ rd2)  _b0  ) 
  // EQ_u8_u1_461_461_delayed_7_0
  // (rd1 ^ rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_461_461_delayed_7_0 (rd1 ^ rd2)  _b0  ) 
  // (((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) ) | ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) ))
  // ((( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) ) | ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) )
  // (( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  )  | ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) )
  // EQ_u8_u1_471_471_delayed_7_0
  // (rd1 + rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_471_471_delayed_7_0 (rd1 + rd2)  _b0  ) 
  // EQ_u8_u1_479_479_delayed_7_0
  // (rd1 - rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_479_479_delayed_7_0 (rd1 - rd2)  _b0  ) 
  // EQ_u8_u1_488_488_delayed_7_0
  // (rd1 << rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_488_488_delayed_7_0 ($bitcast ($uint<32>) (rd1 << rd2) )  _b0  ) 
  // ((( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) ) | ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) )
  // (( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  )  | ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) )
  // EQ_u8_u1_498_498_delayed_7_0
  // (rd1 >> rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_498_498_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
  // EQ_u8_u1_507_507_delayed_7_0
  // (rd1 >> rd2)
  // rd1
  // rd2
  // ( $mux EQ_u8_u1_507_507_delayed_7_0 ($bitcast ($uint<32>) (rd1 >> rd2) )  _b0  ) 
  // EQ_u8_u1_517_517_delayed_7_0
  // ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )
  // (( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) )
  // (rd1 == rd2)
  // rd1
  // rd2
  // ( $mux (rd1 == rd2) zero_32  _b0  ) 
  // (rd1 < rd2)
  // rd1
  // rd2
  // ( $mux (rd1 < rd2) minus_1  _b0  ) 
  // (rd1 > rd2)
  // rd1
  // rd2
  // ( $mux (rd1 > rd2) one_32  _b0  ) 
  // ( $mux EQ_u8_u1_517_517_delayed_7_0 ((( $mux (rd1 == rd2) zero_32  _b0  )  | ( $mux (rd1 < rd2) minus_1  _b0  ) ) | ( $mux (rd1 > rd2) one_32  _b0  ) )  _b0  ) 
  OR_u32_u32_562_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/OR_u32_u32_562_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/OR_u32_u32_562_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/OR_u32_u32_562_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/OR_u32_u32_562_Update/ca)
  // 				EQ_u8_u1_547_547_delayed_8_0 := (opcode == ADD) $buffering 8// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 166
  // (opcode == ADD)
  // opcode
  EQ_u8_u1_567_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_567_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_567_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_567_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_567_Update/ca)
  // 				carry_549_delayed_8_0 := carry $buffering 8// bits of buffering = 256. 
  //  file prog.linked.opt.aa, line 167
  // carry
  W_carry_549_delayed_8_0_569_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_571_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_571_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_571_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_571_Update/ack)
  // 				$volatile exec_result := ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
  //  file prog.linked.opt.aa, line 168
  // EQ_u8_u1_547_547_delayed_8_0
  // (exec_result_init + carry_549_delayed_8_0)
  // exec_result_init
  // carry_549_delayed_8_0
  // exec_result_init
  // ( $mux EQ_u8_u1_547_547_delayed_8_0 (exec_result_init + carry_549_delayed_8_0)  exec_result_init ) 
  // 				$volatile memWrite := ( $mux (opcode == STORE) zero_1  one_1 ) 
  //  file prog.linked.opt.aa, line 169
  // (opcode == STORE)
  // opcode
  // ( $mux (opcode == STORE) zero_1  one_1 ) 
  // 				$volatile regWrite := (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
  //  file prog.linked.opt.aa, line 170
  // (((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))) | ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))))
  // ((((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND)) | (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD)))
  // (((opcode == SBIR) | (opcode == LOAD)) | (opcode == L_AND))
  // ((opcode == SBIR) | (opcode == LOAD))
  // (opcode == SBIR)
  // opcode
  // (opcode == LOAD)
  // opcode
  // (opcode == L_AND)
  // opcode
  // (((opcode == L_OR) | (opcode == L_XNOR)) | (opcode == ADD))
  // ((opcode == L_OR) | (opcode == L_XNOR))
  // (opcode == L_OR)
  // opcode
  // (opcode == L_XNOR)
  // opcode
  // (opcode == ADD)
  // opcode
  // ((((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL)) | (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP)))
  // (((opcode == SUB) | (opcode == L_SLL)) | (opcode == L_SRL))
  // ((opcode == SUB) | (opcode == L_SLL))
  // (opcode == SUB)
  // opcode
  // (opcode == L_SLL)
  // opcode
  // (opcode == L_SRL)
  // opcode
  // (((opcode == L_SRA) | (opcode == CALL)) | (opcode == CMP))
  // ((opcode == L_SRA) | (opcode == CALL))
  // (opcode == L_SRA)
  // opcode
  // (opcode == CALL)
  // opcode
  // (opcode == CMP)
  // opcode
  // 				memAddr := ( $slice rd1 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 171
  // rd1
  // ( $slice rd1 7 0 ) 
  slice_639_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/slice_639_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/slice_639_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/slice_639_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/slice_639_Update/ca)
  // 				$volatile is_uart_addr := ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
  //  file prog.linked.opt.aa, line 172
  // (memAddr == uart_addr)
  // memAddr
  // ( $mux (memAddr == uart_addr) one_1  zero_1 ) 
  // 				memWrite_625_delayed_8_0 := memWrite $buffering 8// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 173
  // memWrite
  W_memWrite_625_delayed_8_0_649_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_651_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_651_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_651_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_651_Update/ack)
  // 				rd2_629_delayed_1_0 := rd2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 174
  // rd2
  W_rd2_629_delayed_1_0_652_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_654_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_654_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_654_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_654_Update/ack)
  // 				$guard (~is_uart_addr) mem_in := ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 175
  // ((memWrite_625_delayed_8_0 && memAddr) && (zero_23 && rd2_629_delayed_1_0))
  // (memWrite_625_delayed_8_0 && memAddr)
  // memWrite_625_delayed_8_0
  // memAddr
  // (zero_23 && rd2_629_delayed_1_0)
  // rd2_629_delayed_1_0
  CONCAT_u9_u64_663_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_663_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_663_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_663_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/CONCAT_u9_u64_663_Update/ca)
  // mem_in
  WPIPE_mem_in_656_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_656_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_656_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_656_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/WPIPE_mem_in_656_Update/ack)
  // 				$guard (~is_uart_addr) memReadData := mem_out// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 176
  // mem_out
  RPIPE_mem_out_667_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_667_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_667_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_667_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/RPIPE_mem_out_667_Update/ca)
  // 				$guard (is_uart_addr) $call receive_from_uart () (data_from_uart ) 
  //  file prog.linked.opt.aa, line 177
  call_stmt_671_call <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_671_Sample/crr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_671_Update/ccr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_671_Sample/cra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_671_Update/cca)
  // 				$volatile program_cnt_1 := (program_cnt + 1 )
  //  file prog.linked.opt.aa, line 179
  // (program_cnt + 1 )
  // program_cnt
  // 				EQ_u8_u1_653_653_delayed_9_0 := (opcode == LOAD) $buffering 9// bits of buffering = 9. 
  //  file prog.linked.opt.aa, line 180
  // (opcode == LOAD)
  // opcode
  EQ_u8_u1_682_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_682_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_682_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_682_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_682_Update/ca)
  // 				EQ_u8_u1_657_657_delayed_8_0 := (opcode == CALL) $buffering 8// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 181
  // (opcode == CALL)
  // opcode
  EQ_u8_u1_687_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_687_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_687_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_687_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_687_Update/ca)
  // 				type_cast_659_659_delayed_8_0 := ($bitcast ($uint<32>) program_cnt_1 ) $buffering 8// bits of buffering = 256. 
  //  file prog.linked.opt.aa, line 182
  // program_cnt_1
  // ($bitcast ($uint<32>) program_cnt_1 )
  type_cast_691_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/type_cast_691_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/type_cast_691_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/type_cast_691_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/type_cast_691_Update/ca)
  // 				EQ_u1_u1_662_662_delayed_8_0 := (regWrite == one_1) $buffering 8// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 183
  // (regWrite == one_1)
  // regWrite
  EQ_u1_u1_696_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u1_u1_696_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u1_u1_696_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u1_u1_696_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u1_u1_696_Update/ca)
  // 				MUX_667_667_delayed_1_0 := ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 184
  // EQ_u8_u1_657_657_delayed_8_0
  // type_cast_659_659_delayed_8_0
  // EQ_u1_u1_662_662_delayed_8_0
  // exec_result
  // ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) ) 
  // ( $mux EQ_u8_u1_657_657_delayed_8_0 type_cast_659_659_delayed_8_0  ( $mux EQ_u1_u1_662_662_delayed_8_0 exec_result  ($bitcast ($uint<32>) 0  ) )  ) 
  MUX_706_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_706_start/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_706_complete/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_706_start/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_706_complete/ack)
  // 				regWriteData := ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 185
  // EQ_u8_u1_653_653_delayed_9_0
  // memReadData
  // MUX_667_667_delayed_1_0
  // ( $mux EQ_u8_u1_653_653_delayed_9_0 memReadData  MUX_667_667_delayed_1_0 ) 
  MUX_712_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_712_start/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_712_complete/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_712_start/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_712_complete/ack)
  // 				rs1_imm_671_delayed_10_0 := rs1_imm $buffering 10// bits of buffering = 80. 
  //  file prog.linked.opt.aa, line 186
  // rs1_imm
  W_rs1_imm_671_delayed_10_0_714_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_716_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_716_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_716_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_716_Update/ack)
  // 				rs2_673_delayed_10_0 := rs2 $buffering 10// bits of buffering = 80. 
  //  file prog.linked.opt.aa, line 187
  // rs2
  W_rs2_673_delayed_10_0_717_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_719_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_719_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_719_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_719_Update/ack)
  // 				regWrite_674_delayed_10_0 := regWrite $buffering 10// bits of buffering = 10. 
  //  file prog.linked.opt.aa, line 188
  // regWrite
  W_regWrite_674_delayed_10_0_720_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_722_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_722_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_722_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_722_Update/ack)
  // 				rd_675_delayed_10_0 := rd $buffering 10// bits of buffering = 80. 
  //  file prog.linked.opt.aa, line 189
  // rd
  W_rd_675_delayed_10_0_723_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_725_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_725_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_725_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_725_Update/ack)
  // 				$call registerFileModule (zero_1 rs1_imm_671_delayed_10_0 zero_1 rs2_673_delayed_10_0 regWrite_674_delayed_10_0 rd_675_delayed_10_0 regWriteData ) (read_while_write1 read_while_write2 ) 
  //  file prog.linked.opt.aa, line 190
  // rs1_imm_671_delayed_10_0
  // rs2_673_delayed_10_0
  // regWrite_674_delayed_10_0
  // rd_675_delayed_10_0
  // regWriteData
  call_stmt_735_call <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_735_Sample/crr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_735_Update/ccr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_735_Sample/cra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_735_Update/cca)
  // 				EQ_u8_u1_683_683_delayed_10_0 := (opcode == STORE) $buffering 10// bits of buffering = 10. 
  //  file prog.linked.opt.aa, line 191
  // (opcode == STORE)
  // opcode
  EQ_u8_u1_739_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_739_Sample/rr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_739_Update/cr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_739_Sample/ra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/EQ_u8_u1_739_Update/ca)
  // 				rd2_684_delayed_3_0 := rd2 $buffering 3// bits of buffering = 96. 
  //  file prog.linked.opt.aa, line 192
  // rd2
  W_rd2_684_delayed_3_0_741_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_743_Sample/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_743_Update/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_743_Sample/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/assign_stmt_743_Update/ack)
  // 				data_to_send_uart := ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 193
  // EQ_u8_u1_683_683_delayed_10_0
  // rd2_684_delayed_3_0
  // regWriteData
  // ( $mux EQ_u8_u1_683_683_delayed_10_0 rd2_684_delayed_3_0  regWriteData ) 
  MUX_748_inst <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_748_start/req branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_748_complete/req) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_748_start/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/MUX_748_complete/ack)
  // 				$call send_to_uart (data_to_send_uart ) () 
  //  file prog.linked.opt.aa, line 194
  // data_to_send_uart
  call_stmt_751_call <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_751_Sample/crr branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_751_Update/ccr) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_751_Sample/cra branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/call_stmt_751_Update/cca)
  // (opcode == HALT)
  // opcode
  do_while_stmt_320_branch <=> (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/do_while_stmt_320_loop_body/condition_evaluated) (branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/loop_exit/ack branch_block_stmt_310/branch_block_stmt_319/do_while_stmt_320/loop_taken/ack)
}
